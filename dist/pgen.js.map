{"version":3,"sources":["../webpack/universalModuleDefinition","../pgen.js","../webpack/bootstrap 4e88df6abe0f567706de","../external {\"root\":\"react\",\"amd\":\"react\",\"commonjs\":\"react\",\"commonjs2\":\"react\"}","../D:/Libraries/Dev/Node/freezer/src/Avatar.js","../D:/Libraries/Dev/Node/freezer/src/Colors.js","../D:/Libraries/Dev/Node/freezer/src/Countries.js","../D:/Libraries/Dev/Node/freezer/src/Genetic.js","../D:/Libraries/Dev/Node/freezer/src/Person.js","../D:/Libraries/Dev/Node/freezer/src/PersonGenerator.js",".././src/assets/img/avatar.svg",".././~/snapsvg/dist/snap.svg.js",".././~/random-js/lib/random.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_react","_react2","Avatar","_Component","_this","getPrototypeOf","skinColor","genetic","country","eyesColor","hairColor","style","backgroundColor","bgColor","skin","selectAll","attr","fill","eyes","hair","beard","eyebrows","cloth","select","gender","size","random","integer","transform","_this2","Snap","canvas","svg","load","_setSkinColor","_setEyesColor","countries","isAsian","initials","_setAsianEyes","_setEyesSize","bald","hairs","genders","MALE","bool","_setHairColor","_setClothColor","mouths","scale","append","allEyebrows","_setEyebrowsColor","beards","_setBeardColor","_this3","createElement","ref","width","height","Component","Countries","ethnicity","LIGHT","MEDIUM","DARK","ALL","all","asianCountries","indexOf","_randomJs","_randomJs2","_Countries","_Countries2","_Colors","_Colors2","Genetic","options","engine","engines","mt19937","seed","colors","FEMALE","hand","LEFT","RIGHT","TWO","arr","start","arguments","undefined","end","age","minAge","maxAge","handed","_choose","forEach","_getEthnicity","Person","infos","firstName","lastName","_extends","assign","source","hasOwnProperty","_Person","_Person2","_Genetic","_Genetic2","_Avatar","_Avatar2","_avatar","_avatar2","PersonGenerator","avatarOptions","min","max","Math","floor","opts","_generateOptions","avatar","makeAvatar","_PersonGenerator","_PersonGenerator2","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_LOCAL_MODULE_0__","__WEBPACK_AMD_DEFINE_RESULT__","glob","current_event","stop","version","has","separator","comaseparator","wildcard","numsort","a","b","events","n","firstDefined","ii","lastDefined","eve","name","scope","String","l","oldstop","args","Array","slice","listeners","z","indexed","queue","out","ce","push","zIndex","sort","apply","_events","item","items","k","j","jj","nes","names","split","e","es","concat","f","on","exist","event","attrs","nt","subname","RegExp","test","nts","off","unbind","splice","cur","funcs","once","f2","toString","window","mina","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","isArray","idgen","idprefix","Date","ID","timer","now","sta","val","s","ds","dur","B","speed","spd","duration","stopit","update","pause","pdif","get","resume","res","easing","set","frame","len","A","anim","linear","status","time","getById","easeout","pow","easein","easeinout","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","w","h","nodeType","wrap","is","Element","doc","querySelector","Paper","$","el","createTextNode","text","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","Str","setAttributeNS","setAttribute","removeAttribute","createElementNS","o","type","toLowerCase","isFinite","objectToString","clone","repush","array","cacher","postprocessor","newf","arg","join","cache","count","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","replace","params","tan","charAt","transform2matrix","bbox","tdata","parseTransformString","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","add","getSomeDefs","node","ownerSVGElement","parentNode","pdefs","defs","make","getSomeSVG","unit2px","getW","E","mgr","getBBox","getH","nam","class","appendChild","removeChild","add2group","list","children","childNodes","snap","hub","paper","tagName","nodeName","anims","_","g","mask","pattern","symbol","method","Fragment","frag","parent","desc","proto","ownerDocument","getElementsByTagName","body","dom","contentDocument","jsonFiller","win","document","toFloat","parseFloat","toInt","parseInt","mmax","mmin","round","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","r","hex","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","paramCounts","u","data","TString","rgTransform","_unit2px","contains","compareDocumentPosition","adown","documentElement","bup","query","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","innerHTML","firstChild","fragment","ch","toJSON","lastIndexOf","css","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","responseText","getOffset","elem","box","getBoundingClientRect","docElem","clientTop","clientLeft","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","getElementByPoint","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","matrix","fixids","urltest","it","uses","URL","linktest","els","ids","oldid","old","fs","from","to","chld","elproto","isWithoutTransform","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","map","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","eldata","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","d","matrixproto","norm","normalize","mag","me","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","grad","gradient","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","clipIt","gradrg","tokens","stops","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textContent","rgNotSpace","addClass","pos","clazz","finalValue","classes","curClasses","removeClass","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","rect","circle","preload","onerror","src","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","GgetBBox","step","unshift","gradientLinear","gradientRadial","gradientUnits","addStop","fx","fy","clear","next","paths","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","ax","ay","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","Number","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","Random","nativeMath","returnValue","generate","addend","toInteger","number","ceil","convertSliceArgument","returnUndefined","imul","ah","al","bh","bl","stringRepeat","repeat","result","Int32Array","refreshData","tmp","temper","seedWithArray","sourceLength","previous","getUseCount","discard","initial","autoSeed","generateEntropyArray","browserCrypto","crypto","getRandomValues","getTime","int32","uint32","uint53","high","low","uint53Full","int53","int53Full","isPowerOfTwoMinusOne","bitmask","masking","downscaleToLoopCheckedRange","range","extendedRange","maximum","downscaleToRange","isEvenlyDivisibleByMaxInt32","upscaleWithHighMasking","upscaleToLoopCheckedRange","ret","upscaleWithinU53","highRange","upscaleWithinI53AndLoopCheck","RangeError","realZeroToOneInclusive","realZeroToOneExclusive","real","multiply","multiplier","right","inclusive","isLeastBitTrue","lessThan","probability","percentage","scaled","numerator","pick","finish","distribution","picker","shuffle","downTo","sample","population","sampleSize","tailLength","die","sideCount","dice","dieCount","uuid4","zeroPad","zeroCount","DEFAULT_STRING_POOL","pool","Error","LOWER_HEX_POOL","lowerHex","upperHex","upper","date"],"mappings":"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","file":"pgen.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pgen\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"pgen\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pgen\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"pgen\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(8);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Avatar = function (_Component) {\n\t  _inherits(Avatar, _Component);\n\t\n\t  function Avatar(props) {\n\t    _classCallCheck(this, Avatar);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Avatar).call(this, props));\n\t\n\t    _this.skinColor = props.genetic.skinColor(props.country);\n\t    _this.eyesColor = props.genetic.eyesColor(props.country, _this.skinColor);\n\t    _this.hairColor = props.genetic.hairColor(props.country, _this.skinColor);\n\t\n\t    _this.style = {\n\t      backgroundColor: _this.props.bgColor\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Avatar, [{\n\t    key: '_setSkinColor',\n\t    value: function _setSkinColor(skin) {\n\t      skin.selectAll('[fill=\"#ffcc99\"]').attr({\n\t        fill: this.skinColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setEyesColor',\n\t    value: function _setEyesColor(eyes) {\n\t      eyes.selectAll('path').attr({\n\t        fill: this.eyesColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setHairColor',\n\t    value: function _setHairColor(hair) {\n\t      hair.selectAll('path').attr({\n\t        fill: this.hairColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setBeardColor',\n\t    value: function _setBeardColor(beard) {\n\t      beard.selectAll('path').attr({\n\t        fill: this.hairColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setEyebrowsColor',\n\t    value: function _setEyebrowsColor(eyebrows) {\n\t      eyebrows.selectAll('path').attr({\n\t        fill: this.hairColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setClothColor',\n\t    value: function _setClothColor(cloth) {\n\t      cloth.select('#' + this.props.gender + '_cloth_base').attr({\n\t        fill: '#333333'\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setEyesSize',\n\t    value: function _setEyesSize(eyes) {\n\t      var size = this.props.genetic.random.integer(6, 10) / 10;\n\t      eyes.select('#right').transform('s' + size);\n\t      eyes.select('#left').transform('s' + size);\n\t    }\n\t  }, {\n\t    key: '_setAsianEyes',\n\t    value: function _setAsianEyes(eyes) {\n\t      eyes.select('#right').transform('r-60, s0.6');\n\t      eyes.select('#left').transform('r60, s0.6');\n\t    }\n\t  }, {\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var Snap = __webpack_require__(10);\n\t      var canvas = Snap(this.svg);\n\t\n\t      Snap.load(this.props.svg, function (svg) {\n\t        var skin = svg.select('#base');\n\t        _this2._setSkinColor(skin);\n\t\n\t        var eyes = svg.select('#eyes');\n\t        _this2._setEyesColor(eyes);\n\t\n\t        if (_this2.props.genetic.countries.isAsian(_this2.props.country.initials)) {\n\t          _this2._setAsianEyes(eyes);\n\t        } else {\n\t          _this2._setEyesSize(eyes);\n\t        }\n\t\n\t        var hair = null;\n\t        var bald = false;\n\t        var hairs = svg.selectAll('g[id^=\"' + _this2.props.gender + '_hair_\"');\n\t        //10% chance to be bald if male\n\t        if (_this2.props.gender == _this2.props.genetic.genders.MALE && _this2.props.genetic.random.bool(0.1)) {\n\t          bald = true;\n\t        }\n\t\n\t        if (!bald) {\n\t          hair = svg.select('#' + _this2.props.gender + '_hair_' + _this2.props.genetic.random.integer(1, hairs.length));\n\t        }\n\t\n\t        if (hair !== null) {\n\t          _this2._setHairColor(hair);\n\t        }\n\t\n\t        var cloth = svg.select('#' + _this2.props.gender + '_cloth_1');\n\t        _this2._setClothColor(cloth);\n\t\n\t        var mouths = svg.selectAll('g[id^=\"mouth_\"');\n\t\n\t        var scale = _this2.props.size / 250;\n\t\n\t        canvas.append(svg.selectAll('filter'));\n\t        canvas.append(skin.transform('s' + scale));\n\t        canvas.append(cloth.transform('s' + scale));\n\t        canvas.append(eyes.transform('s' + scale));\n\t        canvas.append(svg.select('#mouth_' + _this2.props.genetic.random.integer(1, mouths.length)).transform('s' + scale));\n\t        if (hair !== null) {\n\t          canvas.append(hair.transform('s' + scale));\n\t        }\n\t\n\t        if (_this2.props.gender == _this2.props.genetic.genders.MALE) {\n\t          var allEyebrows = svg.selectAll('g[id^=\"eyebrows_\"');\n\t          var eyebrows = svg.select('#eyebrows_' + _this2.props.genetic.random.integer(1, allEyebrows.length));\n\t          _this2._setEyebrowsColor(eyebrows);\n\t          canvas.append(eyebrows.transform('s' + scale));\n\t        }\n\t\n\t        //50% chance to have a bear if male\n\t        if (_this2.props.gender == _this2.props.genetic.genders.MALE && _this2.props.genetic.random.bool(0.5)) {\n\t          var beards = svg.selectAll('g[id^=\"beard_\"');\n\t          var beard = svg.select('#beard_' + _this2.props.genetic.random.integer(1, beards.length));\n\t          _this2._setBeardColor(beard);\n\t          canvas.append(beard.transform('s' + scale));\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      return _react2.default.createElement('svg', { style: this.style, ref: function ref(svg) {\n\t          return _this3.svg = svg;\n\t        }, width: this.props.size, height: this.props.size });\n\t    }\n\t  }]);\n\t\n\t  return Avatar;\n\t}(_react.Component);\n\n\texports.default = Avatar;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  skin: [\n\t  //light\n\t  '#ffe5c8', '#ffdabe', '#ffceb4', '#ffc3aa', '#f0b8a0',\n\t  //medium\n\t  '#e1ac96', '#d2a18c', '#c39582', '#b48a78', '#a57e6e',\n\t  //dark\n\t  '#967264', '#87675a', '#785c50', '#695046', '#5a453c'],\n\t  eyes: ['#222222' /*black*/, '#663300' /*brown*/, '#4da6ff' /*blue*/, '#00b259' /*green*/],\n\t  hair: ['#222222' /*black*/, '#663300' /*brown*/, '#d9a300' /*blonde*/, '#ff5c26' /*orange*/]\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Countries = function () {\n\t  function Countries() {\n\t    _classCallCheck(this, Countries);\n\t\n\t    this.ethnicity = {\n\t      LIGHT: 'LIGHT',\n\t      MEDIUM: 'MEDIUM',\n\t      DARK: 'DARK',\n\t      ALL: 'ALL'\n\t    };\n\t\n\t    this.all = [{\n\t      initials: 'ARG',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }, {\n\t      initials: 'BRA',\n\t      ethnicity: this.ethnicity.ALL\n\t    }, {\n\t      initials: 'CHN',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }, {\n\t      initials: 'JPN',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }, {\n\t      initials: 'USA',\n\t      ethnicity: this.ethnicity.ALL\n\t    }, {\n\t      initials: 'RUS',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }];\n\t\n\t    this.asianCountries = ['CHN', 'JPN'];\n\t  }\n\t\n\t  _createClass(Countries, [{\n\t    key: 'isAsian',\n\t    value: function isAsian(country) {\n\t      return this.asianCountries.indexOf(country) !== -1;\n\t    }\n\t  }]);\n\t\n\t  return Countries;\n\t}();\n\n\texports.default = Countries;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _randomJs = __webpack_require__(11);\n\t\n\tvar _randomJs2 = _interopRequireDefault(_randomJs);\n\t\n\tvar _Countries = __webpack_require__(4);\n\t\n\tvar _Countries2 = _interopRequireDefault(_Countries);\n\t\n\tvar _Colors = __webpack_require__(3);\n\t\n\tvar _Colors2 = _interopRequireDefault(_Colors);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Genetic = function () {\n\t  function Genetic(options) {\n\t    _classCallCheck(this, Genetic);\n\t\n\t    this.options = options;\n\t    this.engine = _randomJs2.default.engines.mt19937().seed(this.options.seed);\n\t    this.random = new _randomJs2.default(this.engine);\n\t    this.colors = _Colors2.default;\n\t    this.countries = new _Countries2.default();\n\t    this.genders = { MALE: 'M', FEMALE: 'F' };\n\t    this.hand = { LEFT: 'LEFT', RIGHT: 'RIGHT', TWO: 'TWO' };\n\t  }\n\t\n\t  _createClass(Genetic, [{\n\t    key: '_choose',\n\t    value: function _choose(arr) {\n\t      var start = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t      var end = arguments.length <= 2 || arguments[2] === undefined ? arr.length - 1 : arguments[2];\n\t\n\t      if (arr.length > end && arr.length > start && start > -1 && end > -1) {\n\t        return arr[this.random.integer(start, end)];\n\t      }\n\t\n\t      return arr[this.random.integer(0, arr.length - 1)];\n\t    }\n\t  }, {\n\t    key: '_getEthnicity',\n\t    value: function _getEthnicity(skinColor) {\n\t      if (this.colors.skin.indexOf(skinColor) > 4 && this.colors.skin.indexOf(skinColor) < 10) {\n\t        return this.countries.ethnicity.MEDIUM;\n\t      }\n\t\n\t      if (this.colors.skin.indexOf(skinColor) > 9) {\n\t        return this.countries.ethnicity.DARK;\n\t      }\n\t\n\t      return this.countries.ethnicity.LIGHT;\n\t    }\n\t  }, {\n\t    key: 'age',\n\t    value: function age() {\n\t      if (this.options.age) {\n\t        return this.options.age;\n\t      }\n\t\n\t      var minAge = this.options.minAge || 15;\n\t      var maxAge = this.options.maxAge || 70;\n\t      return this.random.integer(minAge, maxAge);\n\t    }\n\t  }, {\n\t    key: 'handed',\n\t    value: function handed() {\n\t      if (this.options.handed) {\n\t        return this.options.handed;\n\t      }\n\t\n\t      return this._choose([this.hand.LEFT, this.hand.RIGHT, this.hand.TWO]);\n\t    }\n\t  }, {\n\t    key: 'gender',\n\t    value: function gender() {\n\t      if (this.options.gender) {\n\t        return this.options.gender;\n\t      }\n\t\n\t      return this.random.bool() ? this.genders.MALE : this.genders.FEMALE;\n\t    }\n\t  }, {\n\t    key: 'country',\n\t    value: function country() {\n\t      var _this = this;\n\t\n\t      var country = this._choose(this.countries.all);\n\t\n\t      if (this.options.country) {\n\t        this.countries.all.forEach(function (c) {\n\t          if (c.initials === _this.options.country) {\n\t            country = c;\n\t            return;\n\t          }\n\t        });\n\t      }\n\t\n\t      return country;\n\t    }\n\t  }, {\n\t    key: 'skinColor',\n\t    value: function skinColor(country) {\n\t      switch (country.ethnicity) {\n\t        case this.countries.ethnicity.LIGHT:\n\t          return this._choose(this.colors.skin, 0, 4);\n\t        case this.countries.ethnicity.MEDIUM:\n\t          return this._choose(this.colors.skin, 5, 9);\n\t        case this.countries.ethnicity.DARK:\n\t          return this._choose(this.colors.skin, 10, 14);\n\t        default:\n\t          return this._choose(this.colors.skin);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'eyesColor',\n\t    value: function eyesColor(country, skinColor) {\n\t      var ethnicity = country.ethnicity;\n\t      if (country.ethnicity == this.countries.ethnicity.ALL) {\n\t        ethnicity = this._getEthnicity(skinColor);\n\t      }\n\t\n\t      if (ethnicity == this.countries.ethnicity.DARK || ethnicity == this.countries.ethnicity.MEDIUM || this.countries.isAsian(country.initials)) {\n\t        return this.colors.eyes[0];\n\t      }\n\t\n\t      return this._choose(this.colors.eyes);\n\t    }\n\t  }, {\n\t    key: 'hairColor',\n\t    value: function hairColor(country, skinColor) {\n\t      var ethnicity = country.ethnicity;\n\t      if (country.ethnicity == this.countries.ethnicity.ALL) {\n\t        ethnicity = this._getEthnicity(skinColor);\n\t      }\n\t\n\t      if (ethnicity == this.countries.ethnicity.DARK || this.countries.isAsian(country.initials)) {\n\t        return this.colors.hair[0];\n\t      }\n\t\n\t      //5% chance to be a ginger\n\t      if (ethnicity == this.countries.ethnicity.LIGHT && this.random.bool(0.05)) {\n\t        return this.colors.hair[this.colors.hair.length - 1];\n\t      }\n\t\n\t      if (ethnicity == this.countries.ethnicity.LIGHT) {\n\t        return this._choose(this.colors.hair, 0, this.colors.hair.length - 2);\n\t      }\n\t\n\t      return this._choose(this.colors.hair, 0, this.colors.hair.length - 3);\n\t    }\n\t  }]);\n\t\n\t  return Genetic;\n\t}();\n\n\texports.default = Genetic;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Person = function () {\n\t  function Person(infos) {\n\t    _classCallCheck(this, Person);\n\t\n\t    this.infos = infos;\n\t  }\n\t\n\t  _createClass(Person, [{\n\t    key: \"name\",\n\t    value: function name() {\n\t      return this.infos.firstName + \" \" + this.infos.lastName;\n\t    }\n\t  }]);\n\t\n\t  return Person;\n\t}();\n\n\texports.default = Person;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Person = __webpack_require__(6);\n\t\n\tvar _Person2 = _interopRequireDefault(_Person);\n\t\n\tvar _Genetic = __webpack_require__(5);\n\t\n\tvar _Genetic2 = _interopRequireDefault(_Genetic);\n\t\n\tvar _Avatar = __webpack_require__(2);\n\t\n\tvar _Avatar2 = _interopRequireDefault(_Avatar);\n\t\n\tvar _avatar = __webpack_require__(9);\n\t\n\tvar _avatar2 = _interopRequireDefault(_avatar);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar PersonGenerator = function () {\n\t  function PersonGenerator(avatarOptions) {\n\t    _classCallCheck(this, PersonGenerator);\n\t\n\t    if (!avatarOptions.svg) {\n\t      avatarOptions.svg = _avatar2.default;\n\t    }\n\t\n\t    if (!avatarOptions.size) {\n\t      avatarOptions.size = 250;\n\t    }\n\t\n\t    if (!avatarOptions.bgColor) {\n\t      avatarOptions.bgColor = '#f1f1f1';\n\t    }\n\t\n\t    this.avatarOptions = avatarOptions;\n\t  }\n\t\n\t  _createClass(PersonGenerator, [{\n\t    key: '_generateOptions',\n\t    value: function _generateOptions(options) {\n\t      var min = 1;\n\t      var max = 1000000;\n\t      var genetic = options ? new _Genetic2.default(options) : new _Genetic2.default({ seed: Math.floor(Math.random() * (max - min)) + min });\n\t\n\t      var age = genetic.age();\n\t      var gender = genetic.gender();\n\t      var country = genetic.country();\n\t      var handed = genetic.handed();\n\t\n\t      return { genetic: genetic, age: age, gender: gender, country: country, handed: handed };\n\t    }\n\t  }, {\n\t    key: 'make',\n\t    value: function make(options) {\n\t      var opts = options ? this._generateOptions(options) : this._generateOptions();\n\t\n\t      return new _Person2.default({\n\t        firstName: 'First',\n\t        lastName: 'Last',\n\t        age: opts.age,\n\t        country: opts.country.initials,\n\t        gender: opts.gender,\n\t        handed: opts.handed,\n\t        avatar: opts.avatar || this.makeAvatar(opts)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'makeAvatar',\n\t    value: function makeAvatar(options) {\n\t      var opts = {};\n\t\n\t      if (!options) {\n\t        opts = this._generateOptions();\n\t      } else {\n\t        if (!options.genetic) {\n\t          opts = this._generateOptions(options);\n\t        } else {\n\t          opts = options;\n\t        }\n\t      }\n\t\n\t      return _react2.default.createElement(_Avatar2.default, _extends({}, this.avatarOptions, opts));\n\t    }\n\t  }]);\n\t\n\t  return PersonGenerator;\n\t}();\n\n\texports.default = PersonGenerator;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _PersonGenerator = __webpack_require__(7);\n\n\tvar _PersonGenerator2 = _interopRequireDefault(_PersonGenerator);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = _PersonGenerator2.default;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"e6ac5e26bca83e1acbec2359c02c80ef.svg\";\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\tvar fix = module.exports=0;\n\t\n\t// Snap.svg 0.4.0\n\t// \n\t// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// \n\t// build: 2015-04-07\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\t\n\t(function (glob) {\n\t    var version = \"0.4.2\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\t\n\t     * Fires event with given `name`, given scope and other parameters.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\t\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            name = String(name);\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\t\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\t\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    \n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        name = String(name);\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = name.split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = name.split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n\t        }\n\t        return current_event;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = name.split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = name.split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.unbind(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))) : (glob.eve = eve));\n\t})(this);\n\t\n\t(function (glob, factory) {\n\t    // AMD support\n\t    if (true) {\n\t        // Define as an anonymous module\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n\t            return factory(glob, eve);\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports != 'undefined') {\n\t        // Next for Node.js or CommonJS\n\t        var eve = require('eve');\n\t        module.exports = factory(glob, eve);\n\t    } else {\n\t        // Browser globals (glob is window)\n\t        // Snap adds itself to window\n\t        factory(glob, glob.eve);\n\t    }\n\t}(window || this, function (window, eve) {\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tvar mina = (function (eve) {\n\t    var animations = {},\n\t    requestAnimFrame = window.requestAnimationFrame       ||\n\t                       window.webkitRequestAnimationFrame ||\n\t                       window.mozRequestAnimationFrame    ||\n\t                       window.oRequestAnimationFrame      ||\n\t                       window.msRequestAnimationFrame     ||\n\t                       function (callback) {\n\t                           setTimeout(callback, 16);\n\t                       },\n\t    isArray = Array.isArray || function (a) {\n\t        return a instanceof Array ||\n\t            Object.prototype.toString.call(a) == \"[object Array]\";\n\t    },\n\t    idgen = 0,\n\t    idprefix = \"M\" + (+new Date).toString(36),\n\t    ID = function () {\n\t        return idprefix + (idgen++).toString(36);\n\t    },\n\t    diff = function (a, b, A, B) {\n\t        if (isArray(a)) {\n\t            res = [];\n\t            for (var i = 0, ii = a.length; i < ii; i++) {\n\t                res[i] = diff(a[i], b, A[i], B);\n\t            }\n\t            return res;\n\t        }\n\t        var dif = (A - a) / (B - b);\n\t        return function (bb) {\n\t            return a + dif * (bb - b);\n\t        };\n\t    },\n\t    timer = Date.now || function () {\n\t        return +new Date;\n\t    },\n\t    sta = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.s;\n\t        }\n\t        var ds = a.s - val;\n\t        a.b += a.dur * ds;\n\t        a.B += a.dur * ds;\n\t        a.s = val;\n\t    },\n\t    speed = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.spd;\n\t        }\n\t        a.spd = val;\n\t    },\n\t    duration = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.dur;\n\t        }\n\t        a.s = a.s * val / a.dur;\n\t        a.dur = val;\n\t    },\n\t    stopit = function () {\n\t        var a = this;\n\t        delete animations[a.id];\n\t        a.update();\n\t        eve(\"mina.stop.\" + a.id, a);\n\t    },\n\t    pause = function () {\n\t        var a = this;\n\t        if (a.pdif) {\n\t            return;\n\t        }\n\t        delete animations[a.id];\n\t        a.update();\n\t        a.pdif = a.get() - a.b;\n\t    },\n\t    resume = function () {\n\t        var a = this;\n\t        if (!a.pdif) {\n\t            return;\n\t        }\n\t        a.b = a.get() - a.pdif;\n\t        delete a.pdif;\n\t        animations[a.id] = a;\n\t    },\n\t    update = function () {\n\t        var a = this,\n\t            res;\n\t        if (isArray(a.start)) {\n\t            res = [];\n\t            for (var j = 0, jj = a.start.length; j < jj; j++) {\n\t                res[j] = +a.start[j] +\n\t                    (a.end[j] - a.start[j]) * a.easing(a.s);\n\t            }\n\t        } else {\n\t            res = +a.start + (a.end - a.start) * a.easing(a.s);\n\t        }\n\t        a.set(res);\n\t    },\n\t    frame = function () {\n\t        var len = 0;\n\t        for (var i in animations) if (animations.hasOwnProperty(i)) {\n\t            var a = animations[i],\n\t                b = a.get(),\n\t                res;\n\t            len++;\n\t            a.s = (b - a.b) / (a.dur / a.spd);\n\t            if (a.s >= 1) {\n\t                delete animations[i];\n\t                a.s = 1;\n\t                len--;\n\t                (function (a) {\n\t                    setTimeout(function () {\n\t                        eve(\"mina.finish.\" + a.id, a);\n\t                    });\n\t                }(a));\n\t            }\n\t            a.update();\n\t        }\n\t        len && requestAnimFrame(frame);\n\t    },\n\t    /*\\\n\t     * mina\n\t     [ method ]\n\t     **\n\t     * Generic animation of numbers\n\t     **\n\t     - a (number) start _slave_ number\n\t     - A (number) end _slave_ number\n\t     - b (number) start _master_ number (start time in general case)\n\t     - B (number) end _master_ number (end time in gereal case)\n\t     - get (function) getter of _master_ number (see @mina.time)\n\t     - set (function) setter of _slave_ number\n\t     - easing (function) #optional easing function, default is @mina.linear\n\t     = (object) animation descriptor\n\t     o {\n\t     o         id (string) animation id,\n\t     o         start (number) start _slave_ number,\n\t     o         end (number) end _slave_ number,\n\t     o         b (number) start _master_ number,\n\t     o         s (number) animation status (0..1),\n\t     o         dur (number) animation duration,\n\t     o         spd (number) animation speed,\n\t     o         get (function) getter of _master_ number (see @mina.time),\n\t     o         set (function) setter of _slave_ number,\n\t     o         easing (function) easing function, default is @mina.linear,\n\t     o         status (function) status getter/setter,\n\t     o         speed (function) speed getter/setter,\n\t     o         duration (function) duration getter/setter,\n\t     o         stop (function) animation stopper\n\t     o         pause (function) pauses the animation\n\t     o         resume (function) resumes the animation\n\t     o         update (function) calles setter with the right value of the animation\n\t     o }\n\t    \\*/\n\t    mina = function (a, A, b, B, get, set, easing) {\n\t        var anim = {\n\t            id: ID(),\n\t            start: a,\n\t            end: A,\n\t            b: b,\n\t            s: 0,\n\t            dur: B - b,\n\t            spd: 1,\n\t            get: get,\n\t            set: set,\n\t            easing: easing || mina.linear,\n\t            status: sta,\n\t            speed: speed,\n\t            duration: duration,\n\t            stop: stopit,\n\t            pause: pause,\n\t            resume: resume,\n\t            update: update\n\t        };\n\t        animations[anim.id] = anim;\n\t        var len = 0, i;\n\t        for (i in animations) if (animations.hasOwnProperty(i)) {\n\t            len++;\n\t            if (len == 2) {\n\t                break;\n\t            }\n\t        }\n\t        len == 1 && requestAnimFrame(frame);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * mina.time\n\t     [ method ]\n\t     **\n\t     * Returns the current time. Equivalent to:\n\t     | function () {\n\t     |     return (new Date).getTime();\n\t     | }\n\t    \\*/\n\t    mina.time = timer;\n\t    /*\\\n\t     * mina.getById\n\t     [ method ]\n\t     **\n\t     * Returns an animation by its id\n\t     - id (string) animation's id\n\t     = (object) See @mina\n\t    \\*/\n\t    mina.getById = function (id) {\n\t        return animations[id] || null;\n\t    };\n\t\n\t    /*\\\n\t     * mina.linear\n\t     [ method ]\n\t     **\n\t     * Default linear easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.linear = function (n) {\n\t        return n;\n\t    };\n\t    /*\\\n\t     * mina.easeout\n\t     [ method ]\n\t     **\n\t     * Easeout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeout = function (n) {\n\t        return Math.pow(n, 1.7);\n\t    };\n\t    /*\\\n\t     * mina.easein\n\t     [ method ]\n\t     **\n\t     * Easein easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easein = function (n) {\n\t        return Math.pow(n, .48);\n\t    };\n\t    /*\\\n\t     * mina.easeinout\n\t     [ method ]\n\t     **\n\t     * Easeinout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeinout = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        var q = .48 - n / 1.04,\n\t            Q = Math.sqrt(.1734 + q * q),\n\t            x = Q - q,\n\t            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t            y = -Q - q,\n\t            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t            t = X + Y + .5;\n\t        return (1 - t) * 3 * t * t + t * t * t;\n\t    };\n\t    /*\\\n\t     * mina.backin\n\t     [ method ]\n\t     **\n\t     * Backin easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backin = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n - s);\n\t    };\n\t    /*\\\n\t     * mina.backout\n\t     [ method ]\n\t     **\n\t     * Backout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backout = function (n) {\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        n = n - 1;\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n + s) + 1;\n\t    };\n\t    /*\\\n\t     * mina.elastic\n\t     [ method ]\n\t     **\n\t     * Elastic easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.elastic = function (n) {\n\t        if (n == !!n) {\n\t            return n;\n\t        }\n\t        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n\t            (2 * Math.PI) / .3) + 1;\n\t    };\n\t    /*\\\n\t     * mina.bounce\n\t     [ method ]\n\t     **\n\t     * Bounce easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.bounce = function (n) {\n\t        var s = 7.5625,\n\t            p = 2.75,\n\t            l;\n\t        if (n < (1 / p)) {\n\t            l = s * n * n;\n\t        } else {\n\t            if (n < (2 / p)) {\n\t                n -= (1.5 / p);\n\t                l = s * n * n + .75;\n\t            } else {\n\t                if (n < (2.5 / p)) {\n\t                    n -= (2.25 / p);\n\t                    l = s * n * n + .9375;\n\t                } else {\n\t                    n -= (2.625 / p);\n\t                    l = s * n * n + .984375;\n\t                }\n\t            }\n\t        }\n\t        return l;\n\t    };\n\t    window.mina = mina;\n\t    return mina;\n\t})(typeof eve == \"undefined\" ? function () {} : eve);\n\t// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t\n\tvar Snap = (function(root) {\n\tSnap.version = \"0.4.0\";\n\t/*\\\n\t * Snap\n\t [ method ]\n\t **\n\t * Creates a drawing surface or wraps existing SVG element.\n\t **\n\t - width (number|string) width of surface\n\t - height (number|string) height of surface\n\t * or\n\t - DOM (SVGElement) element to be wrapped into Snap structure\n\t * or\n\t - array (array) array of elements (will return set of elements)\n\t * or\n\t - query (string) CSS query selector\n\t = (object) @Element\n\t\\*/\n\tfunction Snap(w, h) {\n\t    if (w) {\n\t        if (w.nodeType) {\n\t            return wrap(w);\n\t        }\n\t        if (is(w, \"array\") && Snap.set) {\n\t            return Snap.set.apply(Snap, w);\n\t        }\n\t        if (w instanceof Element) {\n\t            return w;\n\t        }\n\t        if (h == null) {\n\t            w = glob.doc.querySelector(String(w));\n\t            return wrap(w);\n\t        }\n\t    }\n\t    w = w == null ? \"100%\" : w;\n\t    h = h == null ? \"100%\" : h;\n\t    return new Paper(w, h);\n\t}\n\tSnap.toString = function () {\n\t    return \"Snap v\" + this.version;\n\t};\n\tSnap._ = {};\n\tvar glob = {\n\t    win: root.window,\n\t    doc: root.window.document\n\t};\n\tSnap._.glob = glob;\n\tvar has = \"hasOwnProperty\",\n\t    Str = String,\n\t    toFloat = parseFloat,\n\t    toInt = parseInt,\n\t    math = Math,\n\t    mmax = math.max,\n\t    mmin = math.min,\n\t    abs = math.abs,\n\t    pow = math.pow,\n\t    PI = math.PI,\n\t    round = math.round,\n\t    E = \"\",\n\t    S = \" \",\n\t    objectToString = Object.prototype.toString,\n\t    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n\t    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n\t    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t    reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t    separator = Snap._.separator = /[,\\s]+/,\n\t    whitespace = /[\\s]/g,\n\t    commaSpaces = /[\\s]*,[\\s]*/,\n\t    hsrg = {hs: 1, rg: 1},\n\t    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n\t    idgen = 0,\n\t    idprefix = \"S\" + (+new Date).toString(36),\n\t    ID = function (el) {\n\t        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n\t    },\n\t    xlink = \"http://www.w3.org/1999/xlink\",\n\t    xmlns = \"http://www.w3.org/2000/svg\",\n\t    hub = {},\n\t    URL = Snap.url = function (url) {\n\t        return \"url('#\" + url + \"')\";\n\t    };\n\t\n\tfunction $(el, attr) {\n\t    if (attr) {\n\t        if (el == \"#text\") {\n\t            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (el == \"#comment\") {\n\t            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (typeof el == \"string\") {\n\t            el = $(el);\n\t        }\n\t        if (typeof attr == \"string\") {\n\t            if (el.nodeType == 1) {\n\t                if (attr.substring(0, 6) == \"xlink:\") {\n\t                    return el.getAttributeNS(xlink, attr.substring(6));\n\t                }\n\t                if (attr.substring(0, 4) == \"xml:\") {\n\t                    return el.getAttributeNS(xmlns, attr.substring(4));\n\t                }\n\t                return el.getAttribute(attr);\n\t            } else if (attr == \"text\") {\n\t                return el.nodeValue;\n\t            } else {\n\t                return null;\n\t            }\n\t        }\n\t        if (el.nodeType == 1) {\n\t            for (var key in attr) if (attr[has](key)) {\n\t                var val = Str(attr[key]);\n\t                if (val) {\n\t                    if (key.substring(0, 6) == \"xlink:\") {\n\t                        el.setAttributeNS(xlink, key.substring(6), val);\n\t                    } else if (key.substring(0, 4) == \"xml:\") {\n\t                        el.setAttributeNS(xmlns, key.substring(4), val);\n\t                    } else {\n\t                        el.setAttribute(key, val);\n\t                    }\n\t                } else {\n\t                    el.removeAttribute(key);\n\t                }\n\t            }\n\t        } else if (\"text\" in attr) {\n\t            el.nodeValue = attr.text;\n\t        }\n\t    } else {\n\t        el = glob.doc.createElementNS(xmlns, el);\n\t    }\n\t    return el;\n\t}\n\tSnap._.$ = $;\n\tSnap._.id = ID;\n\tfunction getAttrs(el) {\n\t    var attrs = el.attributes,\n\t        name,\n\t        out = {};\n\t    for (var i = 0; i < attrs.length; i++) {\n\t        if (attrs[i].namespaceURI == xlink) {\n\t            name = \"xlink:\";\n\t        } else {\n\t            name = \"\";\n\t        }\n\t        name += attrs[i].name;\n\t        out[name] = attrs[i].textContent;\n\t    }\n\t    return out;\n\t}\n\tfunction is(o, type) {\n\t    type = Str.prototype.toLowerCase.call(type);\n\t    if (type == \"finite\") {\n\t        return isFinite(o);\n\t    }\n\t    if (type == \"array\" &&\n\t        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n\t        return true;\n\t    }\n\t    return  (type == \"null\" && o === null) ||\n\t            (type == typeof o && o !== null) ||\n\t            (type == \"object\" && o === Object(o)) ||\n\t            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t}\n\t/*\\\n\t * Snap.format\n\t [ method ]\n\t **\n\t * Replaces construction of type `{<name>}` to the corresponding argument\n\t **\n\t - token (string) string to format\n\t - json (object) object which properties are used as a replacement\n\t = (string) formatted string\n\t > Usage\n\t | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t |     x: 10,\n\t |     y: 20,\n\t |     dim: {\n\t |         width: 40,\n\t |         height: 50,\n\t |         \"negative width\": -40\n\t |     }\n\t | }));\n\t\\*/\n\tSnap.format = (function () {\n\t    var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t        replacer = function (all, key, obj) {\n\t            var res = obj;\n\t            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                name = name || quotedName;\n\t                if (res) {\n\t                    if (name in res) {\n\t                        res = res[name];\n\t                    }\n\t                    typeof res == \"function\" && isFunc && (res = res());\n\t                }\n\t            });\n\t            res = (res == null || res == obj ? all : res) + \"\";\n\t            return res;\n\t        };\n\t    return function (str, obj) {\n\t        return Str(str).replace(tokenRegex, function (all, key) {\n\t            return replacer(all, key, obj);\n\t        });\n\t    };\n\t})();\n\tfunction clone(obj) {\n\t    if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t        return obj;\n\t    }\n\t    var res = new obj.constructor;\n\t    for (var key in obj) if (obj[has](key)) {\n\t        res[key] = clone(obj[key]);\n\t    }\n\t    return res;\n\t}\n\tSnap._.clone = clone;\n\tfunction repush(array, item) {\n\t    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t        return array.push(array.splice(i, 1)[0]);\n\t    }\n\t}\n\tfunction cacher(f, scope, postprocessor) {\n\t    function newf() {\n\t        var arg = Array.prototype.slice.call(arguments, 0),\n\t            args = arg.join(\"\\u2400\"),\n\t            cache = newf.cache = newf.cache || {},\n\t            count = newf.count = newf.count || [];\n\t        if (cache[has](args)) {\n\t            repush(count, args);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        count.length >= 1e3 && delete cache[count.shift()];\n\t        count.push(args);\n\t        cache[args] = f.apply(scope, arg);\n\t        return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t    }\n\t    return newf;\n\t}\n\tSnap._.cacher = cacher;\n\tfunction angle(x1, y1, x2, y2, x3, y3) {\n\t    if (x3 == null) {\n\t        var x = x1 - x2,\n\t            y = y1 - y2;\n\t        if (!x && !y) {\n\t            return 0;\n\t        }\n\t        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t    } else {\n\t        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n\t    }\n\t}\n\tfunction rad(deg) {\n\t    return deg % 360 * PI / 180;\n\t}\n\tfunction deg(rad) {\n\t    return rad * 180 / PI % 360;\n\t}\n\tfunction x_y() {\n\t    return this.x + S + this.y;\n\t}\n\tfunction x_y_w_h() {\n\t    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t}\n\t\n\t/*\\\n\t * Snap.rad\n\t [ method ]\n\t **\n\t * Transform angle to radians\n\t - deg (number) angle in degrees\n\t = (number) angle in radians\n\t\\*/\n\tSnap.rad = rad;\n\t/*\\\n\t * Snap.deg\n\t [ method ]\n\t **\n\t * Transform angle to degrees\n\t - rad (number) angle in radians\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.deg = deg;\n\t/*\\\n\t * Snap.sin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.sin()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) sin\n\t\\*/\n\tSnap.sin = function (angle) {\n\t    return math.sin(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.tan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.tan()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) tan\n\t\\*/\n\tSnap.tan = function (angle) {\n\t    return math.tan(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.cos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.cos()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) cos\n\t\\*/\n\tSnap.cos = function (angle) {\n\t    return math.cos(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.asin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.asin()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) asin in degrees\n\t\\*/\n\tSnap.asin = function (num) {\n\t    return Snap.deg(math.asin(num));\n\t};\n\t/*\\\n\t * Snap.acos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.acos()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) acos in degrees\n\t\\*/\n\tSnap.acos = function (num) {\n\t    return Snap.deg(math.acos(num));\n\t};\n\t/*\\\n\t * Snap.atan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan in degrees\n\t\\*/\n\tSnap.atan = function (num) {\n\t    return Snap.deg(math.atan(num));\n\t};\n\t/*\\\n\t * Snap.atan2\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan2()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan2 in degrees\n\t\\*/\n\tSnap.atan2 = function (num) {\n\t    return Snap.deg(math.atan2(num));\n\t};\n\t/*\\\n\t * Snap.angle\n\t [ method ]\n\t **\n\t * Returns an angle between two or three points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t - x3 (number) #optional x coord of third point\n\t - y3 (number) #optional y coord of third point\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.angle = angle;\n\t/*\\\n\t * Snap.len\n\t [ method ]\n\t **\n\t * Returns distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len = function (x1, y1, x2, y2) {\n\t    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n\t};\n\t/*\\\n\t * Snap.len2\n\t [ method ]\n\t **\n\t * Returns squared distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len2 = function (x1, y1, x2, y2) {\n\t    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t};\n\t/*\\\n\t * Snap.closestPoint\n\t [ method ]\n\t **\n\t * Returns closest point to a given one on a given path.\n\t > Parameters\n\t - path (Element) path element\n\t - x (number) x coord of a point\n\t - y (number) y coord of a point\n\t = (object) in format\n\t {\n\t    x (number) x coord of the point on the path\n\t    y (number) y coord of the point on the path\n\t    length (number) length of the path to the point\n\t    distance (number) distance from the given point to the path\n\t }\n\t\\*/\n\t// Copied from http://bl.ocks.org/mbostock/8027637\n\tSnap.closestPoint = function (path, x, y) {\n\t    function distance2(p) {\n\t        var dx = p.x - x,\n\t            dy = p.y - y;\n\t        return dx * dx + dy * dy;\n\t    }\n\t    var pathNode = path.node,\n\t        pathLength = pathNode.getTotalLength(),\n\t        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n\t        best,\n\t        bestLength,\n\t        bestDistance = Infinity;\n\t\n\t    // linear scan for coarse approximation\n\t    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n\t        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n\t            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n\t        }\n\t    }\n\t\n\t    // binary search for precise estimate\n\t    precision *= .5;\n\t    while (precision > .5) {\n\t        var before,\n\t            after,\n\t            beforeLength,\n\t            afterLength,\n\t            beforeDistance,\n\t            afterDistance;\n\t        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n\t            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n\t        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n\t            best = after, bestLength = afterLength, bestDistance = afterDistance;\n\t        } else {\n\t            precision *= .5;\n\t        }\n\t    }\n\t\n\t    best = {\n\t        x: best.x,\n\t        y: best.y,\n\t        length: bestLength,\n\t        distance: Math.sqrt(bestDistance)\n\t    };\n\t    return best;\n\t}\n\t/*\\\n\t * Snap.is\n\t [ method ]\n\t **\n\t * Handy replacement for the `typeof` operator\n\t - o (…) any object or primitive\n\t - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n\t = (boolean) `true` if given value is of given type\n\t\\*/\n\tSnap.is = is;\n\t/*\\\n\t * Snap.snapTo\n\t [ method ]\n\t **\n\t * Snaps given value to given grid\n\t - values (array|number) given array of values or step of the grid\n\t - value (number) value to adjust\n\t - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n\t = (number) adjusted value\n\t\\*/\n\tSnap.snapTo = function (values, value, tolerance) {\n\t    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\t    if (is(values, \"array\")) {\n\t        var i = values.length;\n\t        while (i--) if (abs(values[i] - value) <= tolerance) {\n\t            return values[i];\n\t        }\n\t    } else {\n\t        values = +values;\n\t        var rem = value % values;\n\t        if (rem < tolerance) {\n\t            return value - rem;\n\t        }\n\t        if (rem > values - tolerance) {\n\t            return value - rem + values;\n\t        }\n\t    }\n\t    return value;\n\t};\n\t// Colour\n\t/*\\\n\t * Snap.getRGB\n\t [ method ]\n\t **\n\t * Parses color string as RGB object\n\t - color (string) color string in one of the following formats:\n\t # <ul>\n\t #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n\t #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n\t #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n\t #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n\t #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n\t #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n\t #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n\t #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t # </ul>\n\t * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) true if string can't be parsed\n\t o }\n\t\\*/\n\tSnap.getRGB = cacher(function (colour) {\n\t    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    if (colour == \"none\") {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n\t    }\n\t    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t    if (!colour) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    var res,\n\t        red,\n\t        green,\n\t        blue,\n\t        opacity,\n\t        t,\n\t        values,\n\t        rgb = colour.match(colourRegExp);\n\t    if (rgb) {\n\t        if (rgb[2]) {\n\t            blue = toInt(rgb[2].substring(5), 16);\n\t            green = toInt(rgb[2].substring(3, 5), 16);\n\t            red = toInt(rgb[2].substring(1, 3), 16);\n\t        }\n\t        if (rgb[3]) {\n\t            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t        }\n\t        if (rgb[4]) {\n\t            values = rgb[4].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t        }\n\t        if (rgb[5]) {\n\t            values = rgb[5].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsb2rgb(red, green, blue, opacity);\n\t        }\n\t        if (rgb[6]) {\n\t            values = rgb[6].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsl2rgb(red, green, blue, opacity);\n\t        }\n\t        red = mmin(math.round(red), 255);\n\t        green = mmin(math.round(green), 255);\n\t        blue = mmin(math.round(blue), 255);\n\t        opacity = mmin(mmax(opacity, 0), 1);\n\t        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n\t        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n\t        return rgb;\n\t    }\n\t    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t}, Snap);\n\t/*\\\n\t * Snap.hsb\n\t [ method ]\n\t **\n\t * Converts HSB values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - b (number) value or brightness\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsb = cacher(function (h, s, b) {\n\t    return Snap.hsb2rgb(h, s, b).hex;\n\t});\n\t/*\\\n\t * Snap.hsl\n\t [ method ]\n\t **\n\t * Converts HSL values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsl = cacher(function (h, s, l) {\n\t    return Snap.hsl2rgb(h, s, l).hex;\n\t});\n\t/*\\\n\t * Snap.rgb\n\t [ method ]\n\t **\n\t * Converts RGB values to a hex representation of the color\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.rgb = cacher(function (r, g, b, o) {\n\t    if (is(o, \"finite\")) {\n\t        var round = math.round;\n\t        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n\t    }\n\t    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n\t});\n\tvar toHex = function (color) {\n\t    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n\t        red = \"rgb(255, 0, 0)\";\n\t    toHex = cacher(function (color) {\n\t        if (color.toLowerCase() == \"red\") {\n\t            return red;\n\t        }\n\t        i.style.color = red;\n\t        i.style.color = color;\n\t        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t        return out == red ? null : out;\n\t    });\n\t    return toHex(color);\n\t},\n\thsbtoString = function () {\n\t    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t},\n\thsltoString = function () {\n\t    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t},\n\trgbtoString = function () {\n\t    return this.opacity == 1 || this.opacity == null ?\n\t            this.hex :\n\t            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n\t},\n\tprepareRGB = function (r, g, b) {\n\t    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t        b = r.b;\n\t        g = r.g;\n\t        r = r.r;\n\t    }\n\t    if (g == null && is(r, string)) {\n\t        var clr = Snap.getRGB(r);\n\t        r = clr.r;\n\t        g = clr.g;\n\t        b = clr.b;\n\t    }\n\t    if (r > 1 || g > 1 || b > 1) {\n\t        r /= 255;\n\t        g /= 255;\n\t        b /= 255;\n\t    }\n\t    \n\t    return [r, g, b];\n\t},\n\tpackageRGB = function (r, g, b, o) {\n\t    r = math.round(r * 255);\n\t    g = math.round(g * 255);\n\t    b = math.round(b * 255);\n\t    var rgb = {\n\t        r: r,\n\t        g: g,\n\t        b: b,\n\t        opacity: is(o, \"finite\") ? o : 1,\n\t        hex: Snap.rgb(r, g, b),\n\t        toString: rgbtoString\n\t    };\n\t    is(o, \"finite\") && (rgb.opacity = o);\n\t    return rgb;\n\t};\n\t/*\\\n\t * Snap.color\n\t [ method ]\n\t **\n\t * Parses the color string and returns an object featuring the color's component values\n\t - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n\t = (object) Combined RGB/HSB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) `true` if string can't be parsed,\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     v (number) value (brightness),\n\t o     l (number) lightness\n\t o }\n\t\\*/\n\tSnap.color = function (clr) {\n\t    var rgb;\n\t    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t        rgb = Snap.hsb2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t        rgb = Snap.hsl2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else {\n\t        if (is(clr, \"string\")) {\n\t            clr = Snap.getRGB(clr);\n\t        }\n\t        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n\t            rgb = Snap.rgb2hsl(clr);\n\t            clr.h = rgb.h;\n\t            clr.s = rgb.s;\n\t            clr.l = rgb.l;\n\t            rgb = Snap.rgb2hsb(clr);\n\t            clr.v = rgb.b;\n\t        } else {\n\t            clr = {hex: \"none\"};\n\t            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            clr.error = 1;\n\t        }\n\t    }\n\t    clr.toString = rgbtoString;\n\t    return clr;\n\t};\n\t/*\\\n\t * Snap.hsb2rgb\n\t [ method ]\n\t **\n\t * Converts HSB values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - v (number) value or brightness\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsb2rgb = function (h, s, v, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t        v = h.b;\n\t        s = h.s;\n\t        o = h.o;\n\t        h = h.h;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = v * s;\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = v - C;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.hsl2rgb\n\t [ method ]\n\t **\n\t * Converts HSL values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsl2rgb = function (h, s, l, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t        l = h.l;\n\t        s = h.s;\n\t        h = h.h;\n\t    }\n\t    if (h > 1 || s > 1 || l > 1) {\n\t        h /= 360;\n\t        s /= 100;\n\t        l /= 100;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = 2 * s * (l < .5 ? l : 1 - l);\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = l - C / 2;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.rgb2hsb\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSB object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSB object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     b (number) brightness\n\t o }\n\t\\*/\n\tSnap.rgb2hsb = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, V, C;\n\t    V = mmax(r, g, b);\n\t    C = V - mmin(r, g, b);\n\t    H = (C == 0 ? null :\n\t         V == r ? (g - b) / C :\n\t         V == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4\n\t        );\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    S = C == 0 ? 0 : C / V;\n\t    return {h: H, s: S, b: V, toString: hsbtoString};\n\t};\n\t/*\\\n\t * Snap.rgb2hsl\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSL object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSL object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     l (number) luminosity\n\t o }\n\t\\*/\n\tSnap.rgb2hsl = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, L, M, m, C;\n\t    M = mmax(r, g, b);\n\t    m = mmin(r, g, b);\n\t    C = M - m;\n\t    H = (C == 0 ? null :\n\t         M == r ? (g - b) / C :\n\t         M == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4);\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    L = (M + m) / 2;\n\t    S = (C == 0 ? 0 :\n\t         L < .5 ? C / (2 * L) :\n\t                  C / (2 - 2 * L));\n\t    return {h: H, s: S, l: L, toString: hsltoString};\n\t};\n\t\n\t// Transformations\n\t/*\\\n\t * Snap.parsePathString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given path string into an array of arrays of path segments\n\t - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n\t = (array) array of segments\n\t\\*/\n\tSnap.parsePathString = function (pathString) {\n\t    if (!pathString) {\n\t        return null;\n\t    }\n\t    var pth = Snap.path(pathString);\n\t    if (pth.arr) {\n\t        return Snap.path.clone(pth.arr);\n\t    }\n\t    \n\t    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n\t        data = [];\n\t    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(pathString);\n\t    }\n\t    if (!data.length) {\n\t        Str(pathString).replace(pathCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            if (name == \"m\" && params.length > 2) {\n\t                data.push([b].concat(params.splice(0, 2)));\n\t                name = \"l\";\n\t                b = b == \"m\" ? \"l\" : \"L\";\n\t            }\n\t            if (name == \"o\" && params.length == 1) {\n\t                data.push([b, params[0]]);\n\t            }\n\t            if (name == \"r\") {\n\t                data.push([b].concat(params));\n\t            } else while (params.length >= paramCounts[name]) {\n\t                data.push([b].concat(params.splice(0, paramCounts[name])));\n\t                if (!paramCounts[name]) {\n\t                    break;\n\t                }\n\t            }\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    pth.arr = Snap.path.clone(data);\n\t    return data;\n\t};\n\t/*\\\n\t * Snap.parseTransformString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given transform string into an array of transformations\n\t - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n\t = (array) array of transformations\n\t\\*/\n\tvar parseTransformString = Snap.parseTransformString = function (TString) {\n\t    if (!TString) {\n\t        return null;\n\t    }\n\t    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t        data = [];\n\t    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(TString);\n\t    }\n\t    if (!data.length) {\n\t        Str(TString).replace(tCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            data.push([b].concat(params));\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    return data;\n\t};\n\tfunction svgTransform2string(tstr) {\n\t    var res = [];\n\t    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n\t        params = params.split(/\\s*,\\s*|\\s+/);\n\t        if (name == \"rotate\" && params.length == 1) {\n\t            params.push(0, 0);\n\t        }\n\t        if (name == \"scale\") {\n\t            if (params.length > 2) {\n\t                params = params.slice(0, 2);\n\t            } else if (params.length == 2) {\n\t                params.push(0, 0);\n\t            }\n\t            if (params.length == 1) {\n\t                params.push(params[0], 0, 0);\n\t            }\n\t        }\n\t        if (name == \"skewX\") {\n\t            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n\t        } else if (name == \"skewY\") {\n\t            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n\t        } else {\n\t            res.push([name.charAt(0)].concat(params));\n\t        }\n\t        return all;\n\t    });\n\t    return res;\n\t}\n\tSnap._.svgTransform2string = svgTransform2string;\n\tSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\tfunction transform2matrix(tstr, bbox) {\n\t    var tdata = parseTransformString(tstr),\n\t        m = new Snap.Matrix;\n\t    if (tdata) {\n\t        for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t            var t = tdata[i],\n\t                tlen = t.length,\n\t                command = Str(t[0]).toLowerCase(),\n\t                absolute = t[0] != command,\n\t                inver = absolute ? m.invert() : 0,\n\t                x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                bb;\n\t            if (command == \"t\" && tlen == 2){\n\t                m.translate(t[1], 0);\n\t            } else if (command == \"t\" && tlen == 3) {\n\t                if (absolute) {\n\t                    x1 = inver.x(0, 0);\n\t                    y1 = inver.y(0, 0);\n\t                    x2 = inver.x(t[1], t[2]);\n\t                    y2 = inver.y(t[1], t[2]);\n\t                    m.translate(x2 - x1, y2 - y1);\n\t                } else {\n\t                    m.translate(t[1], t[2]);\n\t                }\n\t            } else if (command == \"r\") {\n\t                if (tlen == 2) {\n\t                    bb = bb || bbox;\n\t                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.rotate(t[1], x2, y2);\n\t                    } else {\n\t                        m.rotate(t[1], t[2], t[3]);\n\t                    }\n\t                }\n\t            } else if (command == \"s\") {\n\t                if (tlen == 2 || tlen == 3) {\n\t                    bb = bb || bbox;\n\t                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.scale(t[1], t[1], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[1], t[2], t[3]);\n\t                    }\n\t                } else if (tlen == 5) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[3], t[4]);\n\t                        y2 = inver.y(t[3], t[4]);\n\t                        m.scale(t[1], t[2], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[2], t[3], t[4]);\n\t                    }\n\t                }\n\t            } else if (command == \"m\" && tlen == 7) {\n\t                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t            }\n\t        }\n\t    }\n\t    return m;\n\t}\n\tSnap._.transform2matrix = transform2matrix;\n\tSnap._unit2px = unit2px;\n\tvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n\t    function (a, b) {\n\t        var adown = a.nodeType == 9 ? a.documentElement : a,\n\t            bup = b && b.parentNode;\n\t            return a == bup || !!(bup && bup.nodeType == 1 && (\n\t                adown.contains ?\n\t                    adown.contains(bup) :\n\t                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n\t            ));\n\t    } :\n\t    function (a, b) {\n\t        if (b) {\n\t            while (b) {\n\t                b = b.parentNode;\n\t                if (b == a) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    };\n\tfunction getSomeDefs(el) {\n\t    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n\t            (el.node.parentNode && wrap(el.node.parentNode)) ||\n\t            Snap.select(\"svg\") ||\n\t            Snap(0, 0),\n\t        pdefs = p.select(\"defs\"),\n\t        defs  = pdefs == null ? false : pdefs.node;\n\t    if (!defs) {\n\t        defs = make(\"defs\", p.node).node;\n\t    }\n\t    return defs;\n\t}\n\tfunction getSomeSVG(el) {\n\t    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n\t}\n\tSnap._.getSomeDefs = getSomeDefs;\n\tSnap._.getSomeSVG = getSomeSVG;\n\tfunction unit2px(el, name, value) {\n\t    var svg = getSomeSVG(el).node,\n\t        out = {},\n\t        mgr = svg.querySelector(\".svg---mgr\");\n\t    if (!mgr) {\n\t        mgr = $(\"rect\");\n\t        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n\t        svg.appendChild(mgr);\n\t    }\n\t    function getW(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {width: val});\n\t        try {\n\t            return mgr.getBBox().width;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function getH(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {height: val});\n\t        try {\n\t            return mgr.getBBox().height;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function set(nam, f) {\n\t        if (name == null) {\n\t            out[nam] = f(el.attr(nam) || 0);\n\t        } else if (nam == name) {\n\t            out = f(value == null ? el.attr(nam) || 0 : value);\n\t        }\n\t    }\n\t    switch (el.type) {\n\t        case \"rect\":\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        case \"image\":\n\t            set(\"width\", getW);\n\t            set(\"height\", getH);\n\t        case \"text\":\n\t            set(\"x\", getW);\n\t            set(\"y\", getH);\n\t        break;\n\t        case \"circle\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"r\", getW);\n\t        break;\n\t        case \"ellipse\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        break;\n\t        case \"line\":\n\t            set(\"x1\", getW);\n\t            set(\"x2\", getW);\n\t            set(\"y1\", getH);\n\t            set(\"y2\", getH);\n\t        break;\n\t        case \"marker\":\n\t            set(\"refX\", getW);\n\t            set(\"markerWidth\", getW);\n\t            set(\"refY\", getH);\n\t            set(\"markerHeight\", getH);\n\t        break;\n\t        case \"radialGradient\":\n\t            set(\"fx\", getW);\n\t            set(\"fy\", getH);\n\t        break;\n\t        case \"tspan\":\n\t            set(\"dx\", getW);\n\t            set(\"dy\", getH);\n\t        break;\n\t        default:\n\t            set(name, getW);\n\t    }\n\t    svg.removeChild(mgr);\n\t    return out;\n\t}\n\t/*\\\n\t * Snap.select\n\t [ method ]\n\t **\n\t * Wraps a DOM element specified by CSS selector as @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.select = function (query) {\n\t    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t    return wrap(glob.doc.querySelector(query));\n\t};\n\t/*\\\n\t * Snap.selectAll\n\t [ method ]\n\t **\n\t * Wraps DOM elements specified by CSS selector as set or array of @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.selectAll = function (query) {\n\t    var nodelist = glob.doc.querySelectorAll(query),\n\t        set = (Snap.set || Array)();\n\t    for (var i = 0; i < nodelist.length; i++) {\n\t        set.push(wrap(nodelist[i]));\n\t    }\n\t    return set;\n\t};\n\t\n\tfunction add2group(list) {\n\t    if (!is(list, \"array\")) {\n\t        list = Array.prototype.slice.call(arguments, 0);\n\t    }\n\t    var i = 0,\n\t        j = 0,\n\t        node = this.node;\n\t    while (this[i]) delete this[i++];\n\t    for (i = 0; i < list.length; i++) {\n\t        if (list[i].type == \"set\") {\n\t            list[i].forEach(function (el) {\n\t                node.appendChild(el.node);\n\t            });\n\t        } else {\n\t            node.appendChild(list[i].node);\n\t        }\n\t    }\n\t    var children = node.childNodes;\n\t    for (i = 0; i < children.length; i++) {\n\t        this[j++] = wrap(children[i]);\n\t    }\n\t    return this;\n\t}\n\t// Hub garbage collector every 10s\n\tsetInterval(function () {\n\t    for (var key in hub) if (hub[has](key)) {\n\t        var el = hub[key],\n\t            node = el.node;\n\t        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n\t            delete hub[key];\n\t        }\n\t    }\n\t}, 1e4);\n\tfunction Element(el) {\n\t    if (el.snap in hub) {\n\t        return hub[el.snap];\n\t    }\n\t    var svg;\n\t    try {\n\t        svg = el.ownerSVGElement;\n\t    } catch(e) {}\n\t    /*\\\n\t     * Element.node\n\t     [ property (object) ]\n\t     **\n\t     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t     > Usage\n\t     | // draw a circle at coordinate 10,10 with radius of 10\n\t     | var c = paper.circle(10, 10, 10);\n\t     | c.node.onclick = function () {\n\t     |     c.attr(\"fill\", \"red\");\n\t     | };\n\t    \\*/\n\t    this.node = el;\n\t    if (svg) {\n\t        this.paper = new Paper(svg);\n\t    }\n\t    /*\\\n\t     * Element.type\n\t     [ property (string) ]\n\t     **\n\t     * SVG tag name of the given element.\n\t    \\*/\n\t    this.type = el.tagName || el.nodeName;\n\t    var id = this.id = ID(this);\n\t    this.anims = {};\n\t    this._ = {\n\t        transform: []\n\t    };\n\t    el.snap = id;\n\t    hub[id] = this;\n\t    if (this.type == \"g\") {\n\t        this.add = add2group;\n\t    }\n\t    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n\t        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n\t            this[method] = Paper.prototype[method];\n\t        }\n\t    }\n\t}\n\t   /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Gets or sets given attributes of the element.\n\t     **\n\t     - params (object) contains key-value pairs of attributes you want to set\n\t     * or\n\t     - param (string) name of the attribute\n\t     = (Element) the current element\n\t     * or\n\t     = (string) value of attribute\n\t     > Usage\n\t     | el.attr({\n\t     |     fill: \"#fc0\",\n\t     |     stroke: \"#000\",\n\t     |     strokeWidth: 2, // CamelCase...\n\t     |     \"fill-opacity\": 0.5, // or dash-separated names\n\t     |     width: \"*=2\" // prefixed values\n\t     | });\n\t     | console.log(el.attr(\"fill\")); // #fc0\n\t     * Prefixed values in format `\"+=10\"` supported. All four operations\n\t     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n\t     * and `-`: `\"+=2em\"`.\n\t    \\*/\n\t    Element.prototype.attr = function (params, value) {\n\t        var el = this,\n\t            node = el.node;\n\t        if (!params) {\n\t            if (node.nodeType != 1) {\n\t                return {\n\t                    text: node.nodeValue\n\t                };\n\t            }\n\t            var attr = node.attributes,\n\t                out = {};\n\t            for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                out[attr[i].nodeName] = attr[i].nodeValue;\n\t            }\n\t            return out;\n\t        }\n\t        if (is(params, \"string\")) {\n\t            if (arguments.length > 1) {\n\t                var json = {};\n\t                json[params] = value;\n\t                params = json;\n\t            } else {\n\t                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n\t            }\n\t        }\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                eve(\"snap.util.attr.\" + att, el, params[att]);\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t/*\\\n\t * Snap.parse\n\t [ method ]\n\t **\n\t * Parses SVG fragment and converts it into a @Fragment\n\t **\n\t - svg (string) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.parse = function (svg) {\n\t    var f = glob.doc.createDocumentFragment(),\n\t        full = true,\n\t        div = glob.doc.createElement(\"div\");\n\t    svg = Str(svg);\n\t    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n\t        svg = \"<svg>\" + svg + \"</svg>\";\n\t        full = false;\n\t    }\n\t    div.innerHTML = svg;\n\t    svg = div.getElementsByTagName(\"svg\")[0];\n\t    if (svg) {\n\t        if (full) {\n\t            f = svg;\n\t        } else {\n\t            while (svg.firstChild) {\n\t                f.appendChild(svg.firstChild);\n\t            }\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\tfunction Fragment(frag) {\n\t    this.node = frag;\n\t}\n\t/*\\\n\t * Snap.fragment\n\t [ method ]\n\t **\n\t * Creates a DOM fragment from a given list of elements or strings\n\t **\n\t - varargs (…) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.fragment = function () {\n\t    var args = Array.prototype.slice.call(arguments, 0),\n\t        f = glob.doc.createDocumentFragment();\n\t    for (var i = 0, ii = args.length; i < ii; i++) {\n\t        var item = args[i];\n\t        if (item.node && item.node.nodeType) {\n\t            f.appendChild(item.node);\n\t        }\n\t        if (item.nodeType) {\n\t            f.appendChild(item);\n\t        }\n\t        if (typeof item == \"string\") {\n\t            f.appendChild(Snap.parse(item).node);\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\t\n\tfunction make(name, parent) {\n\t    var res = $(name);\n\t    parent.appendChild(res);\n\t    var el = wrap(res);\n\t    return el;\n\t}\n\tfunction Paper(w, h) {\n\t    var res,\n\t        desc,\n\t        defs,\n\t        proto = Paper.prototype;\n\t    if (w && w.tagName == \"svg\") {\n\t        if (w.snap in hub) {\n\t            return hub[w.snap];\n\t        }\n\t        var doc = w.ownerDocument;\n\t        res = new Element(w);\n\t        desc = w.getElementsByTagName(\"desc\")[0];\n\t        defs = w.getElementsByTagName(\"defs\")[0];\n\t        if (!desc) {\n\t            desc = $(\"desc\");\n\t            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n\t            res.node.appendChild(desc);\n\t        }\n\t        if (!defs) {\n\t            defs = $(\"defs\");\n\t            res.node.appendChild(defs);\n\t        }\n\t        res.defs = defs;\n\t        for (var key in proto) if (proto[has](key)) {\n\t            res[key] = proto[key];\n\t        }\n\t        res.paper = res.root = res;\n\t    } else {\n\t        res = make(\"svg\", glob.doc.body);\n\t        $(res.node, {\n\t            height: h,\n\t            version: 1.1,\n\t            width: w,\n\t            xmlns: xmlns\n\t        });\n\t    }\n\t    return res;\n\t}\n\tfunction wrap(dom) {\n\t    if (!dom) {\n\t        return dom;\n\t    }\n\t    if (dom instanceof Element || dom instanceof Fragment) {\n\t        return dom;\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n\t        return new Paper(dom);\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n\t        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n\t    }\n\t    return new Element(dom);\n\t}\n\t\n\tSnap._.make = make;\n\tSnap._.wrap = wrap;\n\t/*\\\n\t * Paper.el\n\t [ method ]\n\t **\n\t * Creates an element on paper with a given name and no attributes\n\t **\n\t - name (string) tag name\n\t - attr (object) attributes\n\t = (Element) the current element\n\t > Usage\n\t | var c = paper.circle(10, 10, 10); // is the same as...\n\t | var c = paper.el(\"circle\").attr({\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t | // and the same as\n\t | var c = paper.el(\"circle\", {\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t\\*/\n\tPaper.prototype.el = function (name, attr) {\n\t    var el = make(name, this.node);\n\t    attr && el.attr(attr);\n\t    return el;\n\t};\n\t/*\\\n\t * Element.children\n\t [ method ]\n\t **\n\t * Returns array of all the children of the element.\n\t = (array) array of Elements\n\t\\*/\n\tElement.prototype.children = function () {\n\t    var out = [],\n\t        ch = this.node.childNodes;\n\t    for (var i = 0, ii = ch.length; i < ii; i++) {\n\t        out[i] = Snap(ch[i]);\n\t    }\n\t    return out;\n\t};\n\tfunction jsonFiller(root, o) {\n\t    for (var i = 0, ii = root.length; i < ii; i++) {\n\t        var item = {\n\t                type: root[i].type,\n\t                attr: root[i].attr()\n\t            },\n\t            children = root[i].children();\n\t        o.push(item);\n\t        if (children.length) {\n\t            jsonFiller(children, item.childNodes = []);\n\t        }\n\t    }\n\t}\n\t/*\\\n\t * Element.toJSON\n\t [ method ]\n\t **\n\t * Returns object representation of the given element and all its children.\n\t = (object) in format\n\t o {\n\t o     type (string) this.type,\n\t o     attr (object) attributes map,\n\t o     childNodes (array) optional array of children in the same format\n\t o }\n\t\\*/\n\tElement.prototype.toJSON = function () {\n\t    var out = [];\n\t    jsonFiller([this], out);\n\t    return out[0];\n\t};\n\t// default\n\teve.on(\"snap.util.getattr\", function () {\n\t    var att = eve.nt();\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    var css = att.replace(/[A-Z]/g, function (letter) {\n\t        return \"-\" + letter.toLowerCase();\n\t    });\n\t    if (cssAttr[has](css)) {\n\t        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n\t    } else {\n\t        return $(this.node, att);\n\t    }\n\t});\n\tvar cssAttr = {\n\t    \"alignment-baseline\": 0,\n\t    \"baseline-shift\": 0,\n\t    \"clip\": 0,\n\t    \"clip-path\": 0,\n\t    \"clip-rule\": 0,\n\t    \"color\": 0,\n\t    \"color-interpolation\": 0,\n\t    \"color-interpolation-filters\": 0,\n\t    \"color-profile\": 0,\n\t    \"color-rendering\": 0,\n\t    \"cursor\": 0,\n\t    \"direction\": 0,\n\t    \"display\": 0,\n\t    \"dominant-baseline\": 0,\n\t    \"enable-background\": 0,\n\t    \"fill\": 0,\n\t    \"fill-opacity\": 0,\n\t    \"fill-rule\": 0,\n\t    \"filter\": 0,\n\t    \"flood-color\": 0,\n\t    \"flood-opacity\": 0,\n\t    \"font\": 0,\n\t    \"font-family\": 0,\n\t    \"font-size\": 0,\n\t    \"font-size-adjust\": 0,\n\t    \"font-stretch\": 0,\n\t    \"font-style\": 0,\n\t    \"font-variant\": 0,\n\t    \"font-weight\": 0,\n\t    \"glyph-orientation-horizontal\": 0,\n\t    \"glyph-orientation-vertical\": 0,\n\t    \"image-rendering\": 0,\n\t    \"kerning\": 0,\n\t    \"letter-spacing\": 0,\n\t    \"lighting-color\": 0,\n\t    \"marker\": 0,\n\t    \"marker-end\": 0,\n\t    \"marker-mid\": 0,\n\t    \"marker-start\": 0,\n\t    \"mask\": 0,\n\t    \"opacity\": 0,\n\t    \"overflow\": 0,\n\t    \"pointer-events\": 0,\n\t    \"shape-rendering\": 0,\n\t    \"stop-color\": 0,\n\t    \"stop-opacity\": 0,\n\t    \"stroke\": 0,\n\t    \"stroke-dasharray\": 0,\n\t    \"stroke-dashoffset\": 0,\n\t    \"stroke-linecap\": 0,\n\t    \"stroke-linejoin\": 0,\n\t    \"stroke-miterlimit\": 0,\n\t    \"stroke-opacity\": 0,\n\t    \"stroke-width\": 0,\n\t    \"text-anchor\": 0,\n\t    \"text-decoration\": 0,\n\t    \"text-rendering\": 0,\n\t    \"unicode-bidi\": 0,\n\t    \"visibility\": 0,\n\t    \"word-spacing\": 0,\n\t    \"writing-mode\": 0\n\t};\n\t\n\teve.on(\"snap.util.attr\", function (value) {\n\t    var att = eve.nt(),\n\t        attr = {};\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    attr[att] = value;\n\t    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n\t            return letter.toUpperCase();\n\t        }),\n\t        css = att.replace(/[A-Z]/g, function (letter) {\n\t            return \"-\" + letter.toLowerCase();\n\t        });\n\t    if (cssAttr[has](css)) {\n\t        this.node.style[style] = value == null ? E : value;\n\t    } else {\n\t        $(this.node, attr);\n\t    }\n\t});\n\t(function (proto) {}(Paper.prototype));\n\t\n\t// simple ajax\n\t/*\\\n\t * Snap.ajax\n\t [ method ]\n\t **\n\t * Simple implementation of Ajax\n\t **\n\t - url (string) URL\n\t - postData (object|string) data for post request\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t * or\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\t\\*/\n\tSnap.ajax = function (url, postData, callback, scope){\n\t    var req = new XMLHttpRequest,\n\t        id = ID();\n\t    if (req) {\n\t        if (is(postData, \"function\")) {\n\t            scope = callback;\n\t            callback = postData;\n\t            postData = null;\n\t        } else if (is(postData, \"object\")) {\n\t            var pd = [];\n\t            for (var key in postData) if (postData.hasOwnProperty(key)) {\n\t                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n\t            }\n\t            postData = pd.join(\"&\");\n\t        }\n\t        req.open((postData ? \"POST\" : \"GET\"), url, true);\n\t        if (postData) {\n\t            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\t            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t        }\n\t        if (callback) {\n\t            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n\t        }\n\t        req.onreadystatechange = function() {\n\t            if (req.readyState != 4) return;\n\t            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n\t        };\n\t        if (req.readyState == 4) {\n\t            return req;\n\t        }\n\t        req.send(postData);\n\t        return req;\n\t    }\n\t};\n\t/*\\\n\t * Snap.load\n\t [ method ]\n\t **\n\t * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n\t **\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t\\*/\n\tSnap.load = function (url, callback, scope) {\n\t    Snap.ajax(url, function (req) {\n\t        var f = Snap.parse(req.responseText);\n\t        scope ? callback.call(scope, f) : callback(f);\n\t    });\n\t};\n\tvar getOffset = function (elem) {\n\t    var box = elem.getBoundingClientRect(),\n\t        doc = elem.ownerDocument,\n\t        body = doc.body,\n\t        docElem = doc.documentElement,\n\t        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t    return {\n\t        y: top,\n\t        x: left\n\t    };\n\t};\n\t/*\\\n\t * Snap.getElementByPoint\n\t [ method ]\n\t **\n\t * Returns you topmost element under given point.\n\t **\n\t = (object) Snap element object\n\t - x (number) x coordinate from the top left corner of the window\n\t - y (number) y coordinate from the top left corner of the window\n\t > Usage\n\t | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t\\*/\n\tSnap.getElementByPoint = function (x, y) {\n\t    var paper = this,\n\t        svg = paper.canvas,\n\t        target = glob.doc.elementFromPoint(x, y);\n\t    if (glob.win.opera && target.tagName == \"svg\") {\n\t        var so = getOffset(target),\n\t            sr = target.createSVGRect();\n\t        sr.x = x - so.x;\n\t        sr.y = y - so.y;\n\t        sr.width = sr.height = 1;\n\t        var hits = target.getIntersectionList(sr, null);\n\t        if (hits.length) {\n\t            target = hits[hits.length - 1];\n\t        }\n\t    }\n\t    if (!target) {\n\t        return null;\n\t    }\n\t    return wrap(target);\n\t};\n\t/*\\\n\t * Snap.plugin\n\t [ method ]\n\t **\n\t * Let you write plugins. You pass in a function with five arguments, like this:\n\t | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n\t |     Snap.newmethod = function () {};\n\t |     Element.prototype.newmethod = function () {};\n\t |     Paper.prototype.newmethod = function () {};\n\t | });\n\t * Inside the function you have access to all main objects (and their\n\t * prototypes). This allow you to extend anything you want.\n\t **\n\t - f (function) your plugin body\n\t\\*/\n\tSnap.plugin = function (f) {\n\t    f(Snap, Element, Paper, glob, Fragment);\n\t};\n\tglob.win.Snap = Snap;\n\treturn Snap;\n\t}(window || this));\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        Str = String,\n\t        unit2px = Snap._unit2px,\n\t        $ = Snap._.$,\n\t        make = Snap._.make,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        has = \"hasOwnProperty\",\n\t        wrap = Snap._.wrap;\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Returns the bounding box descriptor for the given element\n\t     **\n\t     = (object) bounding box descriptor:\n\t     o {\n\t     o     cx: (number) x of the center,\n\t     o     cy: (number) x of the center,\n\t     o     h: (number) height,\n\t     o     height: (number) height,\n\t     o     path: (string) path command for the box,\n\t     o     r0: (number) radius of a circle that fully encloses the box,\n\t     o     r1: (number) radius of the smallest circle that can be enclosed,\n\t     o     r2: (number) radius of the largest circle that can be enclosed,\n\t     o     vb: (string) box as a viewbox command,\n\t     o     w: (number) width,\n\t     o     width: (number) width,\n\t     o     x2: (number) x of the right side,\n\t     o     x: (number) x of the left side,\n\t     o     y2: (number) y of the bottom edge,\n\t     o     y: (number) y of the top edge\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (!Snap.Matrix || !Snap.path) {\n\t            return this.node.getBBox();\n\t        }\n\t        var el = this,\n\t            m = new Snap.Matrix;\n\t        if (el.removed) {\n\t            return Snap._.box();\n\t        }\n\t        while (el.type == \"use\") {\n\t            if (!isWithoutTransform) {\n\t                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n\t            }\n\t            if (el.original) {\n\t                el = el.original;\n\t            } else {\n\t                var href = el.attr(\"xlink:href\");\n\t                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n\t            }\n\t        }\n\t        var _ = el._,\n\t            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\t        try {\n\t            if (isWithoutTransform) {\n\t                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n\t                return Snap._.box(_.bboxwt);\n\t            } else {\n\t                el.realPath = pathfinder(el);\n\t                el.matrix = el.transform().localMatrix;\n\t                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n\t                return Snap._.box(_.bbox);\n\t            }\n\t        } catch (e) {\n\t            // Firefox doesn’t give you bbox of hidden element\n\t            return Snap._.box();\n\t        }\n\t    };\n\t    var propString = function () {\n\t        return this.string;\n\t    };\n\t    function extractTransform(el, tstr) {\n\t        if (tstr == null) {\n\t            var doReturn = true;\n\t            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n\t                tstr = el.node.getAttribute(\"gradientTransform\");\n\t            } else if (el.type == \"pattern\") {\n\t                tstr = el.node.getAttribute(\"patternTransform\");\n\t            } else {\n\t                tstr = el.node.getAttribute(\"transform\");\n\t            }\n\t            if (!tstr) {\n\t                return new Snap.Matrix;\n\t            }\n\t            tstr = Snap._.svgTransform2string(tstr);\n\t        } else {\n\t            if (!Snap._.rgTransform.test(tstr)) {\n\t                tstr = Snap._.svgTransform2string(tstr);\n\t            } else {\n\t                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            }\n\t            if (is(tstr, \"array\")) {\n\t                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n\t            }\n\t            el._.transform = tstr;\n\t        }\n\t        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\t        if (doReturn) {\n\t            return m;\n\t        } else {\n\t            el.matrix = m;\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Gets or sets transformation of the element\n\t     **\n\t     - tstr (string) transform string in Snap or SVG format\n\t     = (Element) the current element\n\t     * or\n\t     = (object) transformation descriptor:\n\t     o {\n\t     o     string (string) transform string,\n\t     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n\t     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n\t     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n\t     o     global (string) global transformation as string,\n\t     o     local (string) local transformation as string,\n\t     o     toString (function) returns `string` property\n\t     o }\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            var papa = this,\n\t                global = new Snap.Matrix(this.node.getCTM()),\n\t                local = extractTransform(this),\n\t                ms = [local],\n\t                m = new Snap.Matrix,\n\t                i,\n\t                localString = local.toTransformString(),\n\t                string = Str(local) == Str(this.matrix) ?\n\t                            Str(_.transform) : localString;\n\t            while (papa.type != \"svg\" && (papa = papa.parent())) {\n\t                ms.push(extractTransform(papa));\n\t            }\n\t            i = ms.length;\n\t            while (i--) {\n\t                m.add(ms[i]);\n\t            }\n\t            return {\n\t                string: string,\n\t                globalMatrix: global,\n\t                totalMatrix: m,\n\t                localMatrix: local,\n\t                diffMatrix: global.clone().add(local.invert()),\n\t                global: global.toTransformString(),\n\t                total: m.toTransformString(),\n\t                local: localString,\n\t                toString: propString\n\t            };\n\t        }\n\t        if (tstr instanceof Snap.Matrix) {\n\t            this.matrix = tstr;\n\t            this._.transform = tstr.toTransformString();\n\t        } else {\n\t            extractTransform(this, tstr);\n\t        }\n\t\n\t        if (this.node) {\n\t            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n\t                $(this.node, {gradientTransform: this.matrix});\n\t            } else if (this.type == \"pattern\") {\n\t                $(this.node, {patternTransform: this.matrix});\n\t            } else {\n\t                $(this.node, {transform: this.matrix});\n\t            }\n\t        }\n\t\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.parent\n\t     [ method ]\n\t     **\n\t     * Returns the element's parent\n\t     **\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.parent = function () {\n\t        return wrap(this.node.parentNode);\n\t    };\n\t    /*\\\n\t     * Element.append\n\t     [ method ]\n\t     **\n\t     * Appends the given element to current one\n\t     **\n\t     - el (Element|Set) element to append\n\t     = (Element) the parent element\n\t    \\*/\n\t    /*\\\n\t     * Element.add\n\t     [ method ]\n\t     **\n\t     * See @Element.append\n\t    \\*/\n\t    elproto.append = elproto.add = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this;\n\t                el.forEach(function (el) {\n\t                    it.add(el);\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            this.node.appendChild(el.node);\n\t            el.paper = this.paper;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.appendTo\n\t     [ method ]\n\t     **\n\t     * Appends the current element to the given one\n\t     **\n\t     - el (Element) parent element to append to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.appendTo = function (el) {\n\t        if (el) {\n\t            el = wrap(el);\n\t            el.append(this);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prepend\n\t     [ method ]\n\t     **\n\t     * Prepends the given element to the current one\n\t     **\n\t     - el (Element) element to prepend\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.prepend = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this,\n\t                    first;\n\t                el.forEach(function (el) {\n\t                    if (first) {\n\t                        first.after(el);\n\t                    } else {\n\t                        it.prepend(el);\n\t                    }\n\t                    first = el;\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            this.node.insertBefore(el.node, this.node.firstChild);\n\t            this.add && this.add();\n\t            el.paper = this.paper;\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prependTo\n\t     [ method ]\n\t     **\n\t     * Prepends the current element to the given one\n\t     **\n\t     - el (Element) parent element to prepend to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.prependTo = function (el) {\n\t        el = wrap(el);\n\t        el.prepend(this);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.before\n\t     [ method ]\n\t     **\n\t     * Inserts given element before the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.before = function (el) {\n\t        if (el.type == \"set\") {\n\t            var it = this;\n\t            el.forEach(function (el) {\n\t                var parent = el.parent();\n\t                it.node.parentNode.insertBefore(el.node, it.node);\n\t                parent && parent.add();\n\t            });\n\t            this.parent().add();\n\t            return this;\n\t        }\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        this.node.parentNode.insertBefore(el.node, this.node);\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.after\n\t     [ method ]\n\t     **\n\t     * Inserts given element after the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.after = function (el) {\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        if (this.node.nextSibling) {\n\t            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n\t        } else {\n\t            this.node.parentNode.appendChild(el.node);\n\t        }\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertBefore = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertAfter = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the DOM\n\t     = (Element) the detached element\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var parent = this.parent();\n\t        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n\t        delete this.paper;\n\t        this.removed = true;\n\t        parent && parent.add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.select\n\t     [ method ]\n\t     **\n\t     * Gathers the nested @Element matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.select = function (query) {\n\t        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t        return wrap(this.node.querySelector(query));\n\t    };\n\t    /*\\\n\t     * Element.selectAll\n\t     [ method ]\n\t     **\n\t     * Gathers nested @Element objects matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Set|array) result of query selection\n\t    \\*/\n\t    elproto.selectAll = function (query) {\n\t        var nodelist = this.node.querySelectorAll(query),\n\t            set = (Snap.set || Array)();\n\t        for (var i = 0; i < nodelist.length; i++) {\n\t            set.push(wrap(nodelist[i]));\n\t        }\n\t        return set;\n\t    };\n\t    /*\\\n\t     * Element.asPX\n\t     [ method ]\n\t     **\n\t     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n\t     **\n\t     - attr (string) attribute name\n\t     - value (string) #optional attribute value\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.asPX = function (attr, value) {\n\t        if (value == null) {\n\t            value = this.attr(attr);\n\t        }\n\t        return +unit2px(this, attr, value);\n\t    };\n\t    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\t    /*\\\n\t     * Element.use\n\t     [ method ]\n\t     **\n\t     * Creates a `<use>` element linked to the current element\n\t     **\n\t     = (Element) the `<use>` element\n\t    \\*/\n\t    elproto.use = function () {\n\t        var use,\n\t            id = this.node.id;\n\t        if (!id) {\n\t            id = this.id;\n\t            $(this.node, {\n\t                id: id\n\t            });\n\t        }\n\t        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n\t            this.type == \"pattern\") {\n\t            use = make(this.type, this.node.parentNode);\n\t        } else {\n\t            use = make(\"use\", this.node.parentNode);\n\t        }\n\t        $(use.node, {\n\t            \"xlink:href\": \"#\" + id\n\t        });\n\t        use.original = this;\n\t        return use;\n\t    };\n\t    function fixids(el) {\n\t        var els = el.selectAll(\"*\"),\n\t            it,\n\t            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n\t            ids = [],\n\t            uses = {};\n\t        function urltest(it, name) {\n\t            var val = $(it.node, name);\n\t            val = val && val.match(url);\n\t            val = val && val[2];\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    var attr = {};\n\t                    attr[name] = URL(id);\n\t                    $(it.node, attr);\n\t                });\n\t            }\n\t        }\n\t        function linktest(it) {\n\t            var val = $(it.node, \"xlink:href\");\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    it.attr(\"xlink:href\", \"#\" + id);\n\t                });\n\t            }\n\t        }\n\t        for (var i = 0, ii = els.length; i < ii; i++) {\n\t            it = els[i];\n\t            urltest(it, \"fill\");\n\t            urltest(it, \"stroke\");\n\t            urltest(it, \"filter\");\n\t            urltest(it, \"mask\");\n\t            urltest(it, \"clip-path\");\n\t            linktest(it);\n\t            var oldid = $(it.node, \"id\");\n\t            if (oldid) {\n\t                $(it.node, {id: it.id});\n\t                ids.push({\n\t                    old: oldid,\n\t                    id: it.id\n\t                });\n\t            }\n\t        }\n\t        for (i = 0, ii = ids.length; i < ii; i++) {\n\t            var fs = uses[ids[i].old];\n\t            if (fs) {\n\t                for (var j = 0, jj = fs.length; j < jj; j++) {\n\t                    fs[j](ids[i].id);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     * Creates a clone of the element and inserts it after the element\n\t     **\n\t     = (Element) the clone\n\t    \\*/\n\t    elproto.clone = function () {\n\t        var clone = wrap(this.node.cloneNode(true));\n\t        if ($(clone.node, \"id\")) {\n\t            $(clone.node, {id: clone.id});\n\t        }\n\t        fixids(clone);\n\t        clone.insertAfter(this);\n\t        return clone;\n\t    };\n\t    /*\\\n\t     * Element.toDefs\n\t     [ method ]\n\t     **\n\t     * Moves element to the shared `<defs>` area\n\t     **\n\t     = (Element) the element\n\t    \\*/\n\t    elproto.toDefs = function () {\n\t        var defs = getSomeDefs(this);\n\t        defs.appendChild(this.node);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toPattern\n\t     [ method ]\n\t     **\n\t     * Creates a `<pattern>` element from the current element\n\t     **\n\t     * To create a pattern you have to specify the pattern rect:\n\t     - x (string|number)\n\t     - y (string|number)\n\t     - width (string|number)\n\t     - height (string|number)\n\t     = (Element) the `<pattern>` element\n\t     * You can use pattern later on as an argument for `fill` attribute:\n\t     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n\t     |         fill: \"none\",\n\t     |         stroke: \"#bada55\",\n\t     |         strokeWidth: 5\n\t     |     }).pattern(0, 0, 10, 10),\n\t     |     c = paper.circle(200, 200, 100);\n\t     | c.attr({\n\t     |     fill: p\n\t     | });\n\t    \\*/\n\t    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n\t        var p = make(\"pattern\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            height: height,\n\t            patternUnits: \"userSpaceOnUse\",\n\t            id: p.id,\n\t            viewBox: [x, y, width, height].join(\" \")\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n\t// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\t    /*\\\n\t     * Element.marker\n\t     [ method ]\n\t     **\n\t     * Creates a `<marker>` element from the current element\n\t     **\n\t     * To create a marker you have to specify the bounding rect and reference point:\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - refX (number)\n\t     - refY (number)\n\t     = (Element) the `<marker>` element\n\t     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n\t    \\*/\n\t    // TODO add usage for markers\n\t    elproto.marker = function (x, y, width, height, refX, refY) {\n\t        var p = make(\"marker\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            refX = x.refX || x.cx;\n\t            refY = x.refY || x.cy;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            viewBox: [x, y, width, height].join(\" \"),\n\t            markerWidth: width,\n\t            markerHeight: height,\n\t            orient: \"auto\",\n\t            refX: refX || 0,\n\t            refY: refY || 0,\n\t            id: p.id\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t    // animation\n\t    function slice(from, to, f) {\n\t        return function (arr) {\n\t            var res = arr.slice(from, to);\n\t            if (res.length == 1) {\n\t                res = res[0];\n\t            }\n\t            return f ? f(res) : res;\n\t        };\n\t    }\n\t    var Animation = function (attr, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        this.attr = attr;\n\t        this.dur = ms;\n\t        easing && (this.easing = easing);\n\t        callback && (this.callback = callback);\n\t    };\n\t    Snap._.Animation = Animation;\n\t    /*\\\n\t     * Snap.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object\n\t     **\n\t     - attr (object) attributes of final destination\n\t     - duration (number) duration of the animation, in milliseconds\n\t     - easing (function) #optional one of easing functions of @mina or custom one\n\t     - callback (function) #optional callback function that fires when animation ends\n\t     = (object) animation object\n\t    \\*/\n\t    Snap.animation = function (attr, ms, easing, callback) {\n\t        return new Animation(attr, ms, easing, callback);\n\t    };\n\t    /*\\\n\t     * Element.inAnim\n\t     [ method ]\n\t     **\n\t     * Returns a set of animations that may be able to manipulate the current element\n\t     **\n\t     = (object) in format:\n\t     o {\n\t     o     anim (object) animation object,\n\t     o     mina (object) @mina object,\n\t     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t    \\*/\n\t    elproto.inAnim = function () {\n\t        var el = this,\n\t            res = [];\n\t        for (var id in el.anims) if (el.anims[has](id)) {\n\t            (function (a) {\n\t                res.push({\n\t                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n\t                    mina: a,\n\t                    curStatus: a.status(),\n\t                    status: function (val) {\n\t                        return a.status(val);\n\t                    },\n\t                    stop: function () {\n\t                        a.stop();\n\t                    }\n\t                });\n\t            }(el.anims[id]));\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.animate\n\t     [ method ]\n\t     **\n\t     * Runs generic animation of one number into another with a caring function\n\t     **\n\t     - from (number|array) number or array of numbers\n\t     - to (number|array) number or array of numbers\n\t     - setter (function) caring function that accepts one number argument\n\t     - duration (number) duration, in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function to execute when animation ends\n\t     = (object) animation object in @mina format\n\t     o {\n\t     o     id (string) animation id, consider it read-only,\n\t     o     duration (function) gets or sets the duration of the animation,\n\t     o     easing (function) easing,\n\t     o     speed (function) gets or sets the speed of the animation,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t     | var rect = Snap().rect(0, 0, 10, 10);\n\t     | Snap.animate(0, 10, function (val) {\n\t     |     rect.attr({\n\t     |         x: val\n\t     |     });\n\t     | }, 1000);\n\t     | // in given context is equivalent to\n\t     | rect.animate({x: 10}, 1000);\n\t    \\*/\n\t    Snap.animate = function (from, to, setter, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n\t        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops all the animations for the current element\n\t     **\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.stop = function () {\n\t        var anims = this.inAnim();\n\t        for (var i = 0, ii = anims.length; i < ii; i++) {\n\t            anims[i].stop();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Animates the given attributes of the element\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n\t            el = this;\n\t        for (var key in attrs) if (attrs[has](key)) {\n\t            if (el.equal) {\n\t                eq = el.equal(key, Str(attrs[key]));\n\t                from = eq.from;\n\t                to = eq.to;\n\t                f = eq.f;\n\t            } else {\n\t                from = +el.attr(key);\n\t                to = +attrs[key];\n\t            }\n\t            var len = is(from, \"array\") ? from.length : 1;\n\t            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n\t            fkeys = fkeys.concat(from);\n\t            tkeys = tkeys.concat(to);\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n\t                var attr = {};\n\t                for (var key in keys) if (keys[has](key)) {\n\t                    attr[key] = keys[key](val);\n\t                }\n\t                el.attr(attr);\n\t            }, easing);\n\t        el.anims[anim.id] = anim;\n\t        anim._attrs = attrs;\n\t        anim._callback = callback;\n\t        eve(\"snap.animcreated.\" + el.id, anim);\n\t        eve.once(\"mina.finish.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t            callback && callback.call(el);\n\t        });\n\t        eve.once(\"mina.stop.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t        });\n\t        return el;\n\t    };\n\t    var eldata = {};\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key. (Don’t confuse\n\t     * with `data-` attributes)\n\t     *\n\t     * See also @Element.removeData\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0){\n\t            eve(\"snap.data.get.\" + this.id, this, data, null);\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (Snap.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"snap.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.outerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n\t     *\n\t     * See also @Element.innerSVG\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    /*\\\n\t     * Element.toString\n\t     [ method ]\n\t     **\n\t     * See @Element.outerSVG\n\t    \\*/\n\t    elproto.outerSVG = elproto.toString = toString(1);\n\t    /*\\\n\t     * Element.innerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    elproto.innerSVG = toString();\n\t    function toString(type) {\n\t        return function () {\n\t            var res = type ? \"<\" + this.type : \"\",\n\t                attr = this.node.attributes,\n\t                chld = this.node.childNodes;\n\t            if (type) {\n\t                for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                    res += \" \" + attr[i].name + '=\"' +\n\t                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n\t                }\n\t            }\n\t            if (chld.length) {\n\t                type && (res += \">\");\n\t                for (i = 0, ii = chld.length; i < ii; i++) {\n\t                    if (chld[i].nodeType == 3) {\n\t                        res += chld[i].nodeValue;\n\t                    } else if (chld[i].nodeType == 1) {\n\t                        res += wrap(chld[i]).toString();\n\t                    }\n\t                }\n\t                type && (res += \"</\" + this.type + \">\");\n\t            } else {\n\t                type && (res += \"/>\");\n\t            }\n\t            return res;\n\t        };\n\t    }\n\t    elproto.toDataURL = function () {\n\t        if (window && window.btoa) {\n\t            var bb = this.getBBox(),\n\t                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n\t                x: +bb.x.toFixed(3),\n\t                y: +bb.y.toFixed(3),\n\t                width: +bb.width.toFixed(3),\n\t                height: +bb.height.toFixed(3),\n\t                contents: this.outerSVG()\n\t            });\n\t            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n\t        }\n\t    };\n\t    /*\\\n\t     * Fragment.select\n\t     [ method ]\n\t     **\n\t     * See @Element.select\n\t    \\*/\n\t    Fragment.prototype.select = elproto.select;\n\t    /*\\\n\t     * Fragment.selectAll\n\t     [ method ]\n\t     **\n\t     * See @Element.selectAll\n\t    \\*/\n\t    Fragment.prototype.selectAll = elproto.selectAll;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var objectToString = Object.prototype.toString,\n\t        Str = String,\n\t        math = Math,\n\t        E = \"\";\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n\t            this.a = a.a;\n\t            this.b = a.b;\n\t            this.c = a.c;\n\t            this.d = a.d;\n\t            this.e = a.e;\n\t            this.f = a.f;\n\t            return;\n\t        }\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds the given matrix to existing one\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         * or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\t\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\t\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns an inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns a copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         - x (number) horizontal offset distance\n\t         - y (number) vertical offset distance\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            return this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         - x (number) amount to be scaled, with `1` resulting in no change\n\t         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n\t         - cx (number) #optional horizontal origin point from which to scale\n\t         - cy (number) #optional vertical origin point from which to scale\n\t         * Default cx, cy is the middle point of the element.\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         - a (number) angle of rotation, in degrees\n\t         - x (number) horizontal origin point from which to rotate\n\t         - y (number) vertical origin point from which to rotate\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = Snap.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            return this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.determinant\n\t         [ method ]\n\t         **\n\t         * Finds determinant of the given matrix.\n\t         = (number) determinant\n\t        \\*/\n\t        matrixproto.determinant = function () {\n\t            return this.a * this.d - this.b * this.c;\n\t        };\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\t\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\t\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\t\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\t\n\t            if (this.determinant() < 0) {\n\t                out.scalex = -out.scalex;\n\t            }\n\t\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = Snap.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = Snap.deg(math.asin(sin));\n\t            }\n\t\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Returns transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this.split();\n\t            if (!+s.shear.toFixed(9)) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\t    /*\\\n\t     * Snap.Matrix\n\t     [ method ]\n\t     **\n\t     * Matrix constructor, extend on your own risk.\n\t     * To create matrices use @Snap.matrix.\n\t    \\*/\n\t    Snap.Matrix = Matrix;\n\t    /*\\\n\t     * Snap.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns a matrix based on the given parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     * or\n\t     - svgMatrix (SVGMatrix)\n\t     = (object) @Matrix\n\t    \\*/\n\t    Snap.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var has = \"hasOwnProperty\",\n\t        make = Snap._.make,\n\t        wrap = Snap._.wrap,\n\t        is = Snap.is,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t        $ = Snap._.$,\n\t        URL = Snap.url,\n\t        Str = String,\n\t        separator = Snap._.separator,\n\t        E = \"\";\n\t    // Attributes event handlers\n\t    eve.on(\"snap.util.attr.mask\", function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value.type == \"mask\") {\n\t                var mask = value;\n\t            } else {\n\t                mask = make(\"mask\", getSomeDefs(this));\n\t                mask.node.appendChild(value.node);\n\t            }\n\t            !mask.node.id && $(mask.node, {\n\t                id: mask.id\n\t            });\n\t            $(this.node, {\n\t                mask: URL(mask.id)\n\t            });\n\t        }\n\t    });\n\t    (function (clipIt) {\n\t        eve.on(\"snap.util.attr.clip\", clipIt);\n\t        eve.on(\"snap.util.attr.clip-path\", clipIt);\n\t        eve.on(\"snap.util.attr.clipPath\", clipIt);\n\t    }(function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value.type == \"clipPath\") {\n\t                var clip = value;\n\t            } else {\n\t                clip = make(\"clipPath\", getSomeDefs(this));\n\t                clip.node.appendChild(value.node);\n\t                !clip.node.id && $(clip.node, {\n\t                    id: clip.id\n\t                });\n\t            }\n\t            $(this.node, {\n\t                \"clip-path\": URL(clip.node.id || clip.id)\n\t            });\n\t        }\n\t    }));\n\t    function fillStroke(name) {\n\t        return function (value) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n\t                (value.node.firstChild.tagName == \"radialGradient\" ||\n\t                value.node.firstChild.tagName == \"linearGradient\" ||\n\t                value.node.firstChild.tagName == \"pattern\")) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value instanceof Element) {\n\t                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n\t                   || value.type == \"pattern\") {\n\t                    if (!value.node.id) {\n\t                        $(value.node, {\n\t                            id: value.id\n\t                        });\n\t                    }\n\t                    var fill = URL(value.node.id);\n\t                } else {\n\t                    fill = value.attr(name);\n\t                }\n\t            } else {\n\t                fill = Snap.color(value);\n\t                if (fill.error) {\n\t                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\t                    if (grad) {\n\t                        if (!grad.node.id) {\n\t                            $(grad.node, {\n\t                                id: grad.id\n\t                            });\n\t                        }\n\t                        fill = URL(grad.node.id);\n\t                    } else {\n\t                        fill = value;\n\t                    }\n\t                } else {\n\t                    fill = Str(fill);\n\t                }\n\t            }\n\t            var attrs = {};\n\t            attrs[name] = fill;\n\t            $(this.node, attrs);\n\t            this.node.style[name] = E;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n\t    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n\t    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n\t    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n\t        string = Str(string);\n\t        var tokens = string.match(gradrg);\n\t        if (!tokens) {\n\t            return null;\n\t        }\n\t        var type = tokens[1],\n\t            params = tokens[2],\n\t            stops = tokens[3];\n\t        params = params.split(/\\s*,\\s*/).map(function (el) {\n\t            return +el == el ? +el : el;\n\t        });\n\t        if (params.length == 1 && params[0] == 0) {\n\t            params = [];\n\t        }\n\t        stops = stops.split(\"-\");\n\t        stops = stops.map(function (el) {\n\t            el = el.split(\":\");\n\t            var out = {\n\t                color: el[0]\n\t            };\n\t            if (el[1]) {\n\t                out.offset = parseFloat(el[1]);\n\t            }\n\t            return out;\n\t        });\n\t        return {\n\t            type: type,\n\t            params: params,\n\t            stops: stops\n\t        };\n\t    });\n\t\n\t    eve.on(\"snap.util.attr.d\", function (value) {\n\t        eve.stop();\n\t        if (is(value, \"array\") && is(value[0], \"array\")) {\n\t            value = Snap.path.toString.call(value);\n\t        }\n\t        value = Str(value);\n\t        if (value.match(/[ruo]/i)) {\n\t            value = Snap.path.toAbsolute(value);\n\t        }\n\t        $(this.node, {d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.#text\", function (value) {\n\t        eve.stop();\n\t        value = Str(value);\n\t        var txt = glob.doc.createTextNode(value);\n\t        while (this.node.firstChild) {\n\t            this.node.removeChild(this.node.firstChild);\n\t        }\n\t        this.node.appendChild(txt);\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.path\", function (value) {\n\t        eve.stop();\n\t        this.attr({d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.class\", function (value) {\n\t        eve.stop();\n\t        this.node.className.baseVal = value;\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.viewBox\", function (value) {\n\t        var vb;\n\t        if (is(value, \"object\") && \"x\" in value) {\n\t            vb = [value.x, value.y, value.width, value.height].join(\" \");\n\t        } else if (is(value, \"array\")) {\n\t            vb = value.join(\" \");\n\t        } else {\n\t            vb = value;\n\t        }\n\t        $(this.node, {\n\t            viewBox: vb\n\t        });\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.transform\", function (value) {\n\t        this.transform(value);\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.r\", function (value) {\n\t        if (this.type == \"rect\") {\n\t            eve.stop();\n\t            $(this.node, {\n\t                rx: value,\n\t                ry: value\n\t            });\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.textpath\", function (value) {\n\t        eve.stop();\n\t        if (this.type == \"text\") {\n\t            var id, tp, node;\n\t            if (!value && this.textPath) {\n\t                tp = this.textPath;\n\t                while (tp.node.firstChild) {\n\t                    this.node.appendChild(tp.node.firstChild);\n\t                }\n\t                tp.remove();\n\t                delete this.textPath;\n\t                return;\n\t            }\n\t            if (is(value, \"string\")) {\n\t                var defs = getSomeDefs(this),\n\t                    path = wrap(defs.parentNode).path(value);\n\t                defs.appendChild(path.node);\n\t                id = path.id;\n\t                path.attr({id: id});\n\t            } else {\n\t                value = wrap(value);\n\t                if (value instanceof Element) {\n\t                    id = value.attr(\"id\");\n\t                    if (!id) {\n\t                        id = value.id;\n\t                        value.attr({id: id});\n\t                    }\n\t                }\n\t            }\n\t            if (id) {\n\t                tp = this.textPath;\n\t                node = this.node;\n\t                if (tp) {\n\t                    tp.attr({\"xlink:href\": \"#\" + id});\n\t                } else {\n\t                    tp = $(\"textPath\", {\n\t                        \"xlink:href\": \"#\" + id\n\t                    });\n\t                    while (node.firstChild) {\n\t                        tp.appendChild(node.firstChild);\n\t                    }\n\t                    node.appendChild(tp);\n\t                    this.textPath = wrap(tp);\n\t                }\n\t            }\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.text\", function (value) {\n\t        if (this.type == \"text\") {\n\t            var i = 0,\n\t                node = this.node,\n\t                tuner = function (chunk) {\n\t                    var out = $(\"tspan\");\n\t                    if (is(chunk, \"array\")) {\n\t                        for (var i = 0; i < chunk.length; i++) {\n\t                            out.appendChild(tuner(chunk[i]));\n\t                        }\n\t                    } else {\n\t                        out.appendChild(glob.doc.createTextNode(chunk));\n\t                    }\n\t                    out.normalize && out.normalize();\n\t                    return out;\n\t                };\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var tuned = tuner(value);\n\t            while (tuned.firstChild) {\n\t                node.appendChild(tuned.firstChild);\n\t            }\n\t        }\n\t        eve.stop();\n\t    })(-1);\n\t    function setFontSize(value) {\n\t        eve.stop();\n\t        if (value == +value) {\n\t            value += \"px\";\n\t        }\n\t        this.node.style.fontSize = value;\n\t    }\n\t    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n\t    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\t\n\t\n\t    eve.on(\"snap.util.getattr.transform\", function () {\n\t        eve.stop();\n\t        return this.transform();\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.textpath\", function () {\n\t        eve.stop();\n\t        return this.textPath;\n\t    })(-1);\n\t    // Markers\n\t    (function () {\n\t        function getter(end) {\n\t            return function () {\n\t                eve.stop();\n\t                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\t                if (style == \"none\") {\n\t                    return style;\n\t                } else {\n\t                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n\t                }\n\t            };\n\t        }\n\t        function setter(end) {\n\t            return function (value) {\n\t                eve.stop();\n\t                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\t                if (value == \"\" || !value) {\n\t                    this.node.style[name] = \"none\";\n\t                    return;\n\t                }\n\t                if (value.type == \"marker\") {\n\t                    var id = value.node.id;\n\t                    if (!id) {\n\t                        $(value.node, {id: value.id});\n\t                    }\n\t                    this.node.style[name] = URL(id);\n\t                    return;\n\t                }\n\t            };\n\t        }\n\t        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n\t    }());\n\t    eve.on(\"snap.util.getattr.r\", function () {\n\t        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n\t            eve.stop();\n\t            return $(this.node, \"rx\");\n\t        }\n\t    })(-1);\n\t    function textExtract(node) {\n\t        var out = [];\n\t        var children = node.childNodes;\n\t        for (var i = 0, ii = children.length; i < ii; i++) {\n\t            var chi = children[i];\n\t            if (chi.nodeType == 3) {\n\t                out.push(chi.nodeValue);\n\t            }\n\t            if (chi.tagName == \"tspan\") {\n\t                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n\t                    out.push(chi.firstChild.nodeValue);\n\t                } else {\n\t                    out.push(textExtract(chi));\n\t                }\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    eve.on(\"snap.util.getattr.text\", function () {\n\t        if (this.type == \"text\" || this.type == \"tspan\") {\n\t            eve.stop();\n\t            var out = textExtract(this.node);\n\t            return out.length == 1 ? out[0] : out;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.#text\", function () {\n\t        return this.node.textContent;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.viewBox\", function () {\n\t        eve.stop();\n\t        var vb = $(this.node, \"viewBox\");\n\t        if (vb) {\n\t            vb = vb.split(separator);\n\t            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.points\", function () {\n\t        var p = $(this.node, \"points\");\n\t        eve.stop();\n\t        if (p) {\n\t            return p.split(separator);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.path\", function () {\n\t        var p = $(this.node, \"d\");\n\t        eve.stop();\n\t        return p;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.class\", function () {\n\t        return this.node.className.baseVal;\n\t    })(-1);\n\t    function getFontSize() {\n\t        eve.stop();\n\t        return this.node.style.fontSize;\n\t    }\n\t    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n\t    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var rgNotSpace = /\\S+/g,\n\t        rgBadSpace = /[\\t\\r\\n\\f]/g,\n\t        rgTrim = /(^\\s+|\\s+$)/g,\n\t        Str = String,\n\t        elproto = Element.prototype;\n\t    /*\\\n\t     * Element.addClass\n\t     [ method ]\n\t     **\n\t     * Adds given class name or list of class names to the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.addClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t\n\t        if (classes.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (!~pos) {\n\t                    curClasses.push(clazz);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeClass\n\t     [ method ]\n\t     **\n\t     * Removes given class name or list of class names from the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.removeClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        if (curClasses.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (~pos) {\n\t                    curClasses.splice(pos, 1);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hasClass\n\t     [ method ]\n\t     **\n\t     * Checks if the element has a given class name in the list of class names applied to it.\n\t     - value (string) class name\n\t     **\n\t     = (boolean) `true` if the element has given class\n\t    \\*/\n\t    elproto.hasClass = function (value) {\n\t        var elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [];\n\t        return !!~curClasses.indexOf(value);\n\t    };\n\t    /*\\\n\t     * Element.toggleClass\n\t     [ method ]\n\t     **\n\t     * Add or remove one or more classes from the element, depending on either\n\t     * the class’s presence or the value of the `flag` argument.\n\t     - value (string) class name or space separated list of class names\n\t     - flag (boolean) value to determine whether the class should be added or removed\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.toggleClass = function (value, flag) {\n\t        if (flag != null) {\n\t            if (flag) {\n\t                return this.addClass(value);\n\t            } else {\n\t                return this.removeClass(value);\n\t            }\n\t        }\n\t        var classes = (value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        j = 0;\n\t        while ((clazz = classes[j++])) {\n\t            pos = curClasses.indexOf(clazz);\n\t            if (~pos) {\n\t                curClasses.splice(pos, 1);\n\t            } else {\n\t                curClasses.push(clazz);\n\t            }\n\t        }\n\t\n\t        finalValue = curClasses.join(\" \");\n\t        if (className != finalValue) {\n\t            elem.className.baseVal = finalValue;\n\t        }\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var operators = {\n\t            \"+\": function (x, y) {\n\t                    return x + y;\n\t                },\n\t            \"-\": function (x, y) {\n\t                    return x - y;\n\t                },\n\t            \"/\": function (x, y) {\n\t                    return x / y;\n\t                },\n\t            \"*\": function (x, y) {\n\t                    return x * y;\n\t                }\n\t        },\n\t        Str = String,\n\t        reUnit = /[a-z]+$/i,\n\t        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr\", function (val) {\n\t        var plus = Str(val).match(reAddon);\n\t        if (plus) {\n\t            var evnt = eve.nt(),\n\t                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n\t                a = this.attr(name),\n\t                atr = {};\n\t            eve.stop();\n\t            var unit = plus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[plus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                val = op(parseFloat(a), +plus[2]);\n\t            } else {\n\t                a = this.asPX(name);\n\t                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n\t            }\n\t            if (isNaN(a) || isNaN(val)) {\n\t                return;\n\t            }\n\t            atr[name] = val;\n\t            this.attr(atr);\n\t        }\n\t    })(-10);\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this,\n\t            bplus = Str(b).match(reAddon);\n\t        if (bplus) {\n\t            eve.stop();\n\t            var unit = bplus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[bplus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: op(parseFloat(a), +bplus[2]),\n\t                    f: getUnit(aUnit)\n\t                };\n\t            } else {\n\t                a = this.asPX(name);\n\t                return {\n\t                    from: a,\n\t                    to: op(a, this.asPX(name, bplus[2] + unit)),\n\t                    f: getNumber\n\t                };\n\t            }\n\t        }\n\t    })(-10);\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var proto = Paper.prototype,\n\t        is = Snap.is;\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - rx (number) #optional horizontal radius for rounded corners, default is 0\n\t     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n\t     = (object) the `rect` element\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    proto.rect = function (x, y, w, h, rx, ry) {\n\t        var attr;\n\t        if (ry == null) {\n\t            ry = rx;\n\t        }\n\t        if (is(x, \"object\") && x == \"[object Object]\") {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                width: w,\n\t                height: h\n\t            };\n\t            if (rx != null) {\n\t                attr.rx = rx;\n\t                attr.ry = ry;\n\t            }\n\t        }\n\t        return this.el(\"rect\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) the `circle` element\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    proto.circle = function (cx, cy, r) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr = {\n\t                cx: cx,\n\t                cy: cy,\n\t                r: r\n\t            };\n\t        }\n\t        return this.el(\"circle\", attr);\n\t    };\n\t\n\t    var preload = (function () {\n\t        function onerror() {\n\t            this.parentNode.removeChild(this);\n\t        }\n\t        return function (src, f) {\n\t            var img = glob.doc.createElement(\"img\"),\n\t                body = glob.doc.body;\n\t            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t            img.onload = function () {\n\t                f.call(img);\n\t                img.onload = img.onerror = null;\n\t                body.removeChild(img);\n\t            };\n\t            img.onerror = onerror;\n\t            body.appendChild(img);\n\t            img.src = src;\n\t        };\n\t    }());\n\t\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Places an image on the surface\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x offset position\n\t     - y (number) y offset position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) the `image` element\n\t     * or\n\t     = (object) Snap element object with type `image`\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    proto.image = function (src, x, y, width, height) {\n\t        var el = this.el(\"image\");\n\t        if (is(src, \"object\") && \"src\" in src) {\n\t            el.attr(src);\n\t        } else if (src != null) {\n\t            var set = {\n\t                \"xlink:href\": src,\n\t                preserveAspectRatio: \"none\"\n\t            };\n\t            if (x != null && y != null) {\n\t                set.x = x;\n\t                set.y = y;\n\t            }\n\t            if (width != null && height != null) {\n\t                set.width = width;\n\t                set.height = height;\n\t            } else {\n\t                preload(src, function () {\n\t                    Snap._.$(el.node, {\n\t                        width: this.offsetWidth,\n\t                        height: this.offsetHeight\n\t                    });\n\t                });\n\t            }\n\t            Snap._.$(el.node, set);\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) the `ellipse` element\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    proto.ellipse = function (cx, cy, rx, ry) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr ={\n\t                cx: cx,\n\t                cy: cy,\n\t                rx: rx,\n\t                ry: ry\n\t            };\n\t        }\n\t        return this.el(\"ellipse\", attr);\n\t    };\n\t    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a `<path>` element using the given string as the path's definition\n\t     - pathString (string) #optional path string in SVG format\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n\t     | \"M10,20L30,40\"\n\t     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n\t     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t    \\*/\n\t    proto.path = function (d) {\n\t        var attr;\n\t        if (is(d, \"object\") && !is(d, \"array\")) {\n\t            attr = d;\n\t        } else if (d) {\n\t            attr = {d: d};\n\t        }\n\t        return this.el(\"path\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.g\n\t     [ method ]\n\t     **\n\t     * Creates a group element\n\t     **\n\t     - varargs (…) #optional elements to nest within the group\n\t     = (object) the `g` element\n\t     **\n\t     > Usage\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g(c2, c1); // note that the order of elements is different\n\t     * or\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g();\n\t     | g.add(c2, c1);\n\t    \\*/\n\t    /*\\\n\t     * Paper.group\n\t     [ method ]\n\t     **\n\t     * See @Paper.g\n\t    \\*/\n\t    proto.group = proto.g = function (first) {\n\t        var attr,\n\t            el = this.el(\"g\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.svg\n\t     [ method ]\n\t     **\n\t     * Creates a nested SVG element.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `svg` element\n\t     **\n\t    \\*/\n\t    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n\t        var attrs = {};\n\t        if (is(x, \"object\") && y == null) {\n\t            attrs = x;\n\t        } else {\n\t            if (x != null) {\n\t                attrs.x = x;\n\t            }\n\t            if (y != null) {\n\t                attrs.y = y;\n\t            }\n\t            if (width != null) {\n\t                attrs.width = width;\n\t            }\n\t            if (height != null) {\n\t                attrs.height = height;\n\t            }\n\t            if (vbx != null && vby != null && vbw != null && vbh != null) {\n\t                attrs.viewBox = [vbx, vby, vbw, vbh];\n\t            }\n\t        }\n\t        return this.el(\"svg\", attrs);\n\t    };\n\t    /*\\\n\t     * Paper.mask\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n\t     **\n\t     = (object) the `mask` element\n\t     **\n\t    \\*/\n\t    proto.mask = function (first) {\n\t        var attr,\n\t            el = this.el(\"mask\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ptrn\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `pattern` element\n\t     **\n\t    \\*/\n\t    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n\t        if (is(x, \"object\")) {\n\t            var attr = x;\n\t        } else {\n\t            attr = {patternUnits: \"userSpaceOnUse\"};\n\t            if (x) {\n\t                attr.x = x;\n\t            }\n\t            if (y) {\n\t                attr.y = y;\n\t            }\n\t            if (width != null) {\n\t                attr.width = width;\n\t            }\n\t            if (height != null) {\n\t                attr.height = height;\n\t            }\n\t            if (vx != null && vy != null && vw != null && vh != null) {\n\t                attr.viewBox = [vx, vy, vw, vh];\n\t            } else {\n\t                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n\t            }\n\t        }\n\t        return this.el(\"pattern\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.use\n\t     [ method ]\n\t     **\n\t     * Creates a <use> element.\n\t     - id (string) @optional id of element to link\n\t     * or\n\t     - id (Element) @optional element to link\n\t     **\n\t     = (object) the `use` element\n\t     **\n\t    \\*/\n\t    proto.use = function (id) {\n\t        if (id != null) {\n\t            if (id instanceof Element) {\n\t                if (!id.attr(\"id\")) {\n\t                    id.attr({id: Snap._.id(id)});\n\t                }\n\t                id = id.attr(\"id\");\n\t            }\n\t            if (String(id).charAt() == \"#\") {\n\t                id = id.substring(1);\n\t            }\n\t            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n\t        } else {\n\t            return Element.prototype.use.call(this);\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.symbol\n\t     [ method ]\n\t     **\n\t     * Creates a <symbol> element.\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     = (object) the `symbol` element\n\t     **\n\t    \\*/\n\t    proto.symbol = function (vx, vy, vw, vh) {\n\t        var attr = {};\n\t        if (vx != null && vy != null && vw != null && vh != null) {\n\t            attr.viewBox = [vx, vy, vw, vh];\n\t        }\n\t\n\t        return this.el(\"symbol\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n\t     = (object) the `text` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.text(50, 50, \"Snap\");\n\t     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n\t     | // Text path usage\n\t     | t1.attr({textpath: \"M10,10L100,100\"});\n\t     | // or\n\t     | var pth = paper.path(\"M10,10L100,100\");\n\t     | t1.attr({textpath: pth});\n\t    \\*/\n\t    proto.text = function (x, y, text) {\n\t        var attr = {};\n\t        if (is(x, \"object\")) {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                text: text || \"\"\n\t            };\n\t        }\n\t        return this.el(\"text\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.line\n\t     [ method ]\n\t     **\n\t     * Draws a line\n\t     **\n\t     - x1 (number) x coordinate position of the start\n\t     - y1 (number) y coordinate position of the start\n\t     - x2 (number) x coordinate position of the end\n\t     - y2 (number) y coordinate position of the end\n\t     = (object) the `line` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.line(50, 50, 100, 100);\n\t    \\*/\n\t    proto.line = function (x1, y1, x2, y2) {\n\t        var attr = {};\n\t        if (is(x1, \"object\")) {\n\t            attr = x1;\n\t        } else if (x1 != null) {\n\t            attr = {\n\t                x1: x1,\n\t                x2: x2,\n\t                y1: y1,\n\t                y2: y2\n\t            };\n\t        }\n\t        return this.el(\"line\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polyline\n\t     [ method ]\n\t     **\n\t     * Draws a polyline\n\t     **\n\t     - points (array) array of points\n\t     * or\n\t     - varargs (…) points\n\t     = (object) the `polyline` element\n\t     **\n\t     > Usage\n\t     | var p1 = paper.polyline([10, 10, 100, 100]);\n\t     | var p2 = paper.polyline(10, 10, 100, 100);\n\t    \\*/\n\t    proto.polyline = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polyline\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polygon\n\t     [ method ]\n\t     **\n\t     * Draws a polygon. See @Paper.polyline\n\t    \\*/\n\t    proto.polygon = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polygon\", attr);\n\t    };\n\t    // gradients\n\t    (function () {\n\t        var $ = Snap._.$;\n\t        // gradients' helpers\n\t        function Gstops() {\n\t            return this.selectAll(\"stop\");\n\t        }\n\t        function GaddStop(color, offset) {\n\t            var stop = $(\"stop\"),\n\t                attr = {\n\t                    offset: +offset + \"%\"\n\t                };\n\t            color = Snap.color(color);\n\t            attr[\"stop-color\"] = color.hex;\n\t            if (color.opacity < 1) {\n\t                attr[\"stop-opacity\"] = color.opacity;\n\t            }\n\t            $(stop, attr);\n\t            this.node.appendChild(stop);\n\t            return this;\n\t        }\n\t        function GgetBBox() {\n\t            if (this.type == \"linearGradient\") {\n\t                var x1 = $(this.node, \"x1\") || 0,\n\t                    x2 = $(this.node, \"x2\") || 1,\n\t                    y1 = $(this.node, \"y1\") || 0,\n\t                    y2 = $(this.node, \"y2\") || 0;\n\t                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n\t            } else {\n\t                var cx = this.node.cx || .5,\n\t                    cy = this.node.cy || .5,\n\t                    r = this.node.r || 0;\n\t                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n\t            }\n\t        }\n\t        function gradient(defs, str) {\n\t            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n\t                el;\n\t            if (!grad) {\n\t                return null;\n\t            }\n\t            grad.params.unshift(defs);\n\t            if (grad.type.toLowerCase() == \"l\") {\n\t                el = gradientLinear.apply(0, grad.params);\n\t            } else {\n\t                el = gradientRadial.apply(0, grad.params);\n\t            }\n\t            if (grad.type != grad.type.toLowerCase()) {\n\t                $(el.node, {\n\t                    gradientUnits: \"userSpaceOnUse\"\n\t                });\n\t            }\n\t            var stops = grad.stops,\n\t                len = stops.length,\n\t                start = 0,\n\t                j = 0;\n\t            function seed(i, end) {\n\t                var step = (end - start) / (i - j);\n\t                for (var k = j; k < i; k++) {\n\t                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n\t                }\n\t                j = i;\n\t                start = end;\n\t            }\n\t            len--;\n\t            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n\t                seed(i, stops[i].offset);\n\t            }\n\t            stops[len].offset = stops[len].offset || 100;\n\t            seed(len, stops[len].offset);\n\t            for (i = 0; i <= len; i++) {\n\t                var stop = stops[i];\n\t                el.addStop(stop.color, stop.offset);\n\t            }\n\t            return el;\n\t        }\n\t        function gradientLinear(defs, x1, y1, x2, y2) {\n\t            var el = Snap._.make(\"linearGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (x1 != null) {\n\t                $(el.node, {\n\t                    x1: x1,\n\t                    y1: y1,\n\t                    x2: x2,\n\t                    y2: y2\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        function gradientRadial(defs, cx, cy, r, fx, fy) {\n\t            var el = Snap._.make(\"radialGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (cx != null) {\n\t                $(el.node, {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r: r\n\t                });\n\t            }\n\t            if (fx != null && fy != null) {\n\t                $(el.node, {\n\t                    fx: fx,\n\t                    fy: fy\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        /*\\\n\t         * Paper.gradient\n\t         [ method ]\n\t         **\n\t         * Creates a gradient element\n\t         **\n\t         - gradient (string) gradient descriptor\n\t         > Gradient Descriptor\n\t         * The gradient descriptor is an expression formatted as\n\t         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n\t         * either linear or radial.  The uppercase `L` or `R` letters\n\t         * indicate absolute coordinates offset from the SVG surface.\n\t         * Lowercase `l` or `r` letters indicate coordinates\n\t         * calculated relative to the element to which the gradient is\n\t         * applied.  Coordinates specify a linear gradient vector as\n\t         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n\t         * `r` and optional `fx`, `fy` specifying a focal point away\n\t         * from the center of the circle. Specify `<colors>` as a list\n\t         * of dash-separated CSS color values.  Each color may be\n\t         * followed by a custom offset value, separated with a colon\n\t         * character.\n\t         > Examples\n\t         * Linear gradient, relative from top-left corner to bottom-right\n\t         * corner, from black through red to white:\n\t         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n\t         * through red at 25% to white:\n\t         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n\t         * Radial gradient, relative from the center of the element with radius\n\t         * half the width, from black to white:\n\t         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n\t         * To apply the gradient:\n\t         | paper.circle(50, 50, 40).attr({\n\t         |     fill: g\n\t         | });\n\t         = (object) the `gradient` element\n\t        \\*/\n\t        proto.gradient = function (str) {\n\t            return gradient(this.defs, str);\n\t        };\n\t        proto.gradientLinear = function (x1, y1, x2, y2) {\n\t            return gradientLinear(this.defs, x1, y1, x2, y2);\n\t        };\n\t        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n\t            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n\t        };\n\t        /*\\\n\t         * Paper.toString\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper\n\t         = (string) SVG code for the @Paper\n\t        \\*/\n\t        proto.toString = function () {\n\t            var doc = this.node.ownerDocument,\n\t                f = doc.createDocumentFragment(),\n\t                d = doc.createElement(\"div\"),\n\t                svg = this.node.cloneNode(true),\n\t                res;\n\t            f.appendChild(d);\n\t            d.appendChild(svg);\n\t            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n\t            res = d.innerHTML;\n\t            f.removeChild(f.firstChild);\n\t            return res;\n\t        };\n\t        /*\\\n\t         * Paper.toDataURL\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper as Data URI string.\n\t         = (string) Data URI string\n\t        \\*/\n\t        proto.toDataURL = function () {\n\t            if (window && window.btoa) {\n\t                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n\t            }\n\t        };\n\t        /*\\\n\t         * Paper.clear\n\t         [ method ]\n\t         **\n\t         * Removes all child nodes of the paper, except <defs>.\n\t        \\*/\n\t        proto.clear = function () {\n\t            var node = this.node.firstChild,\n\t                next;\n\t            while (node) {\n\t                next = node.nextSibling;\n\t                if (node.tagName != \"defs\") {\n\t                    node.parentNode.removeChild(node);\n\t                } else {\n\t                    proto.clear.call({node: node});\n\t                }\n\t                node = next;\n\t            }\n\t        };\n\t    }());\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        clone = Snap._.clone,\n\t        has = \"hasOwnProperty\",\n\t        p2s = /,?([a-z]),?/gi,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        PI = math.PI,\n\t        mmin = math.min,\n\t        mmax = math.max,\n\t        pow = math.pow,\n\t        abs = math.abs;\n\t    function paths(ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    }\n\t    function box(x, y, width, height) {\n\t        if (x == null) {\n\t            x = y = width = height = 0;\n\t        }\n\t        if (y == null) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            w: width,\n\t            height: height,\n\t            h: height,\n\t            x2: x + width,\n\t            y2: y + height,\n\t            cx: x + width / 2,\n\t            cy: y + height / 2,\n\t            r1: math.min(width, height) / 2,\n\t            r2: math.max(width, height) / 2,\n\t            r0: math.sqrt(width * width + height * height) / 2,\n\t            path: rectPath(x, y, width, height),\n\t            vb: [x, y, width, height].join(\" \")\n\t        };\n\t    }\n\t    function toString() {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    }\n\t    function pathClone(pathArray) {\n\t        var res = clone(pathArray);\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n\t                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    }\n\t    function getLengthFactory(istotal, subpath) {\n\t        function O(val) {\n\t            return +(+val).toFixed(3);\n\t        }\n\t        return Snap._.cacher(function (path, length, onlystart) {\n\t            if (path instanceof Element) {\n\t                path = path.attr(\"d\");\n\t            }\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\n\t                                \"C\" + O(point.start.x),\n\t                                O(point.start.y),\n\t                                O(point.m.x),\n\t                                O(point.m.y),\n\t                                O(point.x),\n\t                                O(point.y)\n\t                            ];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\n\t                                \"M\" + O(point.x),\n\t                                O(point.y) + \"C\" + O(point.n.x),\n\t                                O(point.n.y),\n\t                                O(point.end.x),\n\t                                O(point.end.y),\n\t                                O(p[5]),\n\t                                O(p[6])\n\t                            ].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return point;\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            return point;\n\t        }, null, Snap._.clone);\n\t    }\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        // (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    }\n\t    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!Snap.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return box(\n\t            bbox.min.x,\n\t            bbox.min.y,\n\t            bbox.max.x - bbox.min.x,\n\t            bbox.max.y - bbox.min.y\n\t        );\n\t    }\n\t    function isPointInsideBBox(bbox, x, y) {\n\t        return  x >= bbox.x &&\n\t                x <= bbox.x + bbox.width &&\n\t                y >= bbox.y &&\n\t                y <= bbox.y + bbox.height;\n\t    }\n\t    function isBBoxIntersect(bbox1, bbox2) {\n\t        bbox1 = box(bbox1);\n\t        bbox2 = box(bbox2);\n\t        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n\t                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n\t                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    }\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = bezierBBox(bez1),\n\t            bbox2 = bezierBBox(bez2);\n\t        if (!isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = ~~(l1 / 8),\n\t            n2 = ~~(l2 / 8),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: t1,\n\t                                t2: t2\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function pathIntersection(path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    }\n\t    function pathIntersectionNumber(path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    }\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = path2curve(path1);\n\t        path2 = path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function isPointInsidePath(path, x, y) {\n\t        var bbox = pathBBox(path);\n\t        return isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    }\n\t    function pathBBox(path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return box();\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0, \n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X.concat(dim.min.x, dim.max.x);\n\t                Y = Y.concat(dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin.apply(0, X),\n\t            ymin = mmin.apply(0, Y),\n\t            xmax = mmax.apply(0, X),\n\t            ymax = mmax.apply(0, Y),\n\t            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    }\n\t    function rectPath(x, y, w, h, r) {\n\t        if (r) {\n\t            return [\n\t                [\"M\", +x + (+r), y],\n\t                [\"l\", w - r * 2, 0],\n\t                [\"a\", r, r, 0, 0, 1, r, r],\n\t                [\"l\", 0, h - r * 2],\n\t                [\"a\", r, r, 0, 0, 1, -r, r],\n\t                [\"l\", r * 2 - w, 0],\n\t                [\"a\", r, r, 0, 0, 1, -r, -r],\n\t                [\"l\", 0, r * 2 - h],\n\t                [\"a\", r, r, 0, 0, 1, r, -r],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function ellipsePath(x, y, rx, ry, a) {\n\t        if (a == null && ry == null) {\n\t            ry = rx;\n\t        }\n\t        x = +x;\n\t        y = +y;\n\t        rx = +rx;\n\t        ry = +ry;\n\t        if (a != null) {\n\t            var rad = Math.PI / 180,\n\t                x1 = x + rx * Math.cos(-ry * rad),\n\t                x2 = x + rx * Math.cos(-a * rad),\n\t                y1 = y + rx * Math.sin(-ry * rad),\n\t                y2 = y + rx * Math.sin(-a * rad),\n\t                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n\t        } else {\n\t            res = [\n\t                [\"M\", x, y],\n\t                [\"m\", 0, -ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    var unit2px = Snap._unit2px,\n\t        getPath = {\n\t        path: function (el) {\n\t            return el.attr(\"path\");\n\t        },\n\t        circle: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx, attr.cy, attr.r);\n\t        },\n\t        ellipse: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n\t        },\n\t        rect: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n\t        },\n\t        image: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n\t        },\n\t        line: function (el) {\n\t            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n\t        },\n\t        polyline: function (el) {\n\t            return \"M\" + el.attr(\"points\");\n\t        },\n\t        polygon: function (el) {\n\t            return \"M\" + el.attr(\"points\") + \"z\";\n\t        },\n\t        deflt: function (el) {\n\t            var bbox = el.node.getBBox();\n\t            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t        }\n\t    };\n\t    function pathToRelative(pathArray) {\n\t        var pth = paths(pathArray),\n\t            lowerCase = String.prototype.toLowerCase;\n\t        if (pth.rel) {\n\t            return pathClone(pth.rel);\n\t        }\n\t        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = pathArray[0][1];\n\t            y = pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res.push([\"M\", x, y]);\n\t        }\n\t        for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t            var r = res[i] = [],\n\t                pa = pathArray[i];\n\t            if (pa[0] != lowerCase.call(pa[0])) {\n\t                r[0] = lowerCase.call(pa[0]);\n\t                switch (r[0]) {\n\t                    case \"a\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +(pa[6] - x).toFixed(3);\n\t                        r[7] = +(pa[7] - y).toFixed(3);\n\t                        break;\n\t                    case \"v\":\n\t                        r[1] = +(pa[1] - y).toFixed(3);\n\t                        break;\n\t                    case \"m\":\n\t                        mx = pa[1];\n\t                        my = pa[2];\n\t                    default:\n\t                        for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                        }\n\t                }\n\t            } else {\n\t                r = res[i] = [];\n\t                if (pa[0] == \"m\") {\n\t                    mx = pa[1] + x;\n\t                    my = pa[2] + y;\n\t                }\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    res[i][k] = pa[k];\n\t                }\n\t            }\n\t            var len = res[i].length;\n\t            switch (res[i][0]) {\n\t                case \"z\":\n\t                    x = mx;\n\t                    y = my;\n\t                    break;\n\t                case \"h\":\n\t                    x += +res[i][len - 1];\n\t                    break;\n\t                case \"v\":\n\t                    y += +res[i][len - 1];\n\t                    break;\n\t                default:\n\t                    x += +res[i][len - 2];\n\t                    y += +res[i][len - 1];\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.rel = pathClone(res);\n\t        return res;\n\t    }\n\t    function pathToAbsolute(pathArray) {\n\t        var pth = paths(pathArray);\n\t        if (pth.abs) {\n\t            return pathClone(pth.abs);\n\t        }\n\t        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        if (!pathArray || !pathArray.length) {\n\t            return [[\"M\", 0, 0]];\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0,\n\t            pa0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = +pathArray[0][1];\n\t            y = +pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res[0] = [\"M\", x, y];\n\t        }\n\t        var crz = pathArray.length == 3 &&\n\t            pathArray[0][0] == \"M\" &&\n\t            pathArray[1][0].toUpperCase() == \"R\" &&\n\t            pathArray[2][0].toUpperCase() == \"Z\";\n\t        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t            res.push(r = []);\n\t            pa = pathArray[i];\n\t            pa0 = pa[0];\n\t            if (pa0 != pa0.toUpperCase()) {\n\t                r[0] = pa0.toUpperCase();\n\t                switch (r[0]) {\n\t                    case \"A\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +pa[6] + x;\n\t                        r[7] = +pa[7] + y;\n\t                        break;\n\t                    case \"V\":\n\t                        r[1] = +pa[1] + y;\n\t                        break;\n\t                    case \"H\":\n\t                        r[1] = +pa[1] + x;\n\t                        break;\n\t                    case \"R\":\n\t                        var dots = [x, y].concat(pa.slice(1));\n\t                        for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                            dots[j] = +dots[j] + x;\n\t                            dots[++j] = +dots[j] + y;\n\t                        }\n\t                        res.pop();\n\t                        res = res.concat(catmullRom2bezier(dots, crz));\n\t                        break;\n\t                    case \"O\":\n\t                        res.pop();\n\t                        dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                        dots.push(dots[0]);\n\t                        res = res.concat(dots);\n\t                        break;\n\t                    case \"U\":\n\t                        res.pop();\n\t                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                        break;\n\t                    case \"M\":\n\t                        mx = +pa[1] + x;\n\t                        my = +pa[2] + y;\n\t                    default:\n\t                        for (j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                        }\n\t                }\n\t            } else if (pa0 == \"R\") {\n\t                dots = [x, y].concat(pa.slice(1));\n\t                res.pop();\n\t                res = res.concat(catmullRom2bezier(dots, crz));\n\t                r = [\"R\"].concat(pa.slice(-2));\n\t            } else if (pa0 == \"O\") {\n\t                res.pop();\n\t                dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                dots.push(dots[0]);\n\t                res = res.concat(dots);\n\t            } else if (pa0 == \"U\") {\n\t                res.pop();\n\t                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t            } else {\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    r[k] = pa[k];\n\t                }\n\t            }\n\t            pa0 = pa0.toUpperCase();\n\t            if (pa0 != \"O\") {\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = +mx;\n\t                        y = +my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.abs = pathClone(res);\n\t        return res;\n\t    }\n\t    function l2c(x1, y1, x2, y2) {\n\t        return [x1, y1, x2, y2, x2, y2];\n\t    }\n\t    function q2c(x1, y1, ax, ay, x2, y2) {\n\t        var _13 = 1 / 3,\n\t            _23 = 2 / 3;\n\t        return [\n\t                _13 * x1 + _23 * ax,\n\t                _13 * y1 + _23 * ay,\n\t                _13 * x2 + _23 * ax,\n\t                _13 * y2 + _23 * ay,\n\t                x2,\n\t                y2\n\t            ];\n\t    }\n\t    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t        // for more information of where this math came from visit:\n\t        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t        var _120 = PI * 120 / 180,\n\t            rad = PI / 180 * (+angle || 0),\n\t            res = [],\n\t            xy,\n\t            rotate = Snap._.cacher(function (x, y, rad) {\n\t                var X = x * math.cos(rad) - y * math.sin(rad),\n\t                    Y = x * math.sin(rad) + y * math.cos(rad);\n\t                return {x: X, y: Y};\n\t            });\n\t        if (!recursive) {\n\t            xy = rotate(x1, y1, -rad);\n\t            x1 = xy.x;\n\t            y1 = xy.y;\n\t            xy = rotate(x2, y2, -rad);\n\t            x2 = xy.x;\n\t            y2 = xy.y;\n\t            var cos = math.cos(PI / 180 * angle),\n\t                sin = math.sin(PI / 180 * angle),\n\t                x = (x1 - x2) / 2,\n\t                y = (y1 - y2) / 2;\n\t            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t            if (h > 1) {\n\t                h = math.sqrt(h);\n\t                rx = h * rx;\n\t                ry = h * ry;\n\t            }\n\t            var rx2 = rx * rx,\n\t                ry2 = ry * ry,\n\t                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\t\n\t            f1 = x1 < cx ? PI - f1 : f1;\n\t            f2 = x2 < cx ? PI - f2 : f2;\n\t            f1 < 0 && (f1 = PI * 2 + f1);\n\t            f2 < 0 && (f2 = PI * 2 + f2);\n\t            if (sweep_flag && f1 > f2) {\n\t                f1 = f1 - PI * 2;\n\t            }\n\t            if (!sweep_flag && f2 > f1) {\n\t                f2 = f2 - PI * 2;\n\t            }\n\t        } else {\n\t            f1 = recursive[0];\n\t            f2 = recursive[1];\n\t            cx = recursive[2];\n\t            cy = recursive[3];\n\t        }\n\t        var df = f2 - f1;\n\t        if (abs(df) > _120) {\n\t            var f2old = f2,\n\t                x2old = x2,\n\t                y2old = y2;\n\t            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t            x2 = cx + rx * math.cos(f2);\n\t            y2 = cy + ry * math.sin(f2);\n\t            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t        }\n\t        df = f2 - f1;\n\t        var c1 = math.cos(f1),\n\t            s1 = math.sin(f1),\n\t            c2 = math.cos(f2),\n\t            s2 = math.sin(f2),\n\t            t = math.tan(df / 4),\n\t            hx = 4 / 3 * rx * t,\n\t            hy = 4 / 3 * ry * t,\n\t            m1 = [x1, y1],\n\t            m2 = [x1 + hx * s1, y1 - hy * c1],\n\t            m3 = [x2 + hx * s2, y2 - hy * c2],\n\t            m4 = [x2, y2];\n\t        m2[0] = 2 * m1[0] - m2[0];\n\t        m2[1] = 2 * m1[1] - m2[1];\n\t        if (recursive) {\n\t            return [m2, m3, m4].concat(res);\n\t        } else {\n\t            res = [m2, m3, m4].concat(res).join().split(\",\");\n\t            var newres = [];\n\t            for (var i = 0, ii = res.length; i < ii; i++) {\n\t                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t            }\n\t            return newres;\n\t        }\n\t    }\n\t    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t;\n\t        return {\n\t            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t        };\n\t    }\n\t    \n\t    // Returns bounding box of cubic bezier curve.\n\t    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t    // Original version: NISHIO Hirokazu\n\t    // Modifications: https://github.com/timo22345\n\t    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t        var tvalues = [],\n\t            bounds = [[], []],\n\t            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\t        for (var i = 0; i < 2; ++i) {\n\t            if (i == 0) {\n\t                b = 6 * x0 - 12 * x1 + 6 * x2;\n\t                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t                c = 3 * x1 - 3 * x0;\n\t            } else {\n\t                b = 6 * y0 - 12 * y1 + 6 * y2;\n\t                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t                c = 3 * y1 - 3 * y0;\n\t            }\n\t            if (abs(a) < 1e-12) {\n\t                if (abs(b) < 1e-12) {\n\t                    continue;\n\t                }\n\t                t = -c / b;\n\t                if (0 < t && t < 1) {\n\t                    tvalues.push(t);\n\t                }\n\t                continue;\n\t            }\n\t            b2ac = b * b - 4 * c * a;\n\t            sqrtb2ac = math.sqrt(b2ac);\n\t            if (b2ac < 0) {\n\t                continue;\n\t            }\n\t            t1 = (-b + sqrtb2ac) / (2 * a);\n\t            if (0 < t1 && t1 < 1) {\n\t                tvalues.push(t1);\n\t            }\n\t            t2 = (-b - sqrtb2ac) / (2 * a);\n\t            if (0 < t2 && t2 < 1) {\n\t                tvalues.push(t2);\n\t            }\n\t        }\n\t\n\t        var x, y, j = tvalues.length,\n\t            jlen = j,\n\t            mt;\n\t        while (j--) {\n\t            t = tvalues[j];\n\t            mt = 1 - t;\n\t            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t        }\n\t\n\t        bounds[0][jlen] = x0;\n\t        bounds[1][jlen] = y0;\n\t        bounds[0][jlen + 1] = x3;\n\t        bounds[1][jlen + 1] = y3;\n\t        bounds[0].length = bounds[1].length = jlen + 2;\n\t\n\t\n\t        return {\n\t          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n\t          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n\t        };\n\t    }\n\t\n\t    function path2curve(path, path2) {\n\t        var pth = !path2 && paths(path);\n\t        if (!path2 && pth.curve) {\n\t            return pathClone(pth.curve);\n\t        }\n\t        var p = pathToAbsolute(path),\n\t            p2 = path2 && pathToAbsolute(path2),\n\t            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            processPath = function (path, d, pcom) {\n\t                var nx, ny;\n\t                if (!path) {\n\t                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                }\n\t                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n\t                switch (path[0]) {\n\t                    case \"M\":\n\t                        d.X = path[1];\n\t                        d.Y = path[2];\n\t                        break;\n\t                    case \"A\":\n\t                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t                        break;\n\t                    case \"S\":\n\t                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                            nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                        }\n\t                        else {                            // or some else or nothing\n\t                            nx = d.x;\n\t                            ny = d.y;\n\t                        }\n\t                        path = [\"C\", nx, ny].concat(path.slice(1));\n\t                        break;\n\t                    case \"T\":\n\t                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                        }\n\t                        else {                            // or something else or nothing\n\t                            d.qx = d.x;\n\t                            d.qy = d.y;\n\t                        }\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                        break;\n\t                    case \"Q\":\n\t                        d.qx = path[1];\n\t                        d.qy = path[2];\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                        break;\n\t                    case \"L\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n\t                        break;\n\t                    case \"H\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n\t                        break;\n\t                    case \"V\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n\t                        break;\n\t                    case \"Z\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n\t                        break;\n\t                }\n\t                return path;\n\t            },\n\t            fixArc = function (pp, i) {\n\t                if (pp[i].length > 7) {\n\t                    pp[i].shift();\n\t                    var pi = pp[i];\n\t                    while (pi.length) {\n\t                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\t                        p2 && (pcoms2[i] = \"A\"); // the same as above\n\t                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n\t                    }\n\t                    pp.splice(i, 1);\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            fixM = function (path1, path2, a1, a2, i) {\n\t                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                    a1.bx = 0;\n\t                    a1.by = 0;\n\t                    a1.x = path1[i][1];\n\t                    a1.y = path1[i][2];\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            pcoms1 = [], // path commands of original path p\n\t            pcoms2 = [], // path commands of original path p2\n\t            pfirst = \"\", // temporary holder for original path command\n\t            pcom = \"\"; // holder for previous path command of original path\n\t        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t            p[i] && (pfirst = p[i][0]); // save current path command\n\t\n\t            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t            {\n\t                pcoms1[i] = pfirst; // Save current path command\n\t                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n\t            }\n\t            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\t\n\t            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t            // which may produce multiple C:s\n\t            // so we have to make sure that C is also C in original path\n\t\n\t            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\t\n\t            if (p2) { // the same procedures is done to p2\n\t                p2[i] && (pfirst = p2[i][0]);\n\t                if (pfirst != \"C\") {\n\t                    pcoms2[i] = pfirst;\n\t                    i && (pcom = pcoms2[i - 1]);\n\t                }\n\t                p2[i] = processPath(p2[i], attrs2, pcom);\n\t\n\t                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n\t                    pcoms2[i] = \"C\";\n\t                }\n\t\n\t                fixArc(p2, i);\n\t            }\n\t            fixM(p, p2, attrs, attrs2, i);\n\t            fixM(p2, p, attrs2, attrs, i);\n\t            var seg = p[i],\n\t                seg2 = p2 && p2[i],\n\t                seglen = seg.length,\n\t                seg2len = p2 && seg2.length;\n\t            attrs.x = seg[seglen - 2];\n\t            attrs.y = seg[seglen - 1];\n\t            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t            attrs2.x = p2 && seg2[seg2len - 2];\n\t            attrs2.y = p2 && seg2[seg2len - 1];\n\t        }\n\t        if (!p2) {\n\t            pth.curve = pathClone(p);\n\t        }\n\t        return p2 ? [p, p2] : p;\n\t    }\n\t    function mapPath(path, matrix) {\n\t        if (!matrix) {\n\t            return path;\n\t        }\n\t        var x, y, i, j, ii, jj, pathi;\n\t        path = path2curve(path);\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            pathi = path[i];\n\t            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                x = matrix.x(pathi[j], pathi[j + 1]);\n\t                y = matrix.y(pathi[j], pathi[j + 1]);\n\t                pathi[j] = x;\n\t                pathi[j + 1] = y;\n\t            }\n\t        }\n\t        return path;\n\t    }\n\t\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\t\n\t        return d;\n\t    }\n\t\n\t    // export\n\t    Snap.path = paths;\n\t\n\t    /*\\\n\t     * Snap.path.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the given path in pixels\n\t     **\n\t     - path (string) SVG path string\n\t     **\n\t     = (number) length\n\t    \\*/\n\t    Snap.path.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Snap.path.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns the coordinates of the point located at the given length along the given path\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    Snap.path.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Snap.path.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns the subpath of a given path between given start and end lengths\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    Snap.path.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the path in pixels (only works for `path` elements)\n\t     = (number) length\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\t    };\n\t    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n\t     **\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        return getPointAtLength(this.attr(\"d\"), length);\n\t    };\n\t    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n\t     **\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n\t    };\n\t    Snap._.box = box;\n\t    /*\\\n\t     * Snap.path.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds dot coordinates on the given cubic beziér curve at the given t\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point,\n\t     o     y: (number) y coordinate of the point,\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor,\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     },\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor,\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     },\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve,\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     },\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve,\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     },\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    Snap.path.findDotsAtSegment = findDotsAtSegment;\n\t    /*\\\n\t     * Snap.path.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given cubic beziér curve\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for beziér curve\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.bezierBBox = bezierBBox;\n\t    /*\\\n\t     * Snap.path.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding box\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point is inside\n\t    \\*/\n\t    Snap.path.isPointInsideBBox = isPointInsideBBox;\n\t    Snap.closest = function (x, y, X, Y) {\n\t        var r = 100,\n\t            b = box(x - r / 2, y - r / 2, r, r),\n\t            inside = [],\n\t            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n\t                return {\n\t                    x: X[i].x,\n\t                    y: X[i].y\n\t                };\n\t            } : function (i) {\n\t                return {\n\t                    x: X[i],\n\t                    y: Y[i]\n\t                };\n\t            },\n\t            found = 0;\n\t        while (r <= 1e6 && !found) {\n\t            for (var i = 0, ii = X.length; i < ii; i++) {\n\t                var xy = getter(i);\n\t                if (isPointInsideBBox(b, xy.x, xy.y)) {\n\t                    found++;\n\t                    inside.push(xy);\n\t                    break;\n\t                }\n\t            }\n\t            if (!found) {\n\t                r *= 2;\n\t                b = box(x - r / 2, y - r / 2, r, r)\n\t            }\n\t        }\n\t        if (r == 1e6) {\n\t            return;\n\t        }\n\t        var len = Infinity,\n\t            res;\n\t        for (i = 0, ii = inside.length; i < ii; i++) {\n\t            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\t            if (len > l) {\n\t                len = l;\n\t                inside[i].len = l;\n\t                res = inside[i];\n\t            }\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.path.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if bounding boxes intersect\n\t    \\*/\n\t    Snap.path.isBBoxIntersect = isBBoxIntersect;\n\t    /*\\\n\t     * Snap.path.intersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point,\n\t     o         y: (number) y coordinate of the point,\n\t     o         t1: (number) t value for segment of path1,\n\t     o         t2: (number) t value for segment of path2,\n\t     o         segment1: (number) order number for segment of path1,\n\t     o         segment2: (number) order number for segment of path2,\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    Snap.path.intersection = pathIntersection;\n\t    Snap.path.intersectionNumber = pathIntersectionNumber;\n\t    /*\\\n\t     * Snap.path.isPointInside\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     *\n\t     * Note: fill mode doesn’t affect the result of this method.\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) `true` if point is inside the path\n\t    \\*/\n\t    Snap.path.isPointInside = isPointInsidePath;\n\t    /*\\\n\t     * Snap.path.getBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given path\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.getBBox = pathBBox;\n\t    Snap.path.get = getPath;\n\t    /*\\\n\t     * Snap.path.toRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into relative values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toRelative = pathToRelative;\n\t    /*\\\n\t     * Snap.path.toAbsolute\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into absolute values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toAbsolute = pathToAbsolute;\n\t    /*\\\n\t     * Snap.path.toCubic\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic beziér curves\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments\n\t    \\*/\n\t    Snap.path.toCubic = path2curve;\n\t    /*\\\n\t     * Snap.path.map\n\t     [ method ]\n\t     **\n\t     * Transform the path string with the given matrix\n\t     - path (string) path string\n\t     - matrix (object) see @Matrix\n\t     = (string) transformed path string\n\t    \\*/\n\t    Snap.path.map = mapPath;\n\t    Snap.path.toString = toString;\n\t    Snap.path.clone = pathClone;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var mmax = Math.max,\n\t        mmin = Math.min;\n\t\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t\tthis.bindings = {};\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i]) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set\n\t     *\n\t     * If the function returns `false`, the loop stops running.\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.animate\n\t     [ method ]\n\t     **\n\t     * Animates each element in set in sync.\n\t     *\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     * or\n\t     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n\t     > Usage\n\t     | // animate all elements in set to radius 10\n\t     | set.animate({r: 10}, 500, mina.easein);\n\t     | // or\n\t     | // animate first element to radius 10, but second to radius 20 and in different time\n\t     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n\t     = (Element) the current element\n\t    \\*/\n\t    setproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Snap._.Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var args = arguments;\n\t        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n\t            var each = true;\n\t        }\n\t        var begin,\n\t            handler = function () {\n\t                if (begin) {\n\t                    this.b = begin;\n\t                } else {\n\t                    begin = this.b;\n\t                }\n\t            },\n\t            cb = 0,\n\t            set = this,\n\t            callbacker = callback && function () {\n\t                if (++cb == set.length) {\n\t                    callback.call(this);\n\t                }\n\t            };\n\t        return this.forEach(function (el, i) {\n\t            eve.once(\"snap.animcreated.\" + el.id, handler);\n\t            if (each) {\n\t                args[i] && el.animate.apply(el, args[i]);\n\t            } else {\n\t                el.animate(attrs, ms, easing, callbacker);\n\t            }\n\t        });\n\t    };\n\t    setproto.remove = function () {\n\t        while (this.length) {\n\t            this.pop().remove();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.bind\n\t     [ method ]\n\t     **\n\t     * Specifies how to handle a specific attribute when applied\n\t     * to a set.\n\t     *\n\t     **\n\t     - attr (string) attribute name\n\t     - callback (function) function to run\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     - eattr (string) attribute on the element to bind the attribute to\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.bind = function (attr, a, b) {\n\t        var data = {};\n\t        if (typeof a == \"function\") {\n\t            this.bindings[attr] = a;\n\t        } else {\n\t            var aname = b || attr;\n\t            this.bindings[attr] = function (v) {\n\t                data[aname] = v;\n\t                a.attr(data);\n\t            };\n\t        }\n\t        return this;\n\t    };\n\t    setproto.attr = function (value) {\n\t        var unbound = {};\n\t        for (var k in value) {\n\t            if (this.bindings[k]) {\n\t                this.bindings[k](value[k]);\n\t            } else {\n\t                unbound[k] = value[k];\n\t            }\n\t        }\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            this.items[i].attr(unbound);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes range of elements from the set\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found and removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin.apply(0, x);\n\t        y = mmin.apply(0, y);\n\t        x2 = mmax.apply(0, x2);\n\t        y2 = mmax.apply(0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y,\n\t            cx: x + (x2 - x) / 2,\n\t            cy: y + (y2 - y) / 2\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = new Set;\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Snap\\u2018s set\";\n\t    };\n\t    setproto.type = \"set\";\n\t    // export\n\t    Snap.Set = Set;\n\t    Snap.set = function () {\n\t        var set = new Set;\n\t        if (arguments.length) {\n\t            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return set;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var names = {},\n\t        reUnit = /[a-z]+$/i,\n\t        Str = String;\n\t    names.stroke = names.fill = \"colour\";\n\t    function getEmpty(item) {\n\t        var l = item[0];\n\t        switch (l.toLowerCase()) {\n\t            case \"t\": return [l, 0, 0];\n\t            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t            case \"r\": if (item.length == 4) {\n\t                return [l, 0, item[2], item[3]];\n\t            } else {\n\t                return [l, 0];\n\t            }\n\t            case \"s\": if (item.length == 5) {\n\t                return [l, 1, 1, item[3], item[4]];\n\t            } else if (item.length == 3) {\n\t                return [l, 1, 1];\n\t            } else {\n\t                return [l, 1];\n\t            }\n\t        }\n\t    }\n\t    function equaliseTransform(t1, t2, getBBox) {\n\t        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t        t1 = Snap.parseTransformString(t1) || [];\n\t        t2 = Snap.parseTransformString(t2) || [];\n\t        var maxlength = Math.max(t1.length, t2.length),\n\t            from = [],\n\t            to = [],\n\t            i = 0, j, jj,\n\t            tt1, tt2;\n\t        for (; i < maxlength; i++) {\n\t            tt1 = t1[i] || getEmpty(t2[i]);\n\t            tt2 = t2[i] || getEmpty(tt1);\n\t            if ((tt1[0] != tt2[0]) ||\n\t                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                ) {\n\t                    t1 = Snap._.transform2matrix(t1, getBBox());\n\t                    t2 = Snap._.transform2matrix(t2, getBBox());\n\t                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n\t                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n\t                    break;\n\t            }\n\t            from[i] = [];\n\t            to[i] = [];\n\t            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n\t                j in tt1 && (from[i][j] = tt1[j]);\n\t                j in tt2 && (to[i][j] = tt2[j]);\n\t            }\n\t        }\n\t        return {\n\t            from: path2array(from),\n\t            to: path2array(to),\n\t            f: getPath(from)\n\t        };\n\t    }\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    function getViewBox(val) {\n\t        return val.join(\" \");\n\t    }\n\t    function getColour(clr) {\n\t        return Snap.rgb(clr[0], clr[1], clr[2]);\n\t    }\n\t    function getPath(path) {\n\t        var k = 0, i, ii, j, jj, out, a, b = [];\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            out = \"[\";\n\t            a = ['\"' + path[i][0] + '\"'];\n\t            for (j = 1, jj = path[i].length; j < jj; j++) {\n\t                a[j] = \"val[\" + (k++) + \"]\";\n\t            }\n\t            out += a + \"]\";\n\t            b[i] = out;\n\t        }\n\t        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n\t    }\n\t    function path2array(path) {\n\t        var out = [];\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            for (var j = 1, jj = path[i].length; j < jj; j++) {\n\t                out.push(path[i][j]);\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    function isNumeric(obj) {\n\t        return isFinite(parseFloat(obj));\n\t    }\n\t    function arrayEqual(arr1, arr2) {\n\t        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n\t            return false;\n\t        }\n\t        return arr1.toString() == arr2.toString();\n\t    }\n\t    Element.prototype.equal = function (name, b) {\n\t        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n\t    };\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this;\n\t        if (isNumeric(a) && isNumeric(b)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getNumber\n\t            };\n\t        }\n\t        if (names[name] == \"colour\") {\n\t            A = Snap.color(a);\n\t            B = Snap.color(b);\n\t            return {\n\t                from: [A.r, A.g, A.b, A.opacity],\n\t                to: [B.r, B.g, B.b, B.opacity],\n\t                f: getColour\n\t            };\n\t        }\n\t        if (name == \"viewBox\") {\n\t            A = this.attr(name).vb.split(\" \").map(Number);\n\t            B = b.split(\" \").map(Number);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: getViewBox\n\t            };\n\t        }\n\t        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n\t            if (b instanceof Snap.Matrix) {\n\t                b = b.toTransformString();\n\t            }\n\t            if (!Snap._.rgTransform.test(b)) {\n\t                b = Snap._.svgTransform2string(b);\n\t            }\n\t            return equaliseTransform(a, b, function () {\n\t                return el.getBBox(1);\n\t            });\n\t        }\n\t        if (name == \"d\" || name == \"path\") {\n\t            A = Snap.path.toCubic(a, b);\n\t            return {\n\t                from: path2array(A[0]),\n\t                to: path2array(A[1]),\n\t                f: getPath(A[0])\n\t            };\n\t        }\n\t        if (name == \"points\") {\n\t            A = Str(a).split(Snap._.separator);\n\t            B = Str(b).split(Snap._.separator);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: function (val) { return val; }\n\t            };\n\t        }\n\t        var aUnit = a.match(reUnit),\n\t            bUnit = Str(b).match(reUnit);\n\t        if (aUnit && arrayEqual(aUnit, bUnit)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getUnit(aUnit)\n\t            };\n\t        } else {\n\t            return {\n\t                from: this.asPX(name),\n\t                to: this.asPX(name, b),\n\t                f: getNumber\n\t            };\n\t        }\n\t    });\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t    has = \"hasOwnProperty\",\n\t    supportsTouch = \"createTouch\" in glob.doc,\n\t    events = [\n\t        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n\t        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n\t        \"touchcancel\"\n\t    ],\n\t    touchMap = {\n\t        mousedown: \"touchstart\",\n\t        mousemove: \"touchmove\",\n\t        mouseup: \"touchend\"\n\t    },\n\t    getScroll = function (xy, el) {\n\t        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n\t            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n\t        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n\t    },\n\t    preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    addEvent = function (obj, type, fn, element) {\n\t        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n\t            f = function (e) {\n\t                var scrollY = getScroll(\"y\", element),\n\t                    scrollX = getScroll(\"x\", element);\n\t                if (supportsTouch && touchMap[has](type)) {\n\t                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n\t                            var olde = e;\n\t                            e = e.targetTouches[i];\n\t                            e.originalEvent = olde;\n\t                            e.preventDefault = preventTouch;\n\t                            e.stopPropagation = stopTouch;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                var x = e.clientX + scrollX,\n\t                    y = e.clientY + scrollY;\n\t                return fn.call(element, e, x, y);\n\t            };\n\t\n\t        if (type !== realName) {\n\t            obj.addEventListener(type, f, false);\n\t        }\n\t\n\t        obj.addEventListener(realName, f, false);\n\t\n\t        return function () {\n\t            if (type !== realName) {\n\t                obj.removeEventListener(type, f, false);\n\t            }\n\t\n\t            obj.removeEventListener(realName, f, false);\n\t            return true;\n\t        };\n\t    },\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = getScroll(\"y\"),\n\t            scrollX = getScroll(\"x\"),\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch) {\n\t                var i = e.touches && e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            // glob.win.opera && parent.removeChild(node);\n\t            // node.style.display = \"none\";\n\t            // o = dragi.el.paper.getElementByPoint(x, y);\n\t            // node.style.display = display;\n\t            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t            eve.off(\"snap.drag.*.\" + dragi.el.id);\n\t        }\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds a click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes a click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds a double click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes a double click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds a mousedown event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes a mousedown event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds a mousemove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes a mousemove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds a mouseout event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes a mouseout event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds a mouseover event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes a mouseover event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds a mouseup event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes a mouseup event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds a touchstart event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes a touchstart event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds a touchmove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes a touchmove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds a touchend event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes a touchend event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds a touchcancel event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes a touchcancel event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (Snap.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({\n\t                        name: eventName,\n\t                        f: fn,\n\t                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n\t                    });\n\t                } else {\n\t                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n\t                        try {\n\t                            this.events[i].f.call(this);\n\t                        } catch (e) {}\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            Snap[\"un\" + eventName] =\n\t            elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--) if (events[l].name == eventName &&\n\t                               (events[l].f == fn || !fn)) {\n\t                    events[l].unbind();\n\t                    events.splice(l, 1);\n\t                    !events.length && delete this.events;\n\t                    return this;\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds hover event handlers to the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes hover event handlers from the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n\t    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n\t    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n\t    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for an element's drag gesture\n\t     **\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n\t     * `drag.over.<id>` fires as well.\n\t     *\n\t     * Start event and start handler are called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler are called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler are called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        var el = this;\n\t        if (!arguments.length) {\n\t            var origTransform;\n\t            return el.drag(function (dx, dy) {\n\t                this.attr({\n\t                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n\t                });\n\t            }, function () {\n\t                origTransform = this.transform().local;\n\t            });\n\t        }\n\t        function start(e, x, y) {\n\t            (e.originalEvent || e).preventDefault();\n\t            el._drag.x = x;\n\t            el._drag.y = y;\n\t            el._drag.id = e.identifier;\n\t            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n\t            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n\t            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n\t            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n\t        }\n\t        function init(e, x, y) {\n\t            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n\t        }\n\t        eve.on(\"snap.draginit.\" + el.id, start);\n\t        el._drag = {};\n\t        draggable.push({el: el, start: start, init: init});\n\t        el.mousedown(init);\n\t        return el;\n\t    };\n\t    /*\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    // elproto.onDragOver = function (f) {\n\t    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n\t    // };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from the given element\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].init);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"snap.drag.*.\" + this.id);\n\t            eve.unbind(\"snap.draginit.\" + this.id);\n\t        }\n\t        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        pproto = Paper.prototype,\n\t        rgurl = /^\\s*url\\((.+)\\)/,\n\t        Str = String,\n\t        $ = Snap._.$;\n\t    Snap.filter = {};\n\t    /*\\\n\t     * Paper.filter\n\t     [ method ]\n\t     **\n\t     * Creates a `<filter>` element\n\t     **\n\t     - filstr (string) SVG fragment of filter provided as a string\n\t     = (object) @Element\n\t     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n\t     > Usage\n\t     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    pproto.filter = function (filstr) {\n\t        var paper = this;\n\t        if (paper.type != \"svg\") {\n\t            paper = paper.paper;\n\t        }\n\t        var f = Snap.parse(Str(filstr)),\n\t            id = Snap._.id(),\n\t            width = paper.node.offsetWidth,\n\t            height = paper.node.offsetHeight,\n\t            filter = $(\"filter\");\n\t        $(filter, {\n\t            id: id,\n\t            filterUnits: \"userSpaceOnUse\"\n\t        });\n\t        filter.appendChild(f.node);\n\t        paper.defs.appendChild(filter);\n\t        return new Element(filter);\n\t    };\n\t    \n\t    eve.on(\"snap.util.getattr.filter\", function () {\n\t        eve.stop();\n\t        var p = $(this.node, \"filter\");\n\t        if (p) {\n\t            var match = Str(p).match(rgurl);\n\t            return match && Snap.select(match[1]);\n\t        }\n\t    });\n\t    eve.on(\"snap.util.attr.filter\", function (value) {\n\t        if (value instanceof Element && value.type == \"filter\") {\n\t            eve.stop();\n\t            var id = value.node.id;\n\t            if (!id) {\n\t                $(value.node, {id: value.id});\n\t                id = value.id;\n\t            }\n\t            $(this.node, {\n\t                filter: Snap.url(id)\n\t            });\n\t        }\n\t        if (!value || value == \"none\") {\n\t            eve.stop();\n\t            this.node.removeAttribute(\"filter\");\n\t        }\n\t    });\n\t    /*\\\n\t     * Snap.filter.blur\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the blur filter\n\t     **\n\t     - x (number) amount of horizontal blur, in pixels\n\t     - y (number) #optional amount of vertical blur, in pixels\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.blur(5, 10)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.blur = function (x, y) {\n\t        if (x == null) {\n\t            x = 2;\n\t        }\n\t        var def = y == null ? x : [x, y];\n\t        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n\t            def: def\n\t        });\n\t    };\n\t    Snap.filter.blur.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.shadow\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the shadow filter\n\t     **\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - blur (number) #optional amount of blur\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * which makes blur default to `4`. Or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n\t        if (typeof blur == \"string\") {\n\t            color = blur;\n\t            opacity = color;\n\t            blur = 4;\n\t        }\n\t        if (typeof color != \"string\") {\n\t            opacity = color;\n\t            color = \"#000\";\n\t        }\n\t        color = color || \"#000\";\n\t        if (blur == null) {\n\t            blur = 4;\n\t        }\n\t        if (opacity == null) {\n\t            opacity = 1;\n\t        }\n\t        if (dx == null) {\n\t            dx = 0;\n\t            dy = 2;\n\t        }\n\t        if (dy == null) {\n\t            dy = dx;\n\t        }\n\t        color = Snap.color(color);\n\t        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n\t            color: color,\n\t            dx: dx,\n\t            dy: dy,\n\t            blur: blur,\n\t            opacity: opacity\n\t        });\n\t    };\n\t    Snap.filter.shadow.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.grayscale\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the grayscale filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.grayscale = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.2126 + 0.7874 * (1 - amount),\n\t            b: 0.7152 - 0.7152 * (1 - amount),\n\t            c: 0.0722 - 0.0722 * (1 - amount),\n\t            d: 0.2126 - 0.2126 * (1 - amount),\n\t            e: 0.7152 + 0.2848 * (1 - amount),\n\t            f: 0.0722 - 0.0722 * (1 - amount),\n\t            g: 0.2126 - 0.2126 * (1 - amount),\n\t            h: 0.0722 + 0.9278 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.grayscale.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.sepia\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the sepia filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.sepia = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.393 + 0.607 * (1 - amount),\n\t            b: 0.769 - 0.769 * (1 - amount),\n\t            c: 0.189 - 0.189 * (1 - amount),\n\t            d: 0.349 - 0.349 * (1 - amount),\n\t            e: 0.686 + 0.314 * (1 - amount),\n\t            f: 0.168 - 0.168 * (1 - amount),\n\t            g: 0.272 - 0.272 * (1 - amount),\n\t            h: 0.534 - 0.534 * (1 - amount),\n\t            i: 0.131 + 0.869 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.sepia.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.saturate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the saturate filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.saturate = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n\t            amount: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.saturate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.hueRotate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the hue-rotate filter\n\t     **\n\t     - angle (number) angle of rotation\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.hueRotate = function (angle) {\n\t        angle = angle || 0;\n\t        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n\t            angle: angle\n\t        });\n\t    };\n\t    Snap.filter.hueRotate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.invert\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the invert filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.invert = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.invert.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.brightness\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the brightness filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.brightness = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n\t            amount: amount\n\t        });\n\t    };\n\t    Snap.filter.brightness.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.contrast\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the contrast filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.contrast = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: .5 - amount / 2\n\t        });\n\t    };\n\t    Snap.filter.contrast.toString = function () {\n\t        return this();\n\t    };\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var box = Snap._.box,\n\t        is = Snap.is,\n\t        firstLetter = /^[^a-z]*([tbmlrc])/i,\n\t        toString = function () {\n\t            return \"T\" + this.dx + \",\" + this.dy;\n\t        };\n\t    /*\\\n\t     * Element.getAlign\n\t     [ method ]\n\t     **\n\t     * Returns shift needed to align the element relatively to given element.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n\t     > Usage\n\t     | el.transform(el.getAlign(el2, \"top\"));\n\t     * or\n\t     | var dy = el.getAlign(el2, \"top\").dy;\n\t    \\*/\n\t    Element.prototype.getAlign = function (el, way) {\n\t        if (way == null && is(el, \"string\")) {\n\t            way = el;\n\t            el = null;\n\t        }\n\t        el = el || this.paper;\n\t        var bx = el.getBBox ? el.getBBox() : box(el),\n\t            bb = this.getBBox(),\n\t            out = {};\n\t        way = way && way.match(firstLetter);\n\t        way = way ? way[1].toLowerCase() : \"c\";\n\t        switch (way) {\n\t            case \"t\":\n\t                out.dx = 0;\n\t                out.dy = bx.y - bb.y;\n\t            break;\n\t            case \"b\":\n\t                out.dx = 0;\n\t                out.dy = bx.y2 - bb.y2;\n\t            break;\n\t            case \"m\":\n\t                out.dx = 0;\n\t                out.dy = bx.cy - bb.cy;\n\t            break;\n\t            case \"l\":\n\t                out.dx = bx.x - bb.x;\n\t                out.dy = 0;\n\t            break;\n\t            case \"r\":\n\t                out.dx = bx.x2 - bb.x2;\n\t                out.dy = 0;\n\t            break;\n\t            default:\n\t                out.dx = bx.cx - bb.cx;\n\t                out.dy = 0;\n\t            break;\n\t        }\n\t        out.toString = toString;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.align\n\t     [ method ]\n\t     **\n\t     * Aligns the element relatively to given one via transformation.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object) this element\n\t     > Usage\n\t     | el.align(el2, \"top\");\n\t     * or\n\t     | el.align(\"middle\");\n\t    \\*/\n\t    Element.prototype.align = function (el, way) {\n\t        return this.transform(\"...\" + this.getAlign(el, way));\n\t    };\n\t});\n\t\n\treturn Snap;\n\t}));\n\t}.call(window));\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*jshint eqnull:true*/\n\t(function (root) {\n\t  \"use strict\";\n\t\n\t  var GLOBAL_KEY = \"Random\";\n\t\n\t  var imul = (typeof Math.imul !== \"function\" || Math.imul(0xffffffff, 5) !== -5 ?\n\t    function (a, b) {\n\t      var ah = (a >>> 16) & 0xffff;\n\t      var al = a & 0xffff;\n\t      var bh = (b >>> 16) & 0xffff;\n\t      var bl = b & 0xffff;\n\t      // the shift by 0 fixes the sign on the high part\n\t      // the final |0 converts the unsigned value into a signed value\n\t      return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;\n\t    } :\n\t    Math.imul);\n\t\n\t  var stringRepeat = (typeof String.prototype.repeat === \"function\" && \"x\".repeat(3) === \"xxx\" ?\n\t    function (x, y) {\n\t      return x.repeat(y);\n\t    } : function (pattern, count) {\n\t      var result = \"\";\n\t      while (count > 0) {\n\t        if (count & 1) {\n\t          result += pattern;\n\t        }\n\t        count >>= 1;\n\t        pattern += pattern;\n\t      }\n\t      return result;\n\t    });\n\t\n\t  function Random(engine) {\n\t    if (!(this instanceof Random)) {\n\t      return new Random(engine);\n\t    }\n\t\n\t    if (engine == null) {\n\t      engine = Random.engines.nativeMath;\n\t    } else if (typeof engine !== \"function\") {\n\t      throw new TypeError(\"Expected engine to be a function, got \" + typeof engine);\n\t    }\n\t    this.engine = engine;\n\t  }\n\t  var proto = Random.prototype;\n\t\n\t  Random.engines = {\n\t    nativeMath: function () {\n\t      return (Math.random() * 0x100000000) | 0;\n\t    },\n\t    mt19937: (function (Int32Array) {\n\t      // http://en.wikipedia.org/wiki/Mersenne_twister\n\t      function refreshData(data) {\n\t        var k = 0;\n\t        var tmp = 0;\n\t        for (;\n\t          (k | 0) < 227; k = (k + 1) | 0) {\n\t          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n\t          data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n\t        }\n\t\n\t        for (;\n\t          (k | 0) < 623; k = (k + 1) | 0) {\n\t          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n\t          data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n\t        }\n\t\n\t        tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);\n\t        data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n\t      }\n\t\n\t      function temper(value) {\n\t        value ^= value >>> 11;\n\t        value ^= (value << 7) & 0x9d2c5680;\n\t        value ^= (value << 15) & 0xefc60000;\n\t        return value ^ (value >>> 18);\n\t      }\n\t\n\t      function seedWithArray(data, source) {\n\t        var i = 1;\n\t        var j = 0;\n\t        var sourceLength = source.length;\n\t        var k = Math.max(sourceLength, 624) | 0;\n\t        var previous = data[0] | 0;\n\t        for (;\n\t          (k | 0) > 0; --k) {\n\t          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;\n\t          i = (i + 1) | 0;\n\t          ++j;\n\t          if ((i | 0) > 623) {\n\t            data[0] = data[623];\n\t            i = 1;\n\t          }\n\t          if (j >= sourceLength) {\n\t            j = 0;\n\t          }\n\t        }\n\t        for (k = 623;\n\t          (k | 0) > 0; --k) {\n\t          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;\n\t          i = (i + 1) | 0;\n\t          if ((i | 0) > 623) {\n\t            data[0] = data[623];\n\t            i = 1;\n\t          }\n\t        }\n\t        data[0] = 0x80000000;\n\t      }\n\t\n\t      function mt19937() {\n\t        var data = new Int32Array(624);\n\t        var index = 0;\n\t        var uses = 0;\n\t\n\t        function next() {\n\t          if ((index | 0) >= 624) {\n\t            refreshData(data);\n\t            index = 0;\n\t          }\n\t\n\t          var value = data[index];\n\t          index = (index + 1) | 0;\n\t          uses += 1;\n\t          return temper(value) | 0;\n\t        }\n\t        next.getUseCount = function() {\n\t          return uses;\n\t        };\n\t        next.discard = function (count) {\n\t          uses += count;\n\t          if ((index | 0) >= 624) {\n\t            refreshData(data);\n\t            index = 0;\n\t          }\n\t          while ((count - index) > 624) {\n\t            count -= 624 - index;\n\t            refreshData(data);\n\t            index = 0;\n\t          }\n\t          index = (index + count) | 0;\n\t          return next;\n\t        };\n\t        next.seed = function (initial) {\n\t          var previous = 0;\n\t          data[0] = previous = initial | 0;\n\t\n\t          for (var i = 1; i < 624; i = (i + 1) | 0) {\n\t            data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;\n\t          }\n\t          index = 624;\n\t          uses = 0;\n\t          return next;\n\t        };\n\t        next.seedWithArray = function (source) {\n\t          next.seed(0x012bd6aa);\n\t          seedWithArray(data, source);\n\t          return next;\n\t        };\n\t        next.autoSeed = function () {\n\t          return next.seedWithArray(Random.generateEntropyArray());\n\t        };\n\t        return next;\n\t      }\n\t\n\t      return mt19937;\n\t    }(typeof Int32Array === \"function\" ? Int32Array : Array)),\n\t    browserCrypto: (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\" && typeof Int32Array === \"function\") ? (function () {\n\t      var data = null;\n\t      var index = 128;\n\t\n\t      return function () {\n\t        if (index >= 128) {\n\t          if (data === null) {\n\t            data = new Int32Array(128);\n\t          }\n\t          crypto.getRandomValues(data);\n\t          index = 0;\n\t        }\n\t\n\t        return data[index++] | 0;\n\t      };\n\t    }()) : null\n\t  };\n\t\n\t  Random.generateEntropyArray = function () {\n\t    var array = [];\n\t    var engine = Random.engines.nativeMath;\n\t    for (var i = 0; i < 16; ++i) {\n\t      array[i] = engine() | 0;\n\t    }\n\t    array.push(new Date().getTime() | 0);\n\t    return array;\n\t  };\n\t\n\t  function returnValue(value) {\n\t    return function () {\n\t      return value;\n\t    };\n\t  }\n\t\n\t  // [-0x80000000, 0x7fffffff]\n\t  Random.int32 = function (engine) {\n\t    return engine() | 0;\n\t  };\n\t  proto.int32 = function () {\n\t    return Random.int32(this.engine);\n\t  };\n\t\n\t  // [0, 0xffffffff]\n\t  Random.uint32 = function (engine) {\n\t    return engine() >>> 0;\n\t  };\n\t  proto.uint32 = function () {\n\t    return Random.uint32(this.engine);\n\t  };\n\t\n\t  // [0, 0x1fffffffffffff]\n\t  Random.uint53 = function (engine) {\n\t    var high = engine() & 0x1fffff;\n\t    var low = engine() >>> 0;\n\t    return (high * 0x100000000) + low;\n\t  };\n\t  proto.uint53 = function () {\n\t    return Random.uint53(this.engine);\n\t  };\n\t\n\t  // [0, 0x20000000000000]\n\t  Random.uint53Full = function (engine) {\n\t    while (true) {\n\t      var high = engine() | 0;\n\t      if (high & 0x200000) {\n\t        if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {\n\t          return 0x20000000000000;\n\t        }\n\t      } else {\n\t        var low = engine() >>> 0;\n\t        return ((high & 0x1fffff) * 0x100000000) + low;\n\t      }\n\t    }\n\t  };\n\t  proto.uint53Full = function () {\n\t    return Random.uint53Full(this.engine);\n\t  };\n\t\n\t  // [-0x20000000000000, 0x1fffffffffffff]\n\t  Random.int53 = function (engine) {\n\t    var high = engine() | 0;\n\t    var low = engine() >>> 0;\n\t    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n\t  };\n\t  proto.int53 = function () {\n\t    return Random.int53(this.engine);\n\t  };\n\t\n\t  // [-0x20000000000000, 0x20000000000000]\n\t  Random.int53Full = function (engine) {\n\t    while (true) {\n\t      var high = engine() | 0;\n\t      if (high & 0x400000) {\n\t        if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {\n\t          return 0x20000000000000;\n\t        }\n\t      } else {\n\t        var low = engine() >>> 0;\n\t        return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n\t      }\n\t    }\n\t  };\n\t  proto.int53Full = function () {\n\t    return Random.int53Full(this.engine);\n\t  };\n\t\n\t  function add(generate, addend) {\n\t    if (addend === 0) {\n\t      return generate;\n\t    } else {\n\t      return function (engine) {\n\t        return generate(engine) + addend;\n\t      };\n\t    }\n\t  }\n\t\n\t  Random.integer = (function () {\n\t    function isPowerOfTwoMinusOne(value) {\n\t      return ((value + 1) & value) === 0;\n\t    }\n\t\n\t    function bitmask(masking) {\n\t      return function (engine) {\n\t        return engine() & masking;\n\t      };\n\t    }\n\t\n\t    function downscaleToLoopCheckedRange(range) {\n\t      var extendedRange = range + 1;\n\t      var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);\n\t      return function (engine) {\n\t        var value = 0;\n\t        do {\n\t          value = engine() >>> 0;\n\t        } while (value >= maximum);\n\t        return value % extendedRange;\n\t      };\n\t    }\n\t\n\t    function downscaleToRange(range) {\n\t      if (isPowerOfTwoMinusOne(range)) {\n\t        return bitmask(range);\n\t      } else {\n\t        return downscaleToLoopCheckedRange(range);\n\t      }\n\t    }\n\t\n\t    function isEvenlyDivisibleByMaxInt32(value) {\n\t      return (value | 0) === 0;\n\t    }\n\t\n\t    function upscaleWithHighMasking(masking) {\n\t      return function (engine) {\n\t        var high = engine() & masking;\n\t        var low = engine() >>> 0;\n\t        return (high * 0x100000000) + low;\n\t      };\n\t    }\n\t\n\t    function upscaleToLoopCheckedRange(extendedRange) {\n\t      var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);\n\t      return function (engine) {\n\t        var ret = 0;\n\t        do {\n\t          var high = engine() & 0x1fffff;\n\t          var low = engine() >>> 0;\n\t          ret = (high * 0x100000000) + low;\n\t        } while (ret >= maximum);\n\t        return ret % extendedRange;\n\t      };\n\t    }\n\t\n\t    function upscaleWithinU53(range) {\n\t      var extendedRange = range + 1;\n\t      if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n\t        var highRange = ((extendedRange / 0x100000000) | 0) - 1;\n\t        if (isPowerOfTwoMinusOne(highRange)) {\n\t          return upscaleWithHighMasking(highRange);\n\t        }\n\t      }\n\t      return upscaleToLoopCheckedRange(extendedRange);\n\t    }\n\t\n\t    function upscaleWithinI53AndLoopCheck(min, max) {\n\t      return function (engine) {\n\t        var ret = 0;\n\t        do {\n\t          var high = engine() | 0;\n\t          var low = engine() >>> 0;\n\t          ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n\t        } while (ret < min || ret > max);\n\t        return ret;\n\t      };\n\t    }\n\t\n\t    return function (min, max) {\n\t      min = Math.floor(min);\n\t      max = Math.floor(max);\n\t      if (min < -0x20000000000000 || !isFinite(min)) {\n\t        throw new RangeError(\"Expected min to be at least \" + (-0x20000000000000));\n\t      } else if (max > 0x20000000000000 || !isFinite(max)) {\n\t        throw new RangeError(\"Expected max to be at most \" + 0x20000000000000);\n\t      }\n\t\n\t      var range = max - min;\n\t      if (range <= 0 || !isFinite(range)) {\n\t        return returnValue(min);\n\t      } else if (range === 0xffffffff) {\n\t        if (min === 0) {\n\t          return Random.uint32;\n\t        } else {\n\t          return add(Random.int32, min + 0x80000000);\n\t        }\n\t      } else if (range < 0xffffffff) {\n\t        return add(downscaleToRange(range), min);\n\t      } else if (range === 0x1fffffffffffff) {\n\t        return add(Random.uint53, min);\n\t      } else if (range < 0x1fffffffffffff) {\n\t        return add(upscaleWithinU53(range), min);\n\t      } else if (max - 1 - min === 0x1fffffffffffff) {\n\t        return add(Random.uint53Full, min);\n\t      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n\t        return Random.int53Full;\n\t      } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {\n\t        return Random.int53;\n\t      } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {\n\t        return add(Random.int53, 1);\n\t      } else if (max === 0x20000000000000) {\n\t        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n\t      } else {\n\t        return upscaleWithinI53AndLoopCheck(min, max);\n\t      }\n\t    };\n\t  }());\n\t  proto.integer = function (min, max) {\n\t    return Random.integer(min, max)(this.engine);\n\t  };\n\t\n\t  // [0, 1] (floating point)\n\t  Random.realZeroToOneInclusive = function (engine) {\n\t    return Random.uint53Full(engine) / 0x20000000000000;\n\t  };\n\t  proto.realZeroToOneInclusive = function () {\n\t    return Random.realZeroToOneInclusive(this.engine);\n\t  };\n\t\n\t  // [0, 1) (floating point)\n\t  Random.realZeroToOneExclusive = function (engine) {\n\t    return Random.uint53(engine) / 0x20000000000000;\n\t  };\n\t  proto.realZeroToOneExclusive = function () {\n\t    return Random.realZeroToOneExclusive(this.engine);\n\t  };\n\t\n\t  Random.real = (function () {\n\t    function multiply(generate, multiplier) {\n\t      if (multiplier === 1) {\n\t        return generate;\n\t      } else if (multiplier === 0) {\n\t        return function () {\n\t          return 0;\n\t        };\n\t      } else {\n\t        return function (engine) {\n\t          return generate(engine) * multiplier;\n\t        };\n\t      }\n\t    }\n\t\n\t    return function (left, right, inclusive) {\n\t      if (!isFinite(left)) {\n\t        throw new RangeError(\"Expected left to be a finite number\");\n\t      } else if (!isFinite(right)) {\n\t        throw new RangeError(\"Expected right to be a finite number\");\n\t      }\n\t      return add(\n\t        multiply(\n\t          inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,\n\t          right - left),\n\t        left);\n\t    };\n\t  }());\n\t  proto.real = function (min, max, inclusive) {\n\t    return Random.real(min, max, inclusive)(this.engine);\n\t  };\n\t\n\t  Random.bool = (function () {\n\t    function isLeastBitTrue(engine) {\n\t      return (engine() & 1) === 1;\n\t    }\n\t\n\t    function lessThan(generate, value) {\n\t      return function (engine) {\n\t        return generate(engine) < value;\n\t      };\n\t    }\n\t\n\t    function probability(percentage) {\n\t      if (percentage <= 0) {\n\t        return returnValue(false);\n\t      } else if (percentage >= 1) {\n\t        return returnValue(true);\n\t      } else {\n\t        var scaled = percentage * 0x100000000;\n\t        if (scaled % 1 === 0) {\n\t          return lessThan(Random.int32, (scaled - 0x80000000) | 0);\n\t        } else {\n\t          return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));\n\t        }\n\t      }\n\t    }\n\t\n\t    return function (numerator, denominator) {\n\t      if (denominator == null) {\n\t        if (numerator == null) {\n\t          return isLeastBitTrue;\n\t        }\n\t        return probability(numerator);\n\t      } else {\n\t        if (numerator <= 0) {\n\t          return returnValue(false);\n\t        } else if (numerator >= denominator) {\n\t          return returnValue(true);\n\t        }\n\t        return lessThan(Random.integer(0, denominator - 1), numerator);\n\t      }\n\t    };\n\t  }());\n\t  proto.bool = function (numerator, denominator) {\n\t    return Random.bool(numerator, denominator)(this.engine);\n\t  };\n\t\n\t  function toInteger(value) {\n\t    var number = +value;\n\t    if (number < 0) {\n\t      return Math.ceil(number);\n\t    } else {\n\t      return Math.floor(number);\n\t    }\n\t  }\n\t\n\t  function convertSliceArgument(value, length) {\n\t    if (value < 0) {\n\t      return Math.max(value + length, 0);\n\t    } else {\n\t      return Math.min(value, length);\n\t    }\n\t  }\n\t  Random.pick = function (engine, array, begin, end) {\n\t    var length = array.length;\n\t    var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n\t    var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n\t    if (start >= finish) {\n\t      return void 0;\n\t    }\n\t    var distribution = Random.integer(start, finish - 1);\n\t    return array[distribution(engine)];\n\t  };\n\t  proto.pick = function (array, begin, end) {\n\t    return Random.pick(this.engine, array, begin, end);\n\t  };\n\t\n\t  function returnUndefined() {\n\t    return void 0;\n\t  }\n\t  var slice = Array.prototype.slice;\n\t  Random.picker = function (array, begin, end) {\n\t    var clone = slice.call(array, begin, end);\n\t    if (!clone.length) {\n\t      return returnUndefined;\n\t    }\n\t    var distribution = Random.integer(0, clone.length - 1);\n\t    return function (engine) {\n\t      return clone[distribution(engine)];\n\t    };\n\t  };\n\t\n\t  Random.shuffle = function (engine, array, downTo) {\n\t    var length = array.length;\n\t    if (length) {\n\t      if (downTo == null) {\n\t        downTo = 0;\n\t      }\n\t      for (var i = (length - 1) >>> 0; i > downTo; --i) {\n\t        var distribution = Random.integer(0, i);\n\t        var j = distribution(engine);\n\t        if (i !== j) {\n\t          var tmp = array[i];\n\t          array[i] = array[j];\n\t          array[j] = tmp;\n\t        }\n\t      }\n\t    }\n\t    return array;\n\t  };\n\t  proto.shuffle = function (array) {\n\t    return Random.shuffle(this.engine, array);\n\t  };\n\t\n\t  Random.sample = function (engine, population, sampleSize) {\n\t    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n\t      throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n\t    }\n\t\n\t    if (sampleSize === 0) {\n\t      return [];\n\t    }\n\t\n\t    var clone = slice.call(population);\n\t    var length = clone.length;\n\t    if (length === sampleSize) {\n\t      return Random.shuffle(engine, clone, 0);\n\t    }\n\t    var tailLength = length - sampleSize;\n\t    return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);\n\t  };\n\t  proto.sample = function (population, sampleSize) {\n\t    return Random.sample(this.engine, population, sampleSize);\n\t  };\n\t\n\t  Random.die = function (sideCount) {\n\t    return Random.integer(1, sideCount);\n\t  };\n\t  proto.die = function (sideCount) {\n\t    return Random.die(sideCount)(this.engine);\n\t  };\n\t\n\t  Random.dice = function (sideCount, dieCount) {\n\t    var distribution = Random.die(sideCount);\n\t    return function (engine) {\n\t      var result = [];\n\t      result.length = dieCount;\n\t      for (var i = 0; i < dieCount; ++i) {\n\t        result[i] = distribution(engine);\n\t      }\n\t      return result;\n\t    };\n\t  };\n\t  proto.dice = function (sideCount, dieCount) {\n\t    return Random.dice(sideCount, dieCount)(this.engine);\n\t  };\n\t\n\t  // http://en.wikipedia.org/wiki/Universally_unique_identifier\n\t  Random.uuid4 = (function () {\n\t    function zeroPad(string, zeroCount) {\n\t      return stringRepeat(\"0\", zeroCount - string.length) + string;\n\t    }\n\t\n\t    return function (engine) {\n\t      var a = engine() >>> 0;\n\t      var b = engine() | 0;\n\t      var c = engine() | 0;\n\t      var d = engine() >>> 0;\n\t\n\t      return (\n\t        zeroPad(a.toString(16), 8) +\n\t        \"-\" +\n\t        zeroPad((b & 0xffff).toString(16), 4) +\n\t        \"-\" +\n\t        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n\t        \"-\" +\n\t        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n\t        \"-\" +\n\t        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n\t        zeroPad(d.toString(16), 8));\n\t    };\n\t  }());\n\t  proto.uuid4 = function () {\n\t    return Random.uuid4(this.engine);\n\t  };\n\t\n\t  Random.string = (function () {\n\t    // has 2**x chars, for faster uniform distribution\n\t    var DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\t\n\t    return function (pool) {\n\t      if (pool == null) {\n\t        pool = DEFAULT_STRING_POOL;\n\t      }\n\t\n\t      var length = pool.length;\n\t      if (!length) {\n\t        throw new Error(\"Expected pool not to be an empty string\");\n\t      }\n\t\n\t      var distribution = Random.integer(0, length - 1);\n\t      return function (engine, length) {\n\t        var result = \"\";\n\t        for (var i = 0; i < length; ++i) {\n\t          var j = distribution(engine);\n\t          result += pool.charAt(j);\n\t        }\n\t        return result;\n\t      };\n\t    };\n\t  }());\n\t  proto.string = function (length, pool) {\n\t    return Random.string(pool)(this.engine, length);\n\t  };\n\t\n\t  Random.hex = (function () {\n\t    var LOWER_HEX_POOL = \"0123456789abcdef\";\n\t    var lowerHex = Random.string(LOWER_HEX_POOL);\n\t    var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());\n\t\n\t    return function (upper) {\n\t      if (upper) {\n\t        return upperHex;\n\t      } else {\n\t        return lowerHex;\n\t      }\n\t    };\n\t  }());\n\t  proto.hex = function (length, upper) {\n\t    return Random.hex(upper)(this.engine, length);\n\t  };\n\t\n\t  Random.date = function (start, end) {\n\t    if (!(start instanceof Date)) {\n\t      throw new TypeError(\"Expected start to be a Date, got \" + typeof start);\n\t    } else if (!(end instanceof Date)) {\n\t      throw new TypeError(\"Expected end to be a Date, got \" + typeof end);\n\t    }\n\t    var distribution = Random.integer(start.getTime(), end.getTime());\n\t    return function (engine) {\n\t      return new Date(distribution(engine));\n\t    };\n\t  };\n\t  proto.date = function (start, end) {\n\t    return Random.date(start, end)(this.engine);\n\t  };\n\t\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t      return Random;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module !== \"undefined\" && typeof require === \"function\") {\n\t    module.exports = Random;\n\t  } else {\n\t    (function () {\n\t      var oldGlobal = root[GLOBAL_KEY];\n\t      Random.noConflict = function () {\n\t        root[GLOBAL_KEY] = oldGlobal;\n\t        return this;\n\t      };\n\t    }());\n\t    root[GLOBAL_KEY] = Random;\n\t  }\n\t}(this));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** pgen.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4e88df6abe0f567706de\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"react\",\"amd\":\"react\",\"commonjs\":\"react\",\"commonjs2\":\"react\"}\n ** module id = 1\n ** module chunks = 0\n **/","import React, {Component} from 'react';\r\n\r\nexport default class Avatar extends Component {\r\n  constructor(props: Object) : void {\r\n    super(props);\r\n    this.skinColor = props.genetic.skinColor(props.country);\r\n    this.eyesColor = props.genetic.eyesColor(props.country, this.skinColor);\r\n    this.hairColor = props.genetic.hairColor(props.country, this.skinColor);\r\n\r\n    this.style = {\r\n      backgroundColor: this.props.bgColor\r\n    };\r\n  }\r\n\r\n  _setSkinColor(skin){\r\n    skin.selectAll('[fill=\"#ffcc99\"]').attr({\r\n      fill: this.skinColor\r\n    });\r\n  }\r\n\r\n  _setEyesColor(eyes){\r\n    eyes.selectAll('path').attr({\r\n      fill: this.eyesColor\r\n    });\r\n  }\r\n\r\n  _setHairColor(hair){\r\n    hair.selectAll('path').attr({\r\n      fill: this.hairColor\r\n    });\r\n  }\r\n\r\n  _setBeardColor(beard){\r\n    beard.selectAll('path').attr({\r\n      fill: this.hairColor\r\n    });\r\n  }\r\n\r\n  _setEyebrowsColor(eyebrows){\r\n    eyebrows.selectAll('path').attr({\r\n      fill: this.hairColor\r\n    });\r\n  }\r\n\r\n  _setClothColor(cloth){\r\n    cloth.select(`#${this.props.gender}_cloth_base`).attr({\r\n      fill: '#333333'\r\n    });\r\n  }\r\n\r\n  _setEyesSize(eyes){\r\n    let size = this.props.genetic.random.integer(6, 10) / 10;\r\n    eyes.select('#right').transform(`s${size}`);\r\n    eyes.select('#left').transform(`s${size}`);\r\n  }\r\n\r\n  _setAsianEyes(eyes){\r\n    eyes.select('#right').transform(`r-60, s0.6`);\r\n    eyes.select('#left').transform(`r60, s0.6`);\r\n  }\r\n\r\n  componentDidMount(){\r\n    let Snap = require('imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js');\r\n    let canvas = Snap(this.svg);\r\n\r\n    Snap.load(this.props.svg, (svg) => {\r\n      let skin = svg.select('#base');\r\n      this._setSkinColor(skin);\r\n\r\n      let eyes = svg.select('#eyes');\r\n      this._setEyesColor(eyes);\r\n      \r\n      if(this.props.genetic.countries.isAsian(this.props.country.initials)){\r\n        this._setAsianEyes(eyes);\r\n      }\r\n      else{\r\n        this._setEyesSize(eyes);\r\n      }\r\n\r\n      let hair = null;\r\n      let bald = false;\r\n      let hairs = svg.selectAll(`g[id^=\"${this.props.gender}_hair_\"`);\r\n      //10% chance to be bald if male\r\n      if(this.props.gender == this.props.genetic.genders.MALE && this.props.genetic.random.bool(0.1)){\r\n        bald = true;\r\n      }\r\n\r\n      if(!bald) {\r\n        hair = svg.select(`#${this.props.gender}_hair_${this.props.genetic.random.integer(1, hairs.length)}`);\r\n      }\r\n\r\n      if(hair !== null){\r\n        this._setHairColor(hair);\r\n      }\r\n\r\n      let cloth = svg.select(`#${this.props.gender}_cloth_1`);\r\n      this._setClothColor(cloth);\r\n\r\n      let mouths = svg.selectAll(`g[id^=\"mouth_\"`);\r\n\r\n      let scale : number = this.props.size / 250;\r\n\r\n      canvas.append(svg.selectAll('filter'));\r\n      canvas.append(skin.transform(`s${scale}`));\r\n      canvas.append(cloth.transform(`s${scale}`));\r\n      canvas.append(eyes.transform(`s${scale}`));\r\n      canvas.append(svg.select(`#mouth_${this.props.genetic.random.integer(1, mouths.length)}`).transform(`s${scale}`));\r\n      if(hair !== null){\r\n        canvas.append(hair.transform(`s${scale}`));\r\n      }\r\n\r\n      if(this.props.gender == this.props.genetic.genders.MALE){\r\n        let allEyebrows = svg.selectAll(`g[id^=\"eyebrows_\"`);\r\n        let eyebrows = svg.select(`#eyebrows_${this.props.genetic.random.integer(1, allEyebrows.length)}`);\r\n        this._setEyebrowsColor(eyebrows);\r\n        canvas.append(eyebrows.transform(`s${scale}`));\r\n      }\r\n\r\n      //50% chance to have a bear if male\r\n      if(this.props.gender == this.props.genetic.genders.MALE && this.props.genetic.random.bool(0.5)){\r\n        let beards = svg.selectAll(`g[id^=\"beard_\"`);\r\n        let beard = svg.select(`#beard_${this.props.genetic.random.integer(1, beards.length)}`);\r\n        this._setBeardColor(beard);\r\n        canvas.append(beard.transform(`s${scale}`));\r\n      }\r\n    });\r\n  }\r\n\r\n  render() : Object {\r\n    return(\r\n      <svg style={this.style} ref={svg => this.svg = svg} width={this.props.size} height={this.props.size}></svg>\r\n    );\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Avatar.js\n **/","export default {\r\n  skin: [\r\n    //light\r\n    '#ffe5c8', '#ffdabe', '#ffceb4', '#ffc3aa', '#f0b8a0',\r\n    //medium\r\n    '#e1ac96', '#d2a18c', '#c39582', '#b48a78', '#a57e6e',\r\n    //dark\r\n    '#967264', '#87675a', '#785c50', '#695046', '#5a453c'\r\n  ],\r\n  eyes: ['#222222'/*black*/, '#663300'/*brown*/, '#4da6ff'/*blue*/, '#00b259'/*green*/],\r\n  hair: ['#222222'/*black*/, '#663300'/*brown*/, '#d9a300'/*blonde*/, '#ff5c26'/*orange*/]\r\n};\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Colors.js\n **/","export default class Countries {\r\n  constructor() : void {\r\n    this.ethnicity = {\r\n      LIGHT: 'LIGHT',\r\n      MEDIUM: 'MEDIUM',\r\n      DARK: 'DARK',\r\n      ALL: 'ALL'\r\n    }\r\n\r\n    this.all = [\r\n      {\r\n        initials: 'ARG',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      },\r\n      {\r\n        initials: 'BRA',\r\n        ethnicity: this.ethnicity.ALL\r\n      },\r\n      {\r\n        initials: 'CHN',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      },\r\n      {\r\n        initials: 'JPN',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      },\r\n      {\r\n        initials: 'USA',\r\n        ethnicity: this.ethnicity.ALL\r\n      },\r\n      {\r\n        initials: 'RUS',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      }\r\n    ];\r\n\r\n    this.asianCountries = [\r\n      'CHN', 'JPN'\r\n    ];\r\n  }\r\n\r\n  isAsian(country: string) : bool {\r\n    return this.asianCountries.indexOf(country) !== -1;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Countries.js\n **/","import Rand from 'random-js';\r\nimport Countries from './Countries';\r\nimport Colors from './Colors';\r\n\r\ntype Options = {\r\n  seed: number,\r\n  minAge?: number,\r\n  maxAge?: number,\r\n  age?: number,\r\n  country?: string,\r\n  gender?: string,\r\n  handed?: string\r\n}\r\n\r\nexport default class Genetic {\r\n  constructor(options: Options) : void {\r\n    this.options = options;\r\n    this.engine = Rand.engines.mt19937().seed(this.options.seed);\r\n    this.random = new Rand(this.engine);\r\n    this.colors = Colors;\r\n    this.countries = new Countries();\r\n    this.genders = {MALE: 'M', FEMALE: 'F'};\r\n    this.hand = {LEFT: 'LEFT', RIGHT: 'RIGHT', TWO: 'TWO'};\r\n  }\r\n\r\n  _choose(arr: Array, start: number = 0, end: number = arr.length - 1) : any {\r\n    if(arr.length > end \r\n      && arr.length > start\r\n      && start > -1\r\n      && end > -1){\r\n      return arr[this.random.integer(start, end)];\r\n    }\r\n\r\n    return arr[this.random.integer(0, arr.length - 1)];\r\n  }\r\n\r\n  _getEthnicity(skinColor: string) : string {\r\n    if(this.colors.skin.indexOf(skinColor) > 4 \r\n      && this.colors.skin.indexOf(skinColor) < 10){\r\n      return this.countries.ethnicity.MEDIUM;\r\n    }\r\n    \r\n    if(this.colors.skin.indexOf(skinColor) > 9){\r\n      return this.countries.ethnicity.DARK;\r\n    }\r\n\r\n    return this.countries.ethnicity.LIGHT;\r\n  }\r\n\r\n  age() : number { \r\n    if(this.options.age){\r\n      return this.options.age;\r\n    }\r\n    \r\n    let minAge = this.options.minAge || 15; \r\n    let maxAge = this.options.maxAge || 70; \r\n    return this.random.integer(minAge, maxAge);\r\n  }\r\n\r\n  handed() : string {  \r\n    if(this.options.handed){\r\n      return this.options.handed;\r\n    }\r\n\r\n    return this._choose([this.hand.LEFT, this.hand.RIGHT, this.hand.TWO]);\r\n  }\r\n\r\n  gender() : string { \r\n    if(this.options.gender){\r\n      return this.options.gender;\r\n    }\r\n\r\n    return this.random.bool() ? this.genders.MALE : this.genders.FEMALE;\r\n  }\r\n\r\n  country() : Object {\r\n    let country = this._choose(this.countries.all);\r\n    \r\n    if(this.options.country){\r\n      this.countries.all.forEach((c) => {\r\n        if(c.initials === this.options.country){\r\n          country = c;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n\r\n    return country;\r\n  }\r\n\r\n  skinColor(country: Object) : string {\r\n    switch(country.ethnicity){\r\n      case this.countries.ethnicity.LIGHT:\r\n        return this._choose(this.colors.skin, 0, 4);\r\n      case this.countries.ethnicity.MEDIUM:\r\n        return this._choose(this.colors.skin, 5, 9);\r\n      case this.countries.ethnicity.DARK:\r\n        return this._choose(this.colors.skin, 10, 14);\r\n      default:\r\n        return this._choose(this.colors.skin);\r\n    }\r\n  }\r\n\r\n  eyesColor(country: Object, skinColor: string) : string {\r\n    let ethnicity = country.ethnicity;\r\n    if(country.ethnicity == this.countries.ethnicity.ALL){\r\n      ethnicity = this._getEthnicity(skinColor);\r\n    }\r\n\r\n    if(ethnicity == this.countries.ethnicity.DARK\r\n      || ethnicity == this.countries.ethnicity.MEDIUM\r\n      || this.countries.isAsian(country.initials)){\r\n      return this.colors.eyes[0];\r\n    }\r\n\r\n    return this._choose(this.colors.eyes);\r\n  }\r\n\r\n  hairColor(country: Object, skinColor: string) : string {\r\n    let ethnicity = country.ethnicity;\r\n    if(country.ethnicity == this.countries.ethnicity.ALL){\r\n      ethnicity = this._getEthnicity(skinColor);\r\n    }\r\n\r\n    if(ethnicity == this.countries.ethnicity.DARK || this.countries.isAsian(country.initials)){\r\n      return this.colors.hair[0];\r\n    }\r\n\r\n    //5% chance to be a ginger\r\n    if(ethnicity == this.countries.ethnicity.LIGHT && this.random.bool(0.05)){\r\n      return this.colors.hair[this.colors.hair.length - 1];\r\n    }\r\n\r\n    if(ethnicity == this.countries.ethnicity.LIGHT){\r\n      return this._choose(this.colors.hair, 0, this.colors.hair.length - 2);\r\n    }\r\n\r\n    return this._choose(this.colors.hair, 0, this.colors.hair.length - 3);\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Genetic.js\n **/","type Infos = {\r\n  firstName: string,\r\n  lastName: string,\r\n  age: number,\r\n  country: string,\r\n  gender: string,\r\n  handed: string,\r\n  avatar: Object\r\n}\r\n\r\nexport default class Person {\r\n  constructor(infos: Infos) : void {\r\n    this.infos = infos;\r\n  }\r\n\r\n  name() : string {\r\n    return `${this.infos.firstName} ${this.infos.lastName}`;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Person.js\n **/","import React from 'react';\r\nimport Person from './Person';\r\nimport Genetic from './Genetic';\r\nimport Avatar from './Avatar';\r\nimport avatarSvg from './assets/img/avatar.svg';\r\n\r\ntype Options = {\r\n  seed?: number,\r\n  minAge?: number,\r\n  maxAge?: number,\r\n  age?: number,\r\n  country?: string,\r\n  gender?: string,\r\n  handed?: string,\r\n  avatar?: Object\r\n}\r\n\r\ntype AvatarOptions = {\r\n  svg?: string,\r\n  size?: number,\r\n  bgColor?: string\r\n}\r\n\r\nexport default class PersonGenerator {\r\n  constructor(avatarOptions: AvatarOptions) : void {\r\n    if(!avatarOptions.svg){\r\n      avatarOptions.svg = avatarSvg;\r\n    }\r\n    \r\n    if(!avatarOptions.size){\r\n      avatarOptions.size = 250;\r\n    }\r\n\r\n    if(!avatarOptions.bgColor){\r\n      avatarOptions.bgColor = '#f1f1f1';\r\n    }\r\n\r\n    this.avatarOptions = avatarOptions;\r\n  }\r\n\r\n  _generateOptions(options?: Options) : Object {\r\n    let min = 1;\r\n    let max = 1000000;\r\n    let genetic = options ? new Genetic(options) : new Genetic({seed: Math.floor(Math.random() * (max - min)) + min});\r\n\r\n    let age = genetic.age();\r\n    let gender = genetic.gender();\r\n    let country = genetic.country();\r\n    let handed = genetic.handed();\r\n\r\n    return {genetic, age, gender, country, handed};\r\n  }\r\n\r\n  make(options?: Options) : Person {\r\n    let opts = options ? this._generateOptions(options) : this._generateOptions();\r\n\r\n    return new Person({\r\n      firstName: 'First',\r\n      lastName: 'Last',\r\n      age: opts.age,\r\n      country: opts.country.initials,\r\n      gender: opts.gender,\r\n      handed: opts.handed,\r\n      avatar: opts.avatar || this.makeAvatar(opts)\r\n    });\r\n  }\r\n\r\n  makeAvatar(options?: Object) : Object {\r\n    let opts = {};\r\n\r\n    if(!options){\r\n      opts = this._generateOptions();\r\n    }\r\n    else{\r\n      if(!options.genetic){\r\n        opts = this._generateOptions(options);\r\n      }\r\n      else{\r\n        opts = options;\r\n      }\r\n    }\r\n\r\n    return <Avatar {...this.avatarOptions} {...opts} />\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/PersonGenerator.js\n **/","module.exports = __webpack_public_path__ + \"e6ac5e26bca83e1acbec2359c02c80ef.svg\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/assets/img/avatar.svg\n ** module id = 9\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.4.0\n// \n// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// \n// build: 2015-04-07\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.4.2\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            name = String(name);\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    \n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        name = String(name);\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = name.split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = name.split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n        }\n        return current_event;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = name.split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = name.split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.unbind(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != 'undefined') {\n        // Next for Node.js or CommonJS\n        var eve = require('eve');\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16);\n                       },\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function () {\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        len && requestAnimFrame(frame);\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in gereal case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && requestAnimFrame(frame);\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < (1 / p)) {\n            l = s * n * n;\n        } else {\n            if (n < (2 / p)) {\n                n -= (1.5 / p);\n                l = s * n * n + .75;\n            } else {\n                if (n < (2.5 / p)) {\n                    n -= (2.25 / p);\n                    l = s * n * n + .9375;\n                } else {\n                    n -= (2.625 / p);\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.4.0\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            w = glob.doc.querySelector(String(w));\n            return wrap(w);\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    reURLValue = /^url\\(#?([^)]+)\\)$/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  (type == \"null\" && o === null) ||\n            (type == typeof o && o !== null) ||\n            (type == \"object\" && o === Object(o)) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n > Parameters\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after, bestLength = afterLength, bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n    \n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = (C == 0 ? null :\n         V == r ? (g - b) / C :\n         V == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4\n        );\n    H = ((H + 360) % 6) * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = (C == 0 ? null :\n         M == r ? (g - b) / C :\n         M == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4);\n    H = ((H + 360) % 6) * 60 / 360;\n    L = (M + m) / 2;\n    S = (C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L));\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n    \n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n            (el.node.parentNode && wrap(el.node.parentNode)) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open((postData ? \"POST\" : \"GET\"), url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = URL(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    // animation\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            return this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\(#?([^)]+)\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value.type == \"clipPath\") {\n                var clip = value;\n            } else {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while ((clazz = classes[j++])) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            this.node.appendChild(stop);\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length,\n                start = 0,\n                j = 0;\n            function seed(i, end) {\n                var step = (end - start) / (i - j);\n                for (var k = j; k < i; k++) {\n                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n                }\n                j = i;\n                start = end;\n            }\n            len--;\n            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n                seed(i, stops[i].offset);\n            }\n            stops[len].offset = stops[len].offset || 100;\n            seed(len, stops[len].offset);\n            for (i = 0; i <= len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0, \n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + (+r), y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + ((j % 2) ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n    \n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    Snap.Set = Set;\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n        t1 = Snap.parseTransformString(t1) || [];\n        t2 = Snap.parseTransformString(t2) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if ((tt1[0] != tt2[0]) ||\n                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + (k++) + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(parseFloat(obj));\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (b instanceof Snap.Matrix) {\n                b = b.toTransformString();\n            }\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.svgTransform2string(b);\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n    \n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (typeof blur == \"string\") {\n            color = blur;\n            opacity = color;\n            blur = 4;\n        }\n        if (typeof color != \"string\") {\n            opacity = color;\n            color = \"#000\";\n        }\n        color = color || \"#000\";\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?this=>window,fix=>module.exports=0!./~/snapsvg/dist/snap.svg.js\n ** module id = 10\n ** module chunks = 0\n **/","/*jshint eqnull:true*/\n(function (root) {\n  \"use strict\";\n\n  var GLOBAL_KEY = \"Random\";\n\n  var imul = (typeof Math.imul !== \"function\" || Math.imul(0xffffffff, 5) !== -5 ?\n    function (a, b) {\n      var ah = (a >>> 16) & 0xffff;\n      var al = a & 0xffff;\n      var bh = (b >>> 16) & 0xffff;\n      var bl = b & 0xffff;\n      // the shift by 0 fixes the sign on the high part\n      // the final |0 converts the unsigned value into a signed value\n      return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;\n    } :\n    Math.imul);\n\n  var stringRepeat = (typeof String.prototype.repeat === \"function\" && \"x\".repeat(3) === \"xxx\" ?\n    function (x, y) {\n      return x.repeat(y);\n    } : function (pattern, count) {\n      var result = \"\";\n      while (count > 0) {\n        if (count & 1) {\n          result += pattern;\n        }\n        count >>= 1;\n        pattern += pattern;\n      }\n      return result;\n    });\n\n  function Random(engine) {\n    if (!(this instanceof Random)) {\n      return new Random(engine);\n    }\n\n    if (engine == null) {\n      engine = Random.engines.nativeMath;\n    } else if (typeof engine !== \"function\") {\n      throw new TypeError(\"Expected engine to be a function, got \" + typeof engine);\n    }\n    this.engine = engine;\n  }\n  var proto = Random.prototype;\n\n  Random.engines = {\n    nativeMath: function () {\n      return (Math.random() * 0x100000000) | 0;\n    },\n    mt19937: (function (Int32Array) {\n      // http://en.wikipedia.org/wiki/Mersenne_twister\n      function refreshData(data) {\n        var k = 0;\n        var tmp = 0;\n        for (;\n          (k | 0) < 227; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        for (;\n          (k | 0) < 623; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);\n        data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n      }\n\n      function temper(value) {\n        value ^= value >>> 11;\n        value ^= (value << 7) & 0x9d2c5680;\n        value ^= (value << 15) & 0xefc60000;\n        return value ^ (value >>> 18);\n      }\n\n      function seedWithArray(data, source) {\n        var i = 1;\n        var j = 0;\n        var sourceLength = source.length;\n        var k = Math.max(sourceLength, 624) | 0;\n        var previous = data[0] | 0;\n        for (;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;\n          i = (i + 1) | 0;\n          ++j;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n          if (j >= sourceLength) {\n            j = 0;\n          }\n        }\n        for (k = 623;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;\n          i = (i + 1) | 0;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n        }\n        data[0] = 0x80000000;\n      }\n\n      function mt19937() {\n        var data = new Int32Array(624);\n        var index = 0;\n        var uses = 0;\n\n        function next() {\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n\n          var value = data[index];\n          index = (index + 1) | 0;\n          uses += 1;\n          return temper(value) | 0;\n        }\n        next.getUseCount = function() {\n          return uses;\n        };\n        next.discard = function (count) {\n          uses += count;\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n          while ((count - index) > 624) {\n            count -= 624 - index;\n            refreshData(data);\n            index = 0;\n          }\n          index = (index + count) | 0;\n          return next;\n        };\n        next.seed = function (initial) {\n          var previous = 0;\n          data[0] = previous = initial | 0;\n\n          for (var i = 1; i < 624; i = (i + 1) | 0) {\n            data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;\n          }\n          index = 624;\n          uses = 0;\n          return next;\n        };\n        next.seedWithArray = function (source) {\n          next.seed(0x012bd6aa);\n          seedWithArray(data, source);\n          return next;\n        };\n        next.autoSeed = function () {\n          return next.seedWithArray(Random.generateEntropyArray());\n        };\n        return next;\n      }\n\n      return mt19937;\n    }(typeof Int32Array === \"function\" ? Int32Array : Array)),\n    browserCrypto: (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\" && typeof Int32Array === \"function\") ? (function () {\n      var data = null;\n      var index = 128;\n\n      return function () {\n        if (index >= 128) {\n          if (data === null) {\n            data = new Int32Array(128);\n          }\n          crypto.getRandomValues(data);\n          index = 0;\n        }\n\n        return data[index++] | 0;\n      };\n    }()) : null\n  };\n\n  Random.generateEntropyArray = function () {\n    var array = [];\n    var engine = Random.engines.nativeMath;\n    for (var i = 0; i < 16; ++i) {\n      array[i] = engine() | 0;\n    }\n    array.push(new Date().getTime() | 0);\n    return array;\n  };\n\n  function returnValue(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  // [-0x80000000, 0x7fffffff]\n  Random.int32 = function (engine) {\n    return engine() | 0;\n  };\n  proto.int32 = function () {\n    return Random.int32(this.engine);\n  };\n\n  // [0, 0xffffffff]\n  Random.uint32 = function (engine) {\n    return engine() >>> 0;\n  };\n  proto.uint32 = function () {\n    return Random.uint32(this.engine);\n  };\n\n  // [0, 0x1fffffffffffff]\n  Random.uint53 = function (engine) {\n    var high = engine() & 0x1fffff;\n    var low = engine() >>> 0;\n    return (high * 0x100000000) + low;\n  };\n  proto.uint53 = function () {\n    return Random.uint53(this.engine);\n  };\n\n  // [0, 0x20000000000000]\n  Random.uint53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x200000) {\n        if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low;\n      }\n    }\n  };\n  proto.uint53Full = function () {\n    return Random.uint53Full(this.engine);\n  };\n\n  // [-0x20000000000000, 0x1fffffffffffff]\n  Random.int53 = function (engine) {\n    var high = engine() | 0;\n    var low = engine() >>> 0;\n    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n  };\n  proto.int53 = function () {\n    return Random.int53(this.engine);\n  };\n\n  // [-0x20000000000000, 0x20000000000000]\n  Random.int53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x400000) {\n        if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n      }\n    }\n  };\n  proto.int53Full = function () {\n    return Random.int53Full(this.engine);\n  };\n\n  function add(generate, addend) {\n    if (addend === 0) {\n      return generate;\n    } else {\n      return function (engine) {\n        return generate(engine) + addend;\n      };\n    }\n  }\n\n  Random.integer = (function () {\n    function isPowerOfTwoMinusOne(value) {\n      return ((value + 1) & value) === 0;\n    }\n\n    function bitmask(masking) {\n      return function (engine) {\n        return engine() & masking;\n      };\n    }\n\n    function downscaleToLoopCheckedRange(range) {\n      var extendedRange = range + 1;\n      var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);\n      return function (engine) {\n        var value = 0;\n        do {\n          value = engine() >>> 0;\n        } while (value >= maximum);\n        return value % extendedRange;\n      };\n    }\n\n    function downscaleToRange(range) {\n      if (isPowerOfTwoMinusOne(range)) {\n        return bitmask(range);\n      } else {\n        return downscaleToLoopCheckedRange(range);\n      }\n    }\n\n    function isEvenlyDivisibleByMaxInt32(value) {\n      return (value | 0) === 0;\n    }\n\n    function upscaleWithHighMasking(masking) {\n      return function (engine) {\n        var high = engine() & masking;\n        var low = engine() >>> 0;\n        return (high * 0x100000000) + low;\n      };\n    }\n\n    function upscaleToLoopCheckedRange(extendedRange) {\n      var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() & 0x1fffff;\n          var low = engine() >>> 0;\n          ret = (high * 0x100000000) + low;\n        } while (ret >= maximum);\n        return ret % extendedRange;\n      };\n    }\n\n    function upscaleWithinU53(range) {\n      var extendedRange = range + 1;\n      if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n        var highRange = ((extendedRange / 0x100000000) | 0) - 1;\n        if (isPowerOfTwoMinusOne(highRange)) {\n          return upscaleWithHighMasking(highRange);\n        }\n      }\n      return upscaleToLoopCheckedRange(extendedRange);\n    }\n\n    function upscaleWithinI53AndLoopCheck(min, max) {\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() | 0;\n          var low = engine() >>> 0;\n          ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n        } while (ret < min || ret > max);\n        return ret;\n      };\n    }\n\n    return function (min, max) {\n      min = Math.floor(min);\n      max = Math.floor(max);\n      if (min < -0x20000000000000 || !isFinite(min)) {\n        throw new RangeError(\"Expected min to be at least \" + (-0x20000000000000));\n      } else if (max > 0x20000000000000 || !isFinite(max)) {\n        throw new RangeError(\"Expected max to be at most \" + 0x20000000000000);\n      }\n\n      var range = max - min;\n      if (range <= 0 || !isFinite(range)) {\n        return returnValue(min);\n      } else if (range === 0xffffffff) {\n        if (min === 0) {\n          return Random.uint32;\n        } else {\n          return add(Random.int32, min + 0x80000000);\n        }\n      } else if (range < 0xffffffff) {\n        return add(downscaleToRange(range), min);\n      } else if (range === 0x1fffffffffffff) {\n        return add(Random.uint53, min);\n      } else if (range < 0x1fffffffffffff) {\n        return add(upscaleWithinU53(range), min);\n      } else if (max - 1 - min === 0x1fffffffffffff) {\n        return add(Random.uint53Full, min);\n      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n        return Random.int53Full;\n      } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {\n        return Random.int53;\n      } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {\n        return add(Random.int53, 1);\n      } else if (max === 0x20000000000000) {\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n      } else {\n        return upscaleWithinI53AndLoopCheck(min, max);\n      }\n    };\n  }());\n  proto.integer = function (min, max) {\n    return Random.integer(min, max)(this.engine);\n  };\n\n  // [0, 1] (floating point)\n  Random.realZeroToOneInclusive = function (engine) {\n    return Random.uint53Full(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneInclusive = function () {\n    return Random.realZeroToOneInclusive(this.engine);\n  };\n\n  // [0, 1) (floating point)\n  Random.realZeroToOneExclusive = function (engine) {\n    return Random.uint53(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneExclusive = function () {\n    return Random.realZeroToOneExclusive(this.engine);\n  };\n\n  Random.real = (function () {\n    function multiply(generate, multiplier) {\n      if (multiplier === 1) {\n        return generate;\n      } else if (multiplier === 0) {\n        return function () {\n          return 0;\n        };\n      } else {\n        return function (engine) {\n          return generate(engine) * multiplier;\n        };\n      }\n    }\n\n    return function (left, right, inclusive) {\n      if (!isFinite(left)) {\n        throw new RangeError(\"Expected left to be a finite number\");\n      } else if (!isFinite(right)) {\n        throw new RangeError(\"Expected right to be a finite number\");\n      }\n      return add(\n        multiply(\n          inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,\n          right - left),\n        left);\n    };\n  }());\n  proto.real = function (min, max, inclusive) {\n    return Random.real(min, max, inclusive)(this.engine);\n  };\n\n  Random.bool = (function () {\n    function isLeastBitTrue(engine) {\n      return (engine() & 1) === 1;\n    }\n\n    function lessThan(generate, value) {\n      return function (engine) {\n        return generate(engine) < value;\n      };\n    }\n\n    function probability(percentage) {\n      if (percentage <= 0) {\n        return returnValue(false);\n      } else if (percentage >= 1) {\n        return returnValue(true);\n      } else {\n        var scaled = percentage * 0x100000000;\n        if (scaled % 1 === 0) {\n          return lessThan(Random.int32, (scaled - 0x80000000) | 0);\n        } else {\n          return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));\n        }\n      }\n    }\n\n    return function (numerator, denominator) {\n      if (denominator == null) {\n        if (numerator == null) {\n          return isLeastBitTrue;\n        }\n        return probability(numerator);\n      } else {\n        if (numerator <= 0) {\n          return returnValue(false);\n        } else if (numerator >= denominator) {\n          return returnValue(true);\n        }\n        return lessThan(Random.integer(0, denominator - 1), numerator);\n      }\n    };\n  }());\n  proto.bool = function (numerator, denominator) {\n    return Random.bool(numerator, denominator)(this.engine);\n  };\n\n  function toInteger(value) {\n    var number = +value;\n    if (number < 0) {\n      return Math.ceil(number);\n    } else {\n      return Math.floor(number);\n    }\n  }\n\n  function convertSliceArgument(value, length) {\n    if (value < 0) {\n      return Math.max(value + length, 0);\n    } else {\n      return Math.min(value, length);\n    }\n  }\n  Random.pick = function (engine, array, begin, end) {\n    var length = array.length;\n    var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n    var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n    if (start >= finish) {\n      return void 0;\n    }\n    var distribution = Random.integer(start, finish - 1);\n    return array[distribution(engine)];\n  };\n  proto.pick = function (array, begin, end) {\n    return Random.pick(this.engine, array, begin, end);\n  };\n\n  function returnUndefined() {\n    return void 0;\n  }\n  var slice = Array.prototype.slice;\n  Random.picker = function (array, begin, end) {\n    var clone = slice.call(array, begin, end);\n    if (!clone.length) {\n      return returnUndefined;\n    }\n    var distribution = Random.integer(0, clone.length - 1);\n    return function (engine) {\n      return clone[distribution(engine)];\n    };\n  };\n\n  Random.shuffle = function (engine, array, downTo) {\n    var length = array.length;\n    if (length) {\n      if (downTo == null) {\n        downTo = 0;\n      }\n      for (var i = (length - 1) >>> 0; i > downTo; --i) {\n        var distribution = Random.integer(0, i);\n        var j = distribution(engine);\n        if (i !== j) {\n          var tmp = array[i];\n          array[i] = array[j];\n          array[j] = tmp;\n        }\n      }\n    }\n    return array;\n  };\n  proto.shuffle = function (array) {\n    return Random.shuffle(this.engine, array);\n  };\n\n  Random.sample = function (engine, population, sampleSize) {\n    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n      throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n    }\n\n    if (sampleSize === 0) {\n      return [];\n    }\n\n    var clone = slice.call(population);\n    var length = clone.length;\n    if (length === sampleSize) {\n      return Random.shuffle(engine, clone, 0);\n    }\n    var tailLength = length - sampleSize;\n    return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);\n  };\n  proto.sample = function (population, sampleSize) {\n    return Random.sample(this.engine, population, sampleSize);\n  };\n\n  Random.die = function (sideCount) {\n    return Random.integer(1, sideCount);\n  };\n  proto.die = function (sideCount) {\n    return Random.die(sideCount)(this.engine);\n  };\n\n  Random.dice = function (sideCount, dieCount) {\n    var distribution = Random.die(sideCount);\n    return function (engine) {\n      var result = [];\n      result.length = dieCount;\n      for (var i = 0; i < dieCount; ++i) {\n        result[i] = distribution(engine);\n      }\n      return result;\n    };\n  };\n  proto.dice = function (sideCount, dieCount) {\n    return Random.dice(sideCount, dieCount)(this.engine);\n  };\n\n  // http://en.wikipedia.org/wiki/Universally_unique_identifier\n  Random.uuid4 = (function () {\n    function zeroPad(string, zeroCount) {\n      return stringRepeat(\"0\", zeroCount - string.length) + string;\n    }\n\n    return function (engine) {\n      var a = engine() >>> 0;\n      var b = engine() | 0;\n      var c = engine() | 0;\n      var d = engine() >>> 0;\n\n      return (\n        zeroPad(a.toString(16), 8) +\n        \"-\" +\n        zeroPad((b & 0xffff).toString(16), 4) +\n        \"-\" +\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n        zeroPad(d.toString(16), 8));\n    };\n  }());\n  proto.uuid4 = function () {\n    return Random.uuid4(this.engine);\n  };\n\n  Random.string = (function () {\n    // has 2**x chars, for faster uniform distribution\n    var DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n    return function (pool) {\n      if (pool == null) {\n        pool = DEFAULT_STRING_POOL;\n      }\n\n      var length = pool.length;\n      if (!length) {\n        throw new Error(\"Expected pool not to be an empty string\");\n      }\n\n      var distribution = Random.integer(0, length - 1);\n      return function (engine, length) {\n        var result = \"\";\n        for (var i = 0; i < length; ++i) {\n          var j = distribution(engine);\n          result += pool.charAt(j);\n        }\n        return result;\n      };\n    };\n  }());\n  proto.string = function (length, pool) {\n    return Random.string(pool)(this.engine, length);\n  };\n\n  Random.hex = (function () {\n    var LOWER_HEX_POOL = \"0123456789abcdef\";\n    var lowerHex = Random.string(LOWER_HEX_POOL);\n    var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());\n\n    return function (upper) {\n      if (upper) {\n        return upperHex;\n      } else {\n        return lowerHex;\n      }\n    };\n  }());\n  proto.hex = function (length, upper) {\n    return Random.hex(upper)(this.engine, length);\n  };\n\n  Random.date = function (start, end) {\n    if (!(start instanceof Date)) {\n      throw new TypeError(\"Expected start to be a Date, got \" + typeof start);\n    } else if (!(end instanceof Date)) {\n      throw new TypeError(\"Expected end to be a Date, got \" + typeof end);\n    }\n    var distribution = Random.integer(start.getTime(), end.getTime());\n    return function (engine) {\n      return new Date(distribution(engine));\n    };\n  };\n  proto.date = function (start, end) {\n    return Random.date(start, end)(this.engine);\n  };\n\n  if (typeof define === \"function\" && define.amd) {\n    define(function () {\n      return Random;\n    });\n  } else if (typeof module !== \"undefined\" && typeof require === \"function\") {\n    module.exports = Random;\n  } else {\n    (function () {\n      var oldGlobal = root[GLOBAL_KEY];\n      Random.noConflict = function () {\n        root[GLOBAL_KEY] = oldGlobal;\n        return this;\n      };\n    }());\n    root[GLOBAL_KEY] = Random;\n  }\n}(this));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/random-js/lib/random.js\n ** module id = 11\n ** module chunks = 0\n **/"],"sourceRoot":""}