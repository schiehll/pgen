{"version":3,"sources":["../webpack/universalModuleDefinition","../pgen.js","../webpack/bootstrap 7c43e8db6d90dfafc6c0",".././~/random-js/lib/random.js","../external {\"root\":\"react\",\"amd\":\"react\",\"commonjs\":\"react\",\"commonjs2\":\"react\"}","../D:/Libraries/Dev/Node/freezer/src/Avatar.js","../D:/Libraries/Dev/Node/freezer/src/Colors.js","../D:/Libraries/Dev/Node/freezer/src/Countries.js","../D:/Libraries/Dev/Node/freezer/src/Genetic.js","../D:/Libraries/Dev/Node/freezer/src/Person.js","../D:/Libraries/Dev/Node/freezer/src/PersonGenerator.js",".././src/assets/img/avatar.svg",".././~/snapsvg/dist/snap.svg.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","Random","engine","engines","nativeMath","TypeError","returnValue","value","add","generate","addend","toInteger","number","Math","ceil","floor","convertSliceArgument","length","max","min","returnUndefined","imul","a","b","ah","al","bh","bl","stringRepeat","String","prototype","repeat","x","y","pattern","count","result","proto","random","mt19937","Int32Array","refreshData","data","k","tmp","temper","seedWithArray","source","i","j","sourceLength","previous","next","index","uses","getUseCount","discard","seed","initial","autoSeed","generateEntropyArray","Array","browserCrypto","crypto","getRandomValues","array","push","Date","getTime","int32","uint32","uint53","high","low","uint53Full","int53","int53Full","integer","isPowerOfTwoMinusOne","bitmask","masking","downscaleToLoopCheckedRange","range","extendedRange","maximum","downscaleToRange","isEvenlyDivisibleByMaxInt32","upscaleWithHighMasking","upscaleToLoopCheckedRange","ret","upscaleWithinU53","highRange","upscaleWithinI53AndLoopCheck","isFinite","RangeError","realZeroToOneInclusive","realZeroToOneExclusive","real","multiply","multiplier","left","right","inclusive","bool","isLeastBitTrue","lessThan","probability","percentage","scaled","round","numerator","denominator","pick","begin","end","start","finish","distribution","slice","picker","clone","shuffle","downTo","sample","population","sampleSize","tailLength","die","sideCount","dice","dieCount","uuid4","zeroPad","string","zeroCount","d","toString","DEFAULT_STRING_POOL","pool","Error","charAt","hex","LOWER_HEX_POOL","lowerHex","upperHex","toUpperCase","upper","date","undefined","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","Object","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","_react","_react2","Avatar","_Component","_this","getPrototypeOf","skinColor","genetic","country","eyesColor","hairColor","style","backgroundColor","bgColor","skin","selectAll","attr","fill","eyes","hair","beard","eyebrows","cloth","select","gender","size","transform","_this2","Snap","canvas","svg","load","_setSkinColor","_setEyesColor","countries","isAsian","initials","_setAsianEyes","_setEyesSize","bald","hairs","genders","MALE","_setHairColor","_setClothColor","mouths","scale","append","allEyebrows","_setEyebrowsColor","beards","_setBeardColor","_this3","createElement","ref","width","height","Component","Countries","ethnicity","LIGHT","MEDIUM","DARK","ALL","all","asianCountries","indexOf","_randomJs","_randomJs2","_Countries","_Countries2","_Colors","_Colors2","Genetic","options","colors","FEMALE","hand","LEFT","RIGHT","TWO","arr","arguments","age","minAge","maxAge","handed","_choose","forEach","_getEthnicity","Person","infos","firstName","lastName","_extends","assign","hasOwnProperty","_Person","_Person2","_Genetic","_Genetic2","_Avatar","_Avatar2","_avatar","_avatar2","PersonGenerator","avatarOptions","opts","_generateOptions","avatar","makeAvatar","_PersonGenerator","_PersonGenerator2","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_LOCAL_MODULE_0__","glob","current_event","stop","version","has","separator","comaseparator","wildcard","numsort","events","n","firstDefined","ii","lastDefined","eve","name","scope","l","oldstop","args","listeners","z","indexed","queue","out","ce","zIndex","sort","apply","_events","item","items","jj","nes","names","split","e","es","concat","f","on","exist","event","attrs","nt","subname","RegExp","test","nts","off","unbind","splice","cur","funcs","once","f2","window","mina","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","isArray","idgen","idprefix","ID","timer","now","sta","val","s","ds","dur","B","speed","spd","duration","stopit","update","pause","pdif","get","resume","res","easing","set","frame","len","A","anim","linear","status","time","getById","easeout","pow","easein","easeinout","q","Q","sqrt","X","abs","Y","t","backin","backout","elastic","sin","PI","bounce","w","h","nodeType","wrap","is","Element","doc","querySelector","Paper","$","el","createTextNode","text","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","Str","setAttributeNS","setAttribute","removeAttribute","createElementNS","o","type","toLowerCase","objectToString","repush","cacher","postprocessor","newf","arg","join","cache","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","replace","params","tan","transform2matrix","bbox","tdata","parseTransformString","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","getSomeDefs","node","ownerSVGElement","parentNode","pdefs","defs","make","getSomeSVG","unit2px","getW","E","mgr","getBBox","getH","nam","class","appendChild","removeChild","add2group","list","children","childNodes","snap","hub","paper","tagName","nodeName","anims","_","g","mask","symbol","method","Fragment","frag","parent","desc","ownerDocument","getElementsByTagName","body","dom","contentDocument","jsonFiller","win","document","toFloat","parseFloat","toInt","parseInt","mmax","mmin","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","r","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","paramCounts","u","TString","rgTransform","_unit2px","contains","compareDocumentPosition","adown","documentElement","bup","query","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","innerHTML","firstChild","fragment","ch","toJSON","lastIndexOf","css","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","responseText","getOffset","elem","box","getBoundingClientRect","docElem","clientTop","clientLeft","top","pageYOffset","scrollTop","pageXOffset","scrollLeft","getElementByPoint","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","matrix","fixids","urltest","it","URL","linktest","els","ids","oldid","old","fs","from","to","chld","elproto","isWithoutTransform","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","map","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","eldata","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","matrixproto","norm","normalize","mag","me","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","grad","gradient","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","clipIt","gradrg","tokens","stops","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textContent","rgNotSpace","addClass","pos","clazz","finalValue","classes","curClasses","removeClass","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","rect","circle","preload","onerror","src","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","GgetBBox","step","unshift","gradientLinear","gradientRadial","gradientUnits","addStop","fx","fy","clear","paths","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","ax","ay","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","handler","cb","callbacker","bind","aname","unbound","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","Number","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align"],"mappings":"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","file":"pgen.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pgen\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"pgen\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pgen\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"pgen\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(9);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*jshint eqnull:true*/\n\t(function (root) {\n\t  \"use strict\";\n\t\n\t  var GLOBAL_KEY = \"Random\";\n\t\n\t  var imul = (typeof Math.imul !== \"function\" || Math.imul(0xffffffff, 5) !== -5 ?\n\t    function (a, b) {\n\t      var ah = (a >>> 16) & 0xffff;\n\t      var al = a & 0xffff;\n\t      var bh = (b >>> 16) & 0xffff;\n\t      var bl = b & 0xffff;\n\t      // the shift by 0 fixes the sign on the high part\n\t      // the final |0 converts the unsigned value into a signed value\n\t      return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;\n\t    } :\n\t    Math.imul);\n\t\n\t  var stringRepeat = (typeof String.prototype.repeat === \"function\" && \"x\".repeat(3) === \"xxx\" ?\n\t    function (x, y) {\n\t      return x.repeat(y);\n\t    } : function (pattern, count) {\n\t      var result = \"\";\n\t      while (count > 0) {\n\t        if (count & 1) {\n\t          result += pattern;\n\t        }\n\t        count >>= 1;\n\t        pattern += pattern;\n\t      }\n\t      return result;\n\t    });\n\t\n\t  function Random(engine) {\n\t    if (!(this instanceof Random)) {\n\t      return new Random(engine);\n\t    }\n\t\n\t    if (engine == null) {\n\t      engine = Random.engines.nativeMath;\n\t    } else if (typeof engine !== \"function\") {\n\t      throw new TypeError(\"Expected engine to be a function, got \" + typeof engine);\n\t    }\n\t    this.engine = engine;\n\t  }\n\t  var proto = Random.prototype;\n\t\n\t  Random.engines = {\n\t    nativeMath: function () {\n\t      return (Math.random() * 0x100000000) | 0;\n\t    },\n\t    mt19937: (function (Int32Array) {\n\t      // http://en.wikipedia.org/wiki/Mersenne_twister\n\t      function refreshData(data) {\n\t        var k = 0;\n\t        var tmp = 0;\n\t        for (;\n\t          (k | 0) < 227; k = (k + 1) | 0) {\n\t          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n\t          data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n\t        }\n\t\n\t        for (;\n\t          (k | 0) < 623; k = (k + 1) | 0) {\n\t          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n\t          data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n\t        }\n\t\n\t        tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);\n\t        data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n\t      }\n\t\n\t      function temper(value) {\n\t        value ^= value >>> 11;\n\t        value ^= (value << 7) & 0x9d2c5680;\n\t        value ^= (value << 15) & 0xefc60000;\n\t        return value ^ (value >>> 18);\n\t      }\n\t\n\t      function seedWithArray(data, source) {\n\t        var i = 1;\n\t        var j = 0;\n\t        var sourceLength = source.length;\n\t        var k = Math.max(sourceLength, 624) | 0;\n\t        var previous = data[0] | 0;\n\t        for (;\n\t          (k | 0) > 0; --k) {\n\t          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;\n\t          i = (i + 1) | 0;\n\t          ++j;\n\t          if ((i | 0) > 623) {\n\t            data[0] = data[623];\n\t            i = 1;\n\t          }\n\t          if (j >= sourceLength) {\n\t            j = 0;\n\t          }\n\t        }\n\t        for (k = 623;\n\t          (k | 0) > 0; --k) {\n\t          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;\n\t          i = (i + 1) | 0;\n\t          if ((i | 0) > 623) {\n\t            data[0] = data[623];\n\t            i = 1;\n\t          }\n\t        }\n\t        data[0] = 0x80000000;\n\t      }\n\t\n\t      function mt19937() {\n\t        var data = new Int32Array(624);\n\t        var index = 0;\n\t        var uses = 0;\n\t\n\t        function next() {\n\t          if ((index | 0) >= 624) {\n\t            refreshData(data);\n\t            index = 0;\n\t          }\n\t\n\t          var value = data[index];\n\t          index = (index + 1) | 0;\n\t          uses += 1;\n\t          return temper(value) | 0;\n\t        }\n\t        next.getUseCount = function() {\n\t          return uses;\n\t        };\n\t        next.discard = function (count) {\n\t          uses += count;\n\t          if ((index | 0) >= 624) {\n\t            refreshData(data);\n\t            index = 0;\n\t          }\n\t          while ((count - index) > 624) {\n\t            count -= 624 - index;\n\t            refreshData(data);\n\t            index = 0;\n\t          }\n\t          index = (index + count) | 0;\n\t          return next;\n\t        };\n\t        next.seed = function (initial) {\n\t          var previous = 0;\n\t          data[0] = previous = initial | 0;\n\t\n\t          for (var i = 1; i < 624; i = (i + 1) | 0) {\n\t            data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;\n\t          }\n\t          index = 624;\n\t          uses = 0;\n\t          return next;\n\t        };\n\t        next.seedWithArray = function (source) {\n\t          next.seed(0x012bd6aa);\n\t          seedWithArray(data, source);\n\t          return next;\n\t        };\n\t        next.autoSeed = function () {\n\t          return next.seedWithArray(Random.generateEntropyArray());\n\t        };\n\t        return next;\n\t      }\n\t\n\t      return mt19937;\n\t    }(typeof Int32Array === \"function\" ? Int32Array : Array)),\n\t    browserCrypto: (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\" && typeof Int32Array === \"function\") ? (function () {\n\t      var data = null;\n\t      var index = 128;\n\t\n\t      return function () {\n\t        if (index >= 128) {\n\t          if (data === null) {\n\t            data = new Int32Array(128);\n\t          }\n\t          crypto.getRandomValues(data);\n\t          index = 0;\n\t        }\n\t\n\t        return data[index++] | 0;\n\t      };\n\t    }()) : null\n\t  };\n\t\n\t  Random.generateEntropyArray = function () {\n\t    var array = [];\n\t    var engine = Random.engines.nativeMath;\n\t    for (var i = 0; i < 16; ++i) {\n\t      array[i] = engine() | 0;\n\t    }\n\t    array.push(new Date().getTime() | 0);\n\t    return array;\n\t  };\n\t\n\t  function returnValue(value) {\n\t    return function () {\n\t      return value;\n\t    };\n\t  }\n\t\n\t  // [-0x80000000, 0x7fffffff]\n\t  Random.int32 = function (engine) {\n\t    return engine() | 0;\n\t  };\n\t  proto.int32 = function () {\n\t    return Random.int32(this.engine);\n\t  };\n\t\n\t  // [0, 0xffffffff]\n\t  Random.uint32 = function (engine) {\n\t    return engine() >>> 0;\n\t  };\n\t  proto.uint32 = function () {\n\t    return Random.uint32(this.engine);\n\t  };\n\t\n\t  // [0, 0x1fffffffffffff]\n\t  Random.uint53 = function (engine) {\n\t    var high = engine() & 0x1fffff;\n\t    var low = engine() >>> 0;\n\t    return (high * 0x100000000) + low;\n\t  };\n\t  proto.uint53 = function () {\n\t    return Random.uint53(this.engine);\n\t  };\n\t\n\t  // [0, 0x20000000000000]\n\t  Random.uint53Full = function (engine) {\n\t    while (true) {\n\t      var high = engine() | 0;\n\t      if (high & 0x200000) {\n\t        if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {\n\t          return 0x20000000000000;\n\t        }\n\t      } else {\n\t        var low = engine() >>> 0;\n\t        return ((high & 0x1fffff) * 0x100000000) + low;\n\t      }\n\t    }\n\t  };\n\t  proto.uint53Full = function () {\n\t    return Random.uint53Full(this.engine);\n\t  };\n\t\n\t  // [-0x20000000000000, 0x1fffffffffffff]\n\t  Random.int53 = function (engine) {\n\t    var high = engine() | 0;\n\t    var low = engine() >>> 0;\n\t    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n\t  };\n\t  proto.int53 = function () {\n\t    return Random.int53(this.engine);\n\t  };\n\t\n\t  // [-0x20000000000000, 0x20000000000000]\n\t  Random.int53Full = function (engine) {\n\t    while (true) {\n\t      var high = engine() | 0;\n\t      if (high & 0x400000) {\n\t        if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {\n\t          return 0x20000000000000;\n\t        }\n\t      } else {\n\t        var low = engine() >>> 0;\n\t        return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n\t      }\n\t    }\n\t  };\n\t  proto.int53Full = function () {\n\t    return Random.int53Full(this.engine);\n\t  };\n\t\n\t  function add(generate, addend) {\n\t    if (addend === 0) {\n\t      return generate;\n\t    } else {\n\t      return function (engine) {\n\t        return generate(engine) + addend;\n\t      };\n\t    }\n\t  }\n\t\n\t  Random.integer = (function () {\n\t    function isPowerOfTwoMinusOne(value) {\n\t      return ((value + 1) & value) === 0;\n\t    }\n\t\n\t    function bitmask(masking) {\n\t      return function (engine) {\n\t        return engine() & masking;\n\t      };\n\t    }\n\t\n\t    function downscaleToLoopCheckedRange(range) {\n\t      var extendedRange = range + 1;\n\t      var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);\n\t      return function (engine) {\n\t        var value = 0;\n\t        do {\n\t          value = engine() >>> 0;\n\t        } while (value >= maximum);\n\t        return value % extendedRange;\n\t      };\n\t    }\n\t\n\t    function downscaleToRange(range) {\n\t      if (isPowerOfTwoMinusOne(range)) {\n\t        return bitmask(range);\n\t      } else {\n\t        return downscaleToLoopCheckedRange(range);\n\t      }\n\t    }\n\t\n\t    function isEvenlyDivisibleByMaxInt32(value) {\n\t      return (value | 0) === 0;\n\t    }\n\t\n\t    function upscaleWithHighMasking(masking) {\n\t      return function (engine) {\n\t        var high = engine() & masking;\n\t        var low = engine() >>> 0;\n\t        return (high * 0x100000000) + low;\n\t      };\n\t    }\n\t\n\t    function upscaleToLoopCheckedRange(extendedRange) {\n\t      var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);\n\t      return function (engine) {\n\t        var ret = 0;\n\t        do {\n\t          var high = engine() & 0x1fffff;\n\t          var low = engine() >>> 0;\n\t          ret = (high * 0x100000000) + low;\n\t        } while (ret >= maximum);\n\t        return ret % extendedRange;\n\t      };\n\t    }\n\t\n\t    function upscaleWithinU53(range) {\n\t      var extendedRange = range + 1;\n\t      if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n\t        var highRange = ((extendedRange / 0x100000000) | 0) - 1;\n\t        if (isPowerOfTwoMinusOne(highRange)) {\n\t          return upscaleWithHighMasking(highRange);\n\t        }\n\t      }\n\t      return upscaleToLoopCheckedRange(extendedRange);\n\t    }\n\t\n\t    function upscaleWithinI53AndLoopCheck(min, max) {\n\t      return function (engine) {\n\t        var ret = 0;\n\t        do {\n\t          var high = engine() | 0;\n\t          var low = engine() >>> 0;\n\t          ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n\t        } while (ret < min || ret > max);\n\t        return ret;\n\t      };\n\t    }\n\t\n\t    return function (min, max) {\n\t      min = Math.floor(min);\n\t      max = Math.floor(max);\n\t      if (min < -0x20000000000000 || !isFinite(min)) {\n\t        throw new RangeError(\"Expected min to be at least \" + (-0x20000000000000));\n\t      } else if (max > 0x20000000000000 || !isFinite(max)) {\n\t        throw new RangeError(\"Expected max to be at most \" + 0x20000000000000);\n\t      }\n\t\n\t      var range = max - min;\n\t      if (range <= 0 || !isFinite(range)) {\n\t        return returnValue(min);\n\t      } else if (range === 0xffffffff) {\n\t        if (min === 0) {\n\t          return Random.uint32;\n\t        } else {\n\t          return add(Random.int32, min + 0x80000000);\n\t        }\n\t      } else if (range < 0xffffffff) {\n\t        return add(downscaleToRange(range), min);\n\t      } else if (range === 0x1fffffffffffff) {\n\t        return add(Random.uint53, min);\n\t      } else if (range < 0x1fffffffffffff) {\n\t        return add(upscaleWithinU53(range), min);\n\t      } else if (max - 1 - min === 0x1fffffffffffff) {\n\t        return add(Random.uint53Full, min);\n\t      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n\t        return Random.int53Full;\n\t      } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {\n\t        return Random.int53;\n\t      } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {\n\t        return add(Random.int53, 1);\n\t      } else if (max === 0x20000000000000) {\n\t        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n\t      } else {\n\t        return upscaleWithinI53AndLoopCheck(min, max);\n\t      }\n\t    };\n\t  }());\n\t  proto.integer = function (min, max) {\n\t    return Random.integer(min, max)(this.engine);\n\t  };\n\t\n\t  // [0, 1] (floating point)\n\t  Random.realZeroToOneInclusive = function (engine) {\n\t    return Random.uint53Full(engine) / 0x20000000000000;\n\t  };\n\t  proto.realZeroToOneInclusive = function () {\n\t    return Random.realZeroToOneInclusive(this.engine);\n\t  };\n\t\n\t  // [0, 1) (floating point)\n\t  Random.realZeroToOneExclusive = function (engine) {\n\t    return Random.uint53(engine) / 0x20000000000000;\n\t  };\n\t  proto.realZeroToOneExclusive = function () {\n\t    return Random.realZeroToOneExclusive(this.engine);\n\t  };\n\t\n\t  Random.real = (function () {\n\t    function multiply(generate, multiplier) {\n\t      if (multiplier === 1) {\n\t        return generate;\n\t      } else if (multiplier === 0) {\n\t        return function () {\n\t          return 0;\n\t        };\n\t      } else {\n\t        return function (engine) {\n\t          return generate(engine) * multiplier;\n\t        };\n\t      }\n\t    }\n\t\n\t    return function (left, right, inclusive) {\n\t      if (!isFinite(left)) {\n\t        throw new RangeError(\"Expected left to be a finite number\");\n\t      } else if (!isFinite(right)) {\n\t        throw new RangeError(\"Expected right to be a finite number\");\n\t      }\n\t      return add(\n\t        multiply(\n\t          inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,\n\t          right - left),\n\t        left);\n\t    };\n\t  }());\n\t  proto.real = function (min, max, inclusive) {\n\t    return Random.real(min, max, inclusive)(this.engine);\n\t  };\n\t\n\t  Random.bool = (function () {\n\t    function isLeastBitTrue(engine) {\n\t      return (engine() & 1) === 1;\n\t    }\n\t\n\t    function lessThan(generate, value) {\n\t      return function (engine) {\n\t        return generate(engine) < value;\n\t      };\n\t    }\n\t\n\t    function probability(percentage) {\n\t      if (percentage <= 0) {\n\t        return returnValue(false);\n\t      } else if (percentage >= 1) {\n\t        return returnValue(true);\n\t      } else {\n\t        var scaled = percentage * 0x100000000;\n\t        if (scaled % 1 === 0) {\n\t          return lessThan(Random.int32, (scaled - 0x80000000) | 0);\n\t        } else {\n\t          return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));\n\t        }\n\t      }\n\t    }\n\t\n\t    return function (numerator, denominator) {\n\t      if (denominator == null) {\n\t        if (numerator == null) {\n\t          return isLeastBitTrue;\n\t        }\n\t        return probability(numerator);\n\t      } else {\n\t        if (numerator <= 0) {\n\t          return returnValue(false);\n\t        } else if (numerator >= denominator) {\n\t          return returnValue(true);\n\t        }\n\t        return lessThan(Random.integer(0, denominator - 1), numerator);\n\t      }\n\t    };\n\t  }());\n\t  proto.bool = function (numerator, denominator) {\n\t    return Random.bool(numerator, denominator)(this.engine);\n\t  };\n\t\n\t  function toInteger(value) {\n\t    var number = +value;\n\t    if (number < 0) {\n\t      return Math.ceil(number);\n\t    } else {\n\t      return Math.floor(number);\n\t    }\n\t  }\n\t\n\t  function convertSliceArgument(value, length) {\n\t    if (value < 0) {\n\t      return Math.max(value + length, 0);\n\t    } else {\n\t      return Math.min(value, length);\n\t    }\n\t  }\n\t  Random.pick = function (engine, array, begin, end) {\n\t    var length = array.length;\n\t    var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n\t    var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n\t    if (start >= finish) {\n\t      return void 0;\n\t    }\n\t    var distribution = Random.integer(start, finish - 1);\n\t    return array[distribution(engine)];\n\t  };\n\t  proto.pick = function (array, begin, end) {\n\t    return Random.pick(this.engine, array, begin, end);\n\t  };\n\t\n\t  function returnUndefined() {\n\t    return void 0;\n\t  }\n\t  var slice = Array.prototype.slice;\n\t  Random.picker = function (array, begin, end) {\n\t    var clone = slice.call(array, begin, end);\n\t    if (!clone.length) {\n\t      return returnUndefined;\n\t    }\n\t    var distribution = Random.integer(0, clone.length - 1);\n\t    return function (engine) {\n\t      return clone[distribution(engine)];\n\t    };\n\t  };\n\t\n\t  Random.shuffle = function (engine, array, downTo) {\n\t    var length = array.length;\n\t    if (length) {\n\t      if (downTo == null) {\n\t        downTo = 0;\n\t      }\n\t      for (var i = (length - 1) >>> 0; i > downTo; --i) {\n\t        var distribution = Random.integer(0, i);\n\t        var j = distribution(engine);\n\t        if (i !== j) {\n\t          var tmp = array[i];\n\t          array[i] = array[j];\n\t          array[j] = tmp;\n\t        }\n\t      }\n\t    }\n\t    return array;\n\t  };\n\t  proto.shuffle = function (array) {\n\t    return Random.shuffle(this.engine, array);\n\t  };\n\t\n\t  Random.sample = function (engine, population, sampleSize) {\n\t    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n\t      throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n\t    }\n\t\n\t    if (sampleSize === 0) {\n\t      return [];\n\t    }\n\t\n\t    var clone = slice.call(population);\n\t    var length = clone.length;\n\t    if (length === sampleSize) {\n\t      return Random.shuffle(engine, clone, 0);\n\t    }\n\t    var tailLength = length - sampleSize;\n\t    return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);\n\t  };\n\t  proto.sample = function (population, sampleSize) {\n\t    return Random.sample(this.engine, population, sampleSize);\n\t  };\n\t\n\t  Random.die = function (sideCount) {\n\t    return Random.integer(1, sideCount);\n\t  };\n\t  proto.die = function (sideCount) {\n\t    return Random.die(sideCount)(this.engine);\n\t  };\n\t\n\t  Random.dice = function (sideCount, dieCount) {\n\t    var distribution = Random.die(sideCount);\n\t    return function (engine) {\n\t      var result = [];\n\t      result.length = dieCount;\n\t      for (var i = 0; i < dieCount; ++i) {\n\t        result[i] = distribution(engine);\n\t      }\n\t      return result;\n\t    };\n\t  };\n\t  proto.dice = function (sideCount, dieCount) {\n\t    return Random.dice(sideCount, dieCount)(this.engine);\n\t  };\n\t\n\t  // http://en.wikipedia.org/wiki/Universally_unique_identifier\n\t  Random.uuid4 = (function () {\n\t    function zeroPad(string, zeroCount) {\n\t      return stringRepeat(\"0\", zeroCount - string.length) + string;\n\t    }\n\t\n\t    return function (engine) {\n\t      var a = engine() >>> 0;\n\t      var b = engine() | 0;\n\t      var c = engine() | 0;\n\t      var d = engine() >>> 0;\n\t\n\t      return (\n\t        zeroPad(a.toString(16), 8) +\n\t        \"-\" +\n\t        zeroPad((b & 0xffff).toString(16), 4) +\n\t        \"-\" +\n\t        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n\t        \"-\" +\n\t        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n\t        \"-\" +\n\t        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n\t        zeroPad(d.toString(16), 8));\n\t    };\n\t  }());\n\t  proto.uuid4 = function () {\n\t    return Random.uuid4(this.engine);\n\t  };\n\t\n\t  Random.string = (function () {\n\t    // has 2**x chars, for faster uniform distribution\n\t    var DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\t\n\t    return function (pool) {\n\t      if (pool == null) {\n\t        pool = DEFAULT_STRING_POOL;\n\t      }\n\t\n\t      var length = pool.length;\n\t      if (!length) {\n\t        throw new Error(\"Expected pool not to be an empty string\");\n\t      }\n\t\n\t      var distribution = Random.integer(0, length - 1);\n\t      return function (engine, length) {\n\t        var result = \"\";\n\t        for (var i = 0; i < length; ++i) {\n\t          var j = distribution(engine);\n\t          result += pool.charAt(j);\n\t        }\n\t        return result;\n\t      };\n\t    };\n\t  }());\n\t  proto.string = function (length, pool) {\n\t    return Random.string(pool)(this.engine, length);\n\t  };\n\t\n\t  Random.hex = (function () {\n\t    var LOWER_HEX_POOL = \"0123456789abcdef\";\n\t    var lowerHex = Random.string(LOWER_HEX_POOL);\n\t    var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());\n\t\n\t    return function (upper) {\n\t      if (upper) {\n\t        return upperHex;\n\t      } else {\n\t        return lowerHex;\n\t      }\n\t    };\n\t  }());\n\t  proto.hex = function (length, upper) {\n\t    return Random.hex(upper)(this.engine, length);\n\t  };\n\t\n\t  Random.date = function (start, end) {\n\t    if (!(start instanceof Date)) {\n\t      throw new TypeError(\"Expected start to be a Date, got \" + typeof start);\n\t    } else if (!(end instanceof Date)) {\n\t      throw new TypeError(\"Expected end to be a Date, got \" + typeof end);\n\t    }\n\t    var distribution = Random.integer(start.getTime(), end.getTime());\n\t    return function (engine) {\n\t      return new Date(distribution(engine));\n\t    };\n\t  };\n\t  proto.date = function (start, end) {\n\t    return Random.date(start, end)(this.engine);\n\t  };\n\t\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t      return Random;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module !== \"undefined\" && typeof require === \"function\") {\n\t    module.exports = Random;\n\t  } else {\n\t    (function () {\n\t      var oldGlobal = root[GLOBAL_KEY];\n\t      Random.noConflict = function () {\n\t        root[GLOBAL_KEY] = oldGlobal;\n\t        return this;\n\t      };\n\t    }());\n\t    root[GLOBAL_KEY] = Random;\n\t  }\n\t}(this));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Avatar = function (_Component) {\n\t  _inherits(Avatar, _Component);\n\t\n\t  function Avatar(props) {\n\t    _classCallCheck(this, Avatar);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Avatar).call(this, props));\n\t\n\t    _this.skinColor = props.genetic.skinColor(props.country);\n\t    _this.eyesColor = props.genetic.eyesColor(props.country, _this.skinColor);\n\t    _this.hairColor = props.genetic.hairColor(props.country, _this.skinColor);\n\t\n\t    _this.style = {\n\t      backgroundColor: _this.props.bgColor\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Avatar, [{\n\t    key: '_setSkinColor',\n\t    value: function _setSkinColor(skin) {\n\t      skin.selectAll('[fill=\"#ffcc99\"]').attr({\n\t        fill: this.skinColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setEyesColor',\n\t    value: function _setEyesColor(eyes) {\n\t      eyes.selectAll('path').attr({\n\t        fill: this.eyesColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setHairColor',\n\t    value: function _setHairColor(hair) {\n\t      hair.selectAll('path').attr({\n\t        fill: this.hairColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setBeardColor',\n\t    value: function _setBeardColor(beard) {\n\t      beard.selectAll('path').attr({\n\t        fill: this.hairColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setEyebrowsColor',\n\t    value: function _setEyebrowsColor(eyebrows) {\n\t      eyebrows.selectAll('path').attr({\n\t        fill: this.hairColor\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setClothColor',\n\t    value: function _setClothColor(cloth) {\n\t      cloth.select('#' + this.props.gender + '_cloth_base').attr({\n\t        fill: '#333333'\n\t      });\n\t    }\n\t  }, {\n\t    key: '_setEyesSize',\n\t    value: function _setEyesSize(eyes) {\n\t      var size = this.props.genetic.random.integer(6, 10) / 10;\n\t      eyes.select('#right').transform('s' + size);\n\t      eyes.select('#left').transform('s' + size);\n\t    }\n\t  }, {\n\t    key: '_setAsianEyes',\n\t    value: function _setAsianEyes(eyes) {\n\t      eyes.select('#right').transform('r-60, s0.6');\n\t      eyes.select('#left').transform('r60, s0.6');\n\t    }\n\t  }, {\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var Snap = __webpack_require__(11);\n\t      var canvas = Snap(this.svg);\n\t\n\t      Snap.load(this.props.svg, function (svg) {\n\t        var skin = svg.select('#base');\n\t        _this2._setSkinColor(skin);\n\t\n\t        var eyes = svg.select('#eyes');\n\t        _this2._setEyesColor(eyes);\n\t\n\t        if (_this2.props.genetic.countries.isAsian(_this2.props.country.initials)) {\n\t          _this2._setAsianEyes(eyes);\n\t        } else {\n\t          _this2._setEyesSize(eyes);\n\t        }\n\t\n\t        var hair = null;\n\t        var bald = false;\n\t        var hairs = svg.selectAll('g[id^=\"' + _this2.props.gender + '_hair_\"');\n\t        //10% chance to be bald if male\n\t        if (_this2.props.gender == _this2.props.genetic.genders.MALE && _this2.props.genetic.random.bool(0.1)) {\n\t          bald = true;\n\t        }\n\t\n\t        if (!bald) {\n\t          hair = svg.select('#' + _this2.props.gender + '_hair_' + _this2.props.genetic.random.integer(1, hairs.length));\n\t        }\n\t\n\t        if (hair !== null) {\n\t          _this2._setHairColor(hair);\n\t        }\n\t\n\t        var cloth = svg.select('#' + _this2.props.gender + '_cloth_1');\n\t        _this2._setClothColor(cloth);\n\t\n\t        var mouths = svg.selectAll('g[id^=\"mouth_\"');\n\t\n\t        var scale = _this2.props.size / 250;\n\t\n\t        canvas.append(svg.selectAll('filter'));\n\t        canvas.append(skin.transform('s' + scale));\n\t        canvas.append(cloth.transform('s' + scale));\n\t        canvas.append(eyes.transform('s' + scale));\n\t        canvas.append(svg.select('#mouth_' + _this2.props.genetic.random.integer(1, mouths.length)).transform('s' + scale));\n\t        if (hair !== null) {\n\t          canvas.append(hair.transform('s' + scale));\n\t        }\n\t\n\t        if (_this2.props.gender == _this2.props.genetic.genders.MALE) {\n\t          var allEyebrows = svg.selectAll('g[id^=\"eyebrows_\"');\n\t          var eyebrows = svg.select('#eyebrows_' + _this2.props.genetic.random.integer(1, allEyebrows.length));\n\t          _this2._setEyebrowsColor(eyebrows);\n\t          canvas.append(eyebrows.transform('s' + scale));\n\t        }\n\t\n\t        //50% chance to have a bear if male\n\t        if (_this2.props.gender == _this2.props.genetic.genders.MALE && _this2.props.genetic.random.bool(0.5)) {\n\t          var beards = svg.selectAll('g[id^=\"beard_\"');\n\t          var beard = svg.select('#beard_' + _this2.props.genetic.random.integer(1, beards.length));\n\t          _this2._setBeardColor(beard);\n\t          canvas.append(beard.transform('s' + scale));\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      return _react2.default.createElement('svg', { style: this.style, ref: function ref(svg) {\n\t          return _this3.svg = svg;\n\t        }, width: this.props.size, height: this.props.size });\n\t    }\n\t  }]);\n\t\n\t  return Avatar;\n\t}(_react.Component);\n\n\texports.default = Avatar;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  skin: [\n\t  //light\n\t  '#ffe5c8', '#ffdabe', '#ffceb4', '#ffc3aa', '#f0b8a0',\n\t  //medium\n\t  '#e1ac96', '#d2a18c', '#c39582', '#b48a78', '#a57e6e',\n\t  //dark\n\t  '#967264', '#87675a', '#785c50', '#695046', '#5a453c'],\n\t  eyes: ['#222222' /*black*/, '#663300' /*brown*/, '#4da6ff' /*blue*/, '#00b259' /*green*/],\n\t  hair: ['#222222' /*black*/, '#663300' /*brown*/, '#d9a300' /*blonde*/, '#ff5c26' /*orange*/]\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Countries = function () {\n\t  function Countries() {\n\t    _classCallCheck(this, Countries);\n\t\n\t    this.ethnicity = {\n\t      LIGHT: 'LIGHT',\n\t      MEDIUM: 'MEDIUM',\n\t      DARK: 'DARK',\n\t      ALL: 'ALL'\n\t    };\n\t\n\t    this.all = [{\n\t      initials: 'ARG',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }, {\n\t      initials: 'BRA',\n\t      ethnicity: this.ethnicity.ALL\n\t    }, {\n\t      initials: 'CHN',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }, {\n\t      initials: 'JPN',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }, {\n\t      initials: 'USA',\n\t      ethnicity: this.ethnicity.ALL\n\t    }, {\n\t      initials: 'RUS',\n\t      ethnicity: this.ethnicity.LIGHT\n\t    }];\n\t\n\t    this.asianCountries = ['CHN', 'JPN'];\n\t  }\n\t\n\t  _createClass(Countries, [{\n\t    key: 'isAsian',\n\t    value: function isAsian(country) {\n\t      return this.asianCountries.indexOf(country) !== -1;\n\t    }\n\t  }]);\n\t\n\t  return Countries;\n\t}();\n\n\texports.default = Countries;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _randomJs = __webpack_require__(1);\n\t\n\tvar _randomJs2 = _interopRequireDefault(_randomJs);\n\t\n\tvar _Countries = __webpack_require__(5);\n\t\n\tvar _Countries2 = _interopRequireDefault(_Countries);\n\t\n\tvar _Colors = __webpack_require__(4);\n\t\n\tvar _Colors2 = _interopRequireDefault(_Colors);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Genetic = function () {\n\t  function Genetic(options) {\n\t    _classCallCheck(this, Genetic);\n\t\n\t    this.options = options;\n\t    this.engine = _randomJs2.default.engines.mt19937().seed(this.options.seed);\n\t    this.random = new _randomJs2.default(this.engine);\n\t    this.colors = _Colors2.default;\n\t    this.countries = new _Countries2.default();\n\t    this.genders = { MALE: 'M', FEMALE: 'F' };\n\t    this.hand = { LEFT: 'LEFT', RIGHT: 'RIGHT', TWO: 'TWO' };\n\t  }\n\t\n\t  _createClass(Genetic, [{\n\t    key: '_choose',\n\t    value: function _choose(arr) {\n\t      var start = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t      var end = arguments.length <= 2 || arguments[2] === undefined ? arr.length - 1 : arguments[2];\n\t\n\t      if (arr.length > end && arr.length > start && start > -1 && end > -1) {\n\t        return arr[this.random.integer(start, end)];\n\t      }\n\t\n\t      return arr[this.random.integer(0, arr.length - 1)];\n\t    }\n\t  }, {\n\t    key: '_getEthnicity',\n\t    value: function _getEthnicity(skinColor) {\n\t      if (this.colors.skin.indexOf(skinColor) > 4 && this.colors.skin.indexOf(skinColor) < 10) {\n\t        return this.countries.ethnicity.MEDIUM;\n\t      }\n\t\n\t      if (this.colors.skin.indexOf(skinColor) > 9) {\n\t        return this.countries.ethnicity.DARK;\n\t      }\n\t\n\t      return this.countries.ethnicity.LIGHT;\n\t    }\n\t  }, {\n\t    key: 'age',\n\t    value: function age() {\n\t      if (this.options.age) {\n\t        return this.options.age;\n\t      }\n\t\n\t      var minAge = this.options.minAge || 15;\n\t      var maxAge = this.options.maxAge || 70;\n\t      return this.random.integer(minAge, maxAge);\n\t    }\n\t  }, {\n\t    key: 'handed',\n\t    value: function handed() {\n\t      if (this.options.handed) {\n\t        return this.options.handed;\n\t      }\n\t\n\t      return this._choose([this.hand.LEFT, this.hand.RIGHT, this.hand.TWO]);\n\t    }\n\t  }, {\n\t    key: 'gender',\n\t    value: function gender() {\n\t      if (this.options.gender) {\n\t        return this.options.gender;\n\t      }\n\t\n\t      return this.random.bool() ? this.genders.MALE : this.genders.FEMALE;\n\t    }\n\t  }, {\n\t    key: 'country',\n\t    value: function country() {\n\t      var _this = this;\n\t\n\t      var country = this._choose(this.countries.all);\n\t\n\t      if (this.options.country) {\n\t        this.countries.all.forEach(function (c) {\n\t          if (c.initials === _this.options.country) {\n\t            country = c;\n\t            return;\n\t          }\n\t        });\n\t      }\n\t\n\t      return country;\n\t    }\n\t  }, {\n\t    key: 'skinColor',\n\t    value: function skinColor(country) {\n\t      switch (country.ethnicity) {\n\t        case this.countries.ethnicity.LIGHT:\n\t          return this._choose(this.colors.skin, 0, 4);\n\t        case this.countries.ethnicity.MEDIUM:\n\t          return this._choose(this.colors.skin, 5, 9);\n\t        case this.countries.ethnicity.DARK:\n\t          return this._choose(this.colors.skin, 10, 14);\n\t        default:\n\t          return this._choose(this.colors.skin);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'eyesColor',\n\t    value: function eyesColor(country, skinColor) {\n\t      var ethnicity = country.ethnicity;\n\t      if (country.ethnicity == this.countries.ethnicity.ALL) {\n\t        ethnicity = this._getEthnicity(skinColor);\n\t      }\n\t\n\t      if (ethnicity == this.countries.ethnicity.DARK || ethnicity == this.countries.ethnicity.MEDIUM || this.countries.isAsian(country.initials)) {\n\t        return this.colors.eyes[0];\n\t      }\n\t\n\t      return this._choose(this.colors.eyes);\n\t    }\n\t  }, {\n\t    key: 'hairColor',\n\t    value: function hairColor(country, skinColor) {\n\t      var ethnicity = country.ethnicity;\n\t      if (country.ethnicity == this.countries.ethnicity.ALL) {\n\t        ethnicity = this._getEthnicity(skinColor);\n\t      }\n\t\n\t      if (ethnicity == this.countries.ethnicity.DARK || this.countries.isAsian(country.initials)) {\n\t        return this.colors.hair[0];\n\t      }\n\t\n\t      //5% chance to be a ginger\n\t      if (ethnicity == this.countries.ethnicity.LIGHT && this.random.bool(0.05)) {\n\t        return this.colors.hair[this.colors.hair.length - 1];\n\t      }\n\t\n\t      if (ethnicity == this.countries.ethnicity.LIGHT) {\n\t        return this._choose(this.colors.hair, 0, this.colors.hair.length - 2);\n\t      }\n\t\n\t      return this._choose(this.colors.hair, 0, this.colors.hair.length - 3);\n\t    }\n\t  }]);\n\t\n\t  return Genetic;\n\t}();\n\n\texports.default = Genetic;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Person = function () {\n\t  function Person(infos) {\n\t    _classCallCheck(this, Person);\n\t\n\t    this.infos = infos;\n\t  }\n\t\n\t  _createClass(Person, [{\n\t    key: \"name\",\n\t    value: function name() {\n\t      return this.infos.firstName + \" \" + this.infos.lastName;\n\t    }\n\t  }]);\n\t\n\t  return Person;\n\t}();\n\n\texports.default = Person;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _randomJs = __webpack_require__(1);\n\t\n\tvar _randomJs2 = _interopRequireDefault(_randomJs);\n\t\n\tvar _Person = __webpack_require__(7);\n\t\n\tvar _Person2 = _interopRequireDefault(_Person);\n\t\n\tvar _Genetic = __webpack_require__(6);\n\t\n\tvar _Genetic2 = _interopRequireDefault(_Genetic);\n\t\n\tvar _Avatar = __webpack_require__(3);\n\t\n\tvar _Avatar2 = _interopRequireDefault(_Avatar);\n\t\n\tvar _avatar = __webpack_require__(10);\n\t\n\tvar _avatar2 = _interopRequireDefault(_avatar);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar PersonGenerator = function () {\n\t  function PersonGenerator(avatarOptions) {\n\t    _classCallCheck(this, PersonGenerator);\n\t\n\t    if (!avatarOptions.svg) {\n\t      avatarOptions.svg = _avatar2.default;\n\t    }\n\t\n\t    if (!avatarOptions.size) {\n\t      avatarOptions.size = 250;\n\t    }\n\t\n\t    if (!avatarOptions.bgColor) {\n\t      avatarOptions.bgColor = '#f1f1f1';\n\t    }\n\t\n\t    this.avatarOptions = avatarOptions;\n\t  }\n\t\n\t  _createClass(PersonGenerator, [{\n\t    key: '_generateOptions',\n\t    value: function _generateOptions(options) {\n\t      var opts = {};\n\t      var seed = _randomJs2.default.integer(1, 1000000)(_randomJs2.default.engines.mt19937().autoSeed());\n\t\n\t      if (!options) {\n\t        opts.seed = seed;\n\t      } else {\n\t        opts = options;\n\t        if (!opts.seed) {\n\t          opts.seed = seed;\n\t        }\n\t      }\n\t\n\t      var genetic = new _Genetic2.default(opts);\n\t\n\t      var age = genetic.age();\n\t      var gender = genetic.gender();\n\t      var country = genetic.country();\n\t      var handed = genetic.handed();\n\t\n\t      return { genetic: genetic, age: age, gender: gender, country: country, handed: handed };\n\t    }\n\t  }, {\n\t    key: 'make',\n\t    value: function make(options) {\n\t      var opts = options ? this._generateOptions(options) : this._generateOptions();\n\t\n\t      return new _Person2.default({\n\t        firstName: 'First',\n\t        lastName: 'Last',\n\t        age: opts.age,\n\t        country: opts.country.initials,\n\t        gender: opts.gender,\n\t        handed: opts.handed,\n\t        avatar: opts.avatar || this.makeAvatar(opts)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'makeAvatar',\n\t    value: function makeAvatar(options) {\n\t      var opts = {};\n\t\n\t      if (!options) {\n\t        opts = this._generateOptions();\n\t      } else {\n\t        if (!options.genetic) {\n\t          opts = this._generateOptions(options);\n\t        } else {\n\t          opts = options;\n\t        }\n\t      }\n\t\n\t      return _react2.default.createElement(_Avatar2.default, _extends({}, this.avatarOptions, opts));\n\t    }\n\t  }]);\n\t\n\t  return PersonGenerator;\n\t}();\n\n\texports.default = PersonGenerator;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _PersonGenerator = __webpack_require__(8);\n\n\tvar _PersonGenerator2 = _interopRequireDefault(_PersonGenerator);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = _PersonGenerator2.default;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"e6ac5e26bca83e1acbec2359c02c80ef.svg\";\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\tvar fix = module.exports=0;\n\t\n\t// Snap.svg 0.4.0\n\t// \n\t// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// \n\t// build: 2015-04-07\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\t\n\t(function (glob) {\n\t    var version = \"0.4.2\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\t\n\t     * Fires event with given `name`, given scope and other parameters.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\t\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            name = String(name);\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\t\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\t\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    \n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        name = String(name);\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = name.split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = name.split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n\t        }\n\t        return current_event;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = name.split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = name.split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.unbind(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))) : (glob.eve = eve));\n\t})(this);\n\t\n\t(function (glob, factory) {\n\t    // AMD support\n\t    if (true) {\n\t        // Define as an anonymous module\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n\t            return factory(glob, eve);\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports != 'undefined') {\n\t        // Next for Node.js or CommonJS\n\t        var eve = require('eve');\n\t        module.exports = factory(glob, eve);\n\t    } else {\n\t        // Browser globals (glob is window)\n\t        // Snap adds itself to window\n\t        factory(glob, glob.eve);\n\t    }\n\t}(window || this, function (window, eve) {\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tvar mina = (function (eve) {\n\t    var animations = {},\n\t    requestAnimFrame = window.requestAnimationFrame       ||\n\t                       window.webkitRequestAnimationFrame ||\n\t                       window.mozRequestAnimationFrame    ||\n\t                       window.oRequestAnimationFrame      ||\n\t                       window.msRequestAnimationFrame     ||\n\t                       function (callback) {\n\t                           setTimeout(callback, 16);\n\t                       },\n\t    isArray = Array.isArray || function (a) {\n\t        return a instanceof Array ||\n\t            Object.prototype.toString.call(a) == \"[object Array]\";\n\t    },\n\t    idgen = 0,\n\t    idprefix = \"M\" + (+new Date).toString(36),\n\t    ID = function () {\n\t        return idprefix + (idgen++).toString(36);\n\t    },\n\t    diff = function (a, b, A, B) {\n\t        if (isArray(a)) {\n\t            res = [];\n\t            for (var i = 0, ii = a.length; i < ii; i++) {\n\t                res[i] = diff(a[i], b, A[i], B);\n\t            }\n\t            return res;\n\t        }\n\t        var dif = (A - a) / (B - b);\n\t        return function (bb) {\n\t            return a + dif * (bb - b);\n\t        };\n\t    },\n\t    timer = Date.now || function () {\n\t        return +new Date;\n\t    },\n\t    sta = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.s;\n\t        }\n\t        var ds = a.s - val;\n\t        a.b += a.dur * ds;\n\t        a.B += a.dur * ds;\n\t        a.s = val;\n\t    },\n\t    speed = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.spd;\n\t        }\n\t        a.spd = val;\n\t    },\n\t    duration = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.dur;\n\t        }\n\t        a.s = a.s * val / a.dur;\n\t        a.dur = val;\n\t    },\n\t    stopit = function () {\n\t        var a = this;\n\t        delete animations[a.id];\n\t        a.update();\n\t        eve(\"mina.stop.\" + a.id, a);\n\t    },\n\t    pause = function () {\n\t        var a = this;\n\t        if (a.pdif) {\n\t            return;\n\t        }\n\t        delete animations[a.id];\n\t        a.update();\n\t        a.pdif = a.get() - a.b;\n\t    },\n\t    resume = function () {\n\t        var a = this;\n\t        if (!a.pdif) {\n\t            return;\n\t        }\n\t        a.b = a.get() - a.pdif;\n\t        delete a.pdif;\n\t        animations[a.id] = a;\n\t    },\n\t    update = function () {\n\t        var a = this,\n\t            res;\n\t        if (isArray(a.start)) {\n\t            res = [];\n\t            for (var j = 0, jj = a.start.length; j < jj; j++) {\n\t                res[j] = +a.start[j] +\n\t                    (a.end[j] - a.start[j]) * a.easing(a.s);\n\t            }\n\t        } else {\n\t            res = +a.start + (a.end - a.start) * a.easing(a.s);\n\t        }\n\t        a.set(res);\n\t    },\n\t    frame = function () {\n\t        var len = 0;\n\t        for (var i in animations) if (animations.hasOwnProperty(i)) {\n\t            var a = animations[i],\n\t                b = a.get(),\n\t                res;\n\t            len++;\n\t            a.s = (b - a.b) / (a.dur / a.spd);\n\t            if (a.s >= 1) {\n\t                delete animations[i];\n\t                a.s = 1;\n\t                len--;\n\t                (function (a) {\n\t                    setTimeout(function () {\n\t                        eve(\"mina.finish.\" + a.id, a);\n\t                    });\n\t                }(a));\n\t            }\n\t            a.update();\n\t        }\n\t        len && requestAnimFrame(frame);\n\t    },\n\t    /*\\\n\t     * mina\n\t     [ method ]\n\t     **\n\t     * Generic animation of numbers\n\t     **\n\t     - a (number) start _slave_ number\n\t     - A (number) end _slave_ number\n\t     - b (number) start _master_ number (start time in general case)\n\t     - B (number) end _master_ number (end time in gereal case)\n\t     - get (function) getter of _master_ number (see @mina.time)\n\t     - set (function) setter of _slave_ number\n\t     - easing (function) #optional easing function, default is @mina.linear\n\t     = (object) animation descriptor\n\t     o {\n\t     o         id (string) animation id,\n\t     o         start (number) start _slave_ number,\n\t     o         end (number) end _slave_ number,\n\t     o         b (number) start _master_ number,\n\t     o         s (number) animation status (0..1),\n\t     o         dur (number) animation duration,\n\t     o         spd (number) animation speed,\n\t     o         get (function) getter of _master_ number (see @mina.time),\n\t     o         set (function) setter of _slave_ number,\n\t     o         easing (function) easing function, default is @mina.linear,\n\t     o         status (function) status getter/setter,\n\t     o         speed (function) speed getter/setter,\n\t     o         duration (function) duration getter/setter,\n\t     o         stop (function) animation stopper\n\t     o         pause (function) pauses the animation\n\t     o         resume (function) resumes the animation\n\t     o         update (function) calles setter with the right value of the animation\n\t     o }\n\t    \\*/\n\t    mina = function (a, A, b, B, get, set, easing) {\n\t        var anim = {\n\t            id: ID(),\n\t            start: a,\n\t            end: A,\n\t            b: b,\n\t            s: 0,\n\t            dur: B - b,\n\t            spd: 1,\n\t            get: get,\n\t            set: set,\n\t            easing: easing || mina.linear,\n\t            status: sta,\n\t            speed: speed,\n\t            duration: duration,\n\t            stop: stopit,\n\t            pause: pause,\n\t            resume: resume,\n\t            update: update\n\t        };\n\t        animations[anim.id] = anim;\n\t        var len = 0, i;\n\t        for (i in animations) if (animations.hasOwnProperty(i)) {\n\t            len++;\n\t            if (len == 2) {\n\t                break;\n\t            }\n\t        }\n\t        len == 1 && requestAnimFrame(frame);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * mina.time\n\t     [ method ]\n\t     **\n\t     * Returns the current time. Equivalent to:\n\t     | function () {\n\t     |     return (new Date).getTime();\n\t     | }\n\t    \\*/\n\t    mina.time = timer;\n\t    /*\\\n\t     * mina.getById\n\t     [ method ]\n\t     **\n\t     * Returns an animation by its id\n\t     - id (string) animation's id\n\t     = (object) See @mina\n\t    \\*/\n\t    mina.getById = function (id) {\n\t        return animations[id] || null;\n\t    };\n\t\n\t    /*\\\n\t     * mina.linear\n\t     [ method ]\n\t     **\n\t     * Default linear easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.linear = function (n) {\n\t        return n;\n\t    };\n\t    /*\\\n\t     * mina.easeout\n\t     [ method ]\n\t     **\n\t     * Easeout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeout = function (n) {\n\t        return Math.pow(n, 1.7);\n\t    };\n\t    /*\\\n\t     * mina.easein\n\t     [ method ]\n\t     **\n\t     * Easein easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easein = function (n) {\n\t        return Math.pow(n, .48);\n\t    };\n\t    /*\\\n\t     * mina.easeinout\n\t     [ method ]\n\t     **\n\t     * Easeinout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeinout = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        var q = .48 - n / 1.04,\n\t            Q = Math.sqrt(.1734 + q * q),\n\t            x = Q - q,\n\t            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t            y = -Q - q,\n\t            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t            t = X + Y + .5;\n\t        return (1 - t) * 3 * t * t + t * t * t;\n\t    };\n\t    /*\\\n\t     * mina.backin\n\t     [ method ]\n\t     **\n\t     * Backin easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backin = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n - s);\n\t    };\n\t    /*\\\n\t     * mina.backout\n\t     [ method ]\n\t     **\n\t     * Backout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backout = function (n) {\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        n = n - 1;\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n + s) + 1;\n\t    };\n\t    /*\\\n\t     * mina.elastic\n\t     [ method ]\n\t     **\n\t     * Elastic easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.elastic = function (n) {\n\t        if (n == !!n) {\n\t            return n;\n\t        }\n\t        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n\t            (2 * Math.PI) / .3) + 1;\n\t    };\n\t    /*\\\n\t     * mina.bounce\n\t     [ method ]\n\t     **\n\t     * Bounce easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.bounce = function (n) {\n\t        var s = 7.5625,\n\t            p = 2.75,\n\t            l;\n\t        if (n < (1 / p)) {\n\t            l = s * n * n;\n\t        } else {\n\t            if (n < (2 / p)) {\n\t                n -= (1.5 / p);\n\t                l = s * n * n + .75;\n\t            } else {\n\t                if (n < (2.5 / p)) {\n\t                    n -= (2.25 / p);\n\t                    l = s * n * n + .9375;\n\t                } else {\n\t                    n -= (2.625 / p);\n\t                    l = s * n * n + .984375;\n\t                }\n\t            }\n\t        }\n\t        return l;\n\t    };\n\t    window.mina = mina;\n\t    return mina;\n\t})(typeof eve == \"undefined\" ? function () {} : eve);\n\t// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t\n\tvar Snap = (function(root) {\n\tSnap.version = \"0.4.0\";\n\t/*\\\n\t * Snap\n\t [ method ]\n\t **\n\t * Creates a drawing surface or wraps existing SVG element.\n\t **\n\t - width (number|string) width of surface\n\t - height (number|string) height of surface\n\t * or\n\t - DOM (SVGElement) element to be wrapped into Snap structure\n\t * or\n\t - array (array) array of elements (will return set of elements)\n\t * or\n\t - query (string) CSS query selector\n\t = (object) @Element\n\t\\*/\n\tfunction Snap(w, h) {\n\t    if (w) {\n\t        if (w.nodeType) {\n\t            return wrap(w);\n\t        }\n\t        if (is(w, \"array\") && Snap.set) {\n\t            return Snap.set.apply(Snap, w);\n\t        }\n\t        if (w instanceof Element) {\n\t            return w;\n\t        }\n\t        if (h == null) {\n\t            w = glob.doc.querySelector(String(w));\n\t            return wrap(w);\n\t        }\n\t    }\n\t    w = w == null ? \"100%\" : w;\n\t    h = h == null ? \"100%\" : h;\n\t    return new Paper(w, h);\n\t}\n\tSnap.toString = function () {\n\t    return \"Snap v\" + this.version;\n\t};\n\tSnap._ = {};\n\tvar glob = {\n\t    win: root.window,\n\t    doc: root.window.document\n\t};\n\tSnap._.glob = glob;\n\tvar has = \"hasOwnProperty\",\n\t    Str = String,\n\t    toFloat = parseFloat,\n\t    toInt = parseInt,\n\t    math = Math,\n\t    mmax = math.max,\n\t    mmin = math.min,\n\t    abs = math.abs,\n\t    pow = math.pow,\n\t    PI = math.PI,\n\t    round = math.round,\n\t    E = \"\",\n\t    S = \" \",\n\t    objectToString = Object.prototype.toString,\n\t    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n\t    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n\t    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t    reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t    separator = Snap._.separator = /[,\\s]+/,\n\t    whitespace = /[\\s]/g,\n\t    commaSpaces = /[\\s]*,[\\s]*/,\n\t    hsrg = {hs: 1, rg: 1},\n\t    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n\t    idgen = 0,\n\t    idprefix = \"S\" + (+new Date).toString(36),\n\t    ID = function (el) {\n\t        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n\t    },\n\t    xlink = \"http://www.w3.org/1999/xlink\",\n\t    xmlns = \"http://www.w3.org/2000/svg\",\n\t    hub = {},\n\t    URL = Snap.url = function (url) {\n\t        return \"url('#\" + url + \"')\";\n\t    };\n\t\n\tfunction $(el, attr) {\n\t    if (attr) {\n\t        if (el == \"#text\") {\n\t            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (el == \"#comment\") {\n\t            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (typeof el == \"string\") {\n\t            el = $(el);\n\t        }\n\t        if (typeof attr == \"string\") {\n\t            if (el.nodeType == 1) {\n\t                if (attr.substring(0, 6) == \"xlink:\") {\n\t                    return el.getAttributeNS(xlink, attr.substring(6));\n\t                }\n\t                if (attr.substring(0, 4) == \"xml:\") {\n\t                    return el.getAttributeNS(xmlns, attr.substring(4));\n\t                }\n\t                return el.getAttribute(attr);\n\t            } else if (attr == \"text\") {\n\t                return el.nodeValue;\n\t            } else {\n\t                return null;\n\t            }\n\t        }\n\t        if (el.nodeType == 1) {\n\t            for (var key in attr) if (attr[has](key)) {\n\t                var val = Str(attr[key]);\n\t                if (val) {\n\t                    if (key.substring(0, 6) == \"xlink:\") {\n\t                        el.setAttributeNS(xlink, key.substring(6), val);\n\t                    } else if (key.substring(0, 4) == \"xml:\") {\n\t                        el.setAttributeNS(xmlns, key.substring(4), val);\n\t                    } else {\n\t                        el.setAttribute(key, val);\n\t                    }\n\t                } else {\n\t                    el.removeAttribute(key);\n\t                }\n\t            }\n\t        } else if (\"text\" in attr) {\n\t            el.nodeValue = attr.text;\n\t        }\n\t    } else {\n\t        el = glob.doc.createElementNS(xmlns, el);\n\t    }\n\t    return el;\n\t}\n\tSnap._.$ = $;\n\tSnap._.id = ID;\n\tfunction getAttrs(el) {\n\t    var attrs = el.attributes,\n\t        name,\n\t        out = {};\n\t    for (var i = 0; i < attrs.length; i++) {\n\t        if (attrs[i].namespaceURI == xlink) {\n\t            name = \"xlink:\";\n\t        } else {\n\t            name = \"\";\n\t        }\n\t        name += attrs[i].name;\n\t        out[name] = attrs[i].textContent;\n\t    }\n\t    return out;\n\t}\n\tfunction is(o, type) {\n\t    type = Str.prototype.toLowerCase.call(type);\n\t    if (type == \"finite\") {\n\t        return isFinite(o);\n\t    }\n\t    if (type == \"array\" &&\n\t        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n\t        return true;\n\t    }\n\t    return  (type == \"null\" && o === null) ||\n\t            (type == typeof o && o !== null) ||\n\t            (type == \"object\" && o === Object(o)) ||\n\t            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t}\n\t/*\\\n\t * Snap.format\n\t [ method ]\n\t **\n\t * Replaces construction of type `{<name>}` to the corresponding argument\n\t **\n\t - token (string) string to format\n\t - json (object) object which properties are used as a replacement\n\t = (string) formatted string\n\t > Usage\n\t | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t |     x: 10,\n\t |     y: 20,\n\t |     dim: {\n\t |         width: 40,\n\t |         height: 50,\n\t |         \"negative width\": -40\n\t |     }\n\t | }));\n\t\\*/\n\tSnap.format = (function () {\n\t    var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t        replacer = function (all, key, obj) {\n\t            var res = obj;\n\t            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                name = name || quotedName;\n\t                if (res) {\n\t                    if (name in res) {\n\t                        res = res[name];\n\t                    }\n\t                    typeof res == \"function\" && isFunc && (res = res());\n\t                }\n\t            });\n\t            res = (res == null || res == obj ? all : res) + \"\";\n\t            return res;\n\t        };\n\t    return function (str, obj) {\n\t        return Str(str).replace(tokenRegex, function (all, key) {\n\t            return replacer(all, key, obj);\n\t        });\n\t    };\n\t})();\n\tfunction clone(obj) {\n\t    if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t        return obj;\n\t    }\n\t    var res = new obj.constructor;\n\t    for (var key in obj) if (obj[has](key)) {\n\t        res[key] = clone(obj[key]);\n\t    }\n\t    return res;\n\t}\n\tSnap._.clone = clone;\n\tfunction repush(array, item) {\n\t    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t        return array.push(array.splice(i, 1)[0]);\n\t    }\n\t}\n\tfunction cacher(f, scope, postprocessor) {\n\t    function newf() {\n\t        var arg = Array.prototype.slice.call(arguments, 0),\n\t            args = arg.join(\"\\u2400\"),\n\t            cache = newf.cache = newf.cache || {},\n\t            count = newf.count = newf.count || [];\n\t        if (cache[has](args)) {\n\t            repush(count, args);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        count.length >= 1e3 && delete cache[count.shift()];\n\t        count.push(args);\n\t        cache[args] = f.apply(scope, arg);\n\t        return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t    }\n\t    return newf;\n\t}\n\tSnap._.cacher = cacher;\n\tfunction angle(x1, y1, x2, y2, x3, y3) {\n\t    if (x3 == null) {\n\t        var x = x1 - x2,\n\t            y = y1 - y2;\n\t        if (!x && !y) {\n\t            return 0;\n\t        }\n\t        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t    } else {\n\t        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n\t    }\n\t}\n\tfunction rad(deg) {\n\t    return deg % 360 * PI / 180;\n\t}\n\tfunction deg(rad) {\n\t    return rad * 180 / PI % 360;\n\t}\n\tfunction x_y() {\n\t    return this.x + S + this.y;\n\t}\n\tfunction x_y_w_h() {\n\t    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t}\n\t\n\t/*\\\n\t * Snap.rad\n\t [ method ]\n\t **\n\t * Transform angle to radians\n\t - deg (number) angle in degrees\n\t = (number) angle in radians\n\t\\*/\n\tSnap.rad = rad;\n\t/*\\\n\t * Snap.deg\n\t [ method ]\n\t **\n\t * Transform angle to degrees\n\t - rad (number) angle in radians\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.deg = deg;\n\t/*\\\n\t * Snap.sin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.sin()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) sin\n\t\\*/\n\tSnap.sin = function (angle) {\n\t    return math.sin(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.tan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.tan()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) tan\n\t\\*/\n\tSnap.tan = function (angle) {\n\t    return math.tan(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.cos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.cos()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) cos\n\t\\*/\n\tSnap.cos = function (angle) {\n\t    return math.cos(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.asin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.asin()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) asin in degrees\n\t\\*/\n\tSnap.asin = function (num) {\n\t    return Snap.deg(math.asin(num));\n\t};\n\t/*\\\n\t * Snap.acos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.acos()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) acos in degrees\n\t\\*/\n\tSnap.acos = function (num) {\n\t    return Snap.deg(math.acos(num));\n\t};\n\t/*\\\n\t * Snap.atan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan in degrees\n\t\\*/\n\tSnap.atan = function (num) {\n\t    return Snap.deg(math.atan(num));\n\t};\n\t/*\\\n\t * Snap.atan2\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan2()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan2 in degrees\n\t\\*/\n\tSnap.atan2 = function (num) {\n\t    return Snap.deg(math.atan2(num));\n\t};\n\t/*\\\n\t * Snap.angle\n\t [ method ]\n\t **\n\t * Returns an angle between two or three points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t - x3 (number) #optional x coord of third point\n\t - y3 (number) #optional y coord of third point\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.angle = angle;\n\t/*\\\n\t * Snap.len\n\t [ method ]\n\t **\n\t * Returns distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len = function (x1, y1, x2, y2) {\n\t    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n\t};\n\t/*\\\n\t * Snap.len2\n\t [ method ]\n\t **\n\t * Returns squared distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len2 = function (x1, y1, x2, y2) {\n\t    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t};\n\t/*\\\n\t * Snap.closestPoint\n\t [ method ]\n\t **\n\t * Returns closest point to a given one on a given path.\n\t > Parameters\n\t - path (Element) path element\n\t - x (number) x coord of a point\n\t - y (number) y coord of a point\n\t = (object) in format\n\t {\n\t    x (number) x coord of the point on the path\n\t    y (number) y coord of the point on the path\n\t    length (number) length of the path to the point\n\t    distance (number) distance from the given point to the path\n\t }\n\t\\*/\n\t// Copied from http://bl.ocks.org/mbostock/8027637\n\tSnap.closestPoint = function (path, x, y) {\n\t    function distance2(p) {\n\t        var dx = p.x - x,\n\t            dy = p.y - y;\n\t        return dx * dx + dy * dy;\n\t    }\n\t    var pathNode = path.node,\n\t        pathLength = pathNode.getTotalLength(),\n\t        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n\t        best,\n\t        bestLength,\n\t        bestDistance = Infinity;\n\t\n\t    // linear scan for coarse approximation\n\t    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n\t        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n\t            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n\t        }\n\t    }\n\t\n\t    // binary search for precise estimate\n\t    precision *= .5;\n\t    while (precision > .5) {\n\t        var before,\n\t            after,\n\t            beforeLength,\n\t            afterLength,\n\t            beforeDistance,\n\t            afterDistance;\n\t        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n\t            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n\t        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n\t            best = after, bestLength = afterLength, bestDistance = afterDistance;\n\t        } else {\n\t            precision *= .5;\n\t        }\n\t    }\n\t\n\t    best = {\n\t        x: best.x,\n\t        y: best.y,\n\t        length: bestLength,\n\t        distance: Math.sqrt(bestDistance)\n\t    };\n\t    return best;\n\t}\n\t/*\\\n\t * Snap.is\n\t [ method ]\n\t **\n\t * Handy replacement for the `typeof` operator\n\t - o (…) any object or primitive\n\t - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n\t = (boolean) `true` if given value is of given type\n\t\\*/\n\tSnap.is = is;\n\t/*\\\n\t * Snap.snapTo\n\t [ method ]\n\t **\n\t * Snaps given value to given grid\n\t - values (array|number) given array of values or step of the grid\n\t - value (number) value to adjust\n\t - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n\t = (number) adjusted value\n\t\\*/\n\tSnap.snapTo = function (values, value, tolerance) {\n\t    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\t    if (is(values, \"array\")) {\n\t        var i = values.length;\n\t        while (i--) if (abs(values[i] - value) <= tolerance) {\n\t            return values[i];\n\t        }\n\t    } else {\n\t        values = +values;\n\t        var rem = value % values;\n\t        if (rem < tolerance) {\n\t            return value - rem;\n\t        }\n\t        if (rem > values - tolerance) {\n\t            return value - rem + values;\n\t        }\n\t    }\n\t    return value;\n\t};\n\t// Colour\n\t/*\\\n\t * Snap.getRGB\n\t [ method ]\n\t **\n\t * Parses color string as RGB object\n\t - color (string) color string in one of the following formats:\n\t # <ul>\n\t #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n\t #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n\t #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n\t #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n\t #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n\t #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n\t #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n\t #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t # </ul>\n\t * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) true if string can't be parsed\n\t o }\n\t\\*/\n\tSnap.getRGB = cacher(function (colour) {\n\t    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    if (colour == \"none\") {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n\t    }\n\t    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t    if (!colour) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    var res,\n\t        red,\n\t        green,\n\t        blue,\n\t        opacity,\n\t        t,\n\t        values,\n\t        rgb = colour.match(colourRegExp);\n\t    if (rgb) {\n\t        if (rgb[2]) {\n\t            blue = toInt(rgb[2].substring(5), 16);\n\t            green = toInt(rgb[2].substring(3, 5), 16);\n\t            red = toInt(rgb[2].substring(1, 3), 16);\n\t        }\n\t        if (rgb[3]) {\n\t            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t        }\n\t        if (rgb[4]) {\n\t            values = rgb[4].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t        }\n\t        if (rgb[5]) {\n\t            values = rgb[5].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsb2rgb(red, green, blue, opacity);\n\t        }\n\t        if (rgb[6]) {\n\t            values = rgb[6].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsl2rgb(red, green, blue, opacity);\n\t        }\n\t        red = mmin(math.round(red), 255);\n\t        green = mmin(math.round(green), 255);\n\t        blue = mmin(math.round(blue), 255);\n\t        opacity = mmin(mmax(opacity, 0), 1);\n\t        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n\t        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n\t        return rgb;\n\t    }\n\t    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t}, Snap);\n\t/*\\\n\t * Snap.hsb\n\t [ method ]\n\t **\n\t * Converts HSB values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - b (number) value or brightness\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsb = cacher(function (h, s, b) {\n\t    return Snap.hsb2rgb(h, s, b).hex;\n\t});\n\t/*\\\n\t * Snap.hsl\n\t [ method ]\n\t **\n\t * Converts HSL values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsl = cacher(function (h, s, l) {\n\t    return Snap.hsl2rgb(h, s, l).hex;\n\t});\n\t/*\\\n\t * Snap.rgb\n\t [ method ]\n\t **\n\t * Converts RGB values to a hex representation of the color\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.rgb = cacher(function (r, g, b, o) {\n\t    if (is(o, \"finite\")) {\n\t        var round = math.round;\n\t        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n\t    }\n\t    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n\t});\n\tvar toHex = function (color) {\n\t    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n\t        red = \"rgb(255, 0, 0)\";\n\t    toHex = cacher(function (color) {\n\t        if (color.toLowerCase() == \"red\") {\n\t            return red;\n\t        }\n\t        i.style.color = red;\n\t        i.style.color = color;\n\t        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t        return out == red ? null : out;\n\t    });\n\t    return toHex(color);\n\t},\n\thsbtoString = function () {\n\t    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t},\n\thsltoString = function () {\n\t    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t},\n\trgbtoString = function () {\n\t    return this.opacity == 1 || this.opacity == null ?\n\t            this.hex :\n\t            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n\t},\n\tprepareRGB = function (r, g, b) {\n\t    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t        b = r.b;\n\t        g = r.g;\n\t        r = r.r;\n\t    }\n\t    if (g == null && is(r, string)) {\n\t        var clr = Snap.getRGB(r);\n\t        r = clr.r;\n\t        g = clr.g;\n\t        b = clr.b;\n\t    }\n\t    if (r > 1 || g > 1 || b > 1) {\n\t        r /= 255;\n\t        g /= 255;\n\t        b /= 255;\n\t    }\n\t    \n\t    return [r, g, b];\n\t},\n\tpackageRGB = function (r, g, b, o) {\n\t    r = math.round(r * 255);\n\t    g = math.round(g * 255);\n\t    b = math.round(b * 255);\n\t    var rgb = {\n\t        r: r,\n\t        g: g,\n\t        b: b,\n\t        opacity: is(o, \"finite\") ? o : 1,\n\t        hex: Snap.rgb(r, g, b),\n\t        toString: rgbtoString\n\t    };\n\t    is(o, \"finite\") && (rgb.opacity = o);\n\t    return rgb;\n\t};\n\t/*\\\n\t * Snap.color\n\t [ method ]\n\t **\n\t * Parses the color string and returns an object featuring the color's component values\n\t - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n\t = (object) Combined RGB/HSB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) `true` if string can't be parsed,\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     v (number) value (brightness),\n\t o     l (number) lightness\n\t o }\n\t\\*/\n\tSnap.color = function (clr) {\n\t    var rgb;\n\t    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t        rgb = Snap.hsb2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t        rgb = Snap.hsl2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else {\n\t        if (is(clr, \"string\")) {\n\t            clr = Snap.getRGB(clr);\n\t        }\n\t        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n\t            rgb = Snap.rgb2hsl(clr);\n\t            clr.h = rgb.h;\n\t            clr.s = rgb.s;\n\t            clr.l = rgb.l;\n\t            rgb = Snap.rgb2hsb(clr);\n\t            clr.v = rgb.b;\n\t        } else {\n\t            clr = {hex: \"none\"};\n\t            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            clr.error = 1;\n\t        }\n\t    }\n\t    clr.toString = rgbtoString;\n\t    return clr;\n\t};\n\t/*\\\n\t * Snap.hsb2rgb\n\t [ method ]\n\t **\n\t * Converts HSB values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - v (number) value or brightness\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsb2rgb = function (h, s, v, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t        v = h.b;\n\t        s = h.s;\n\t        o = h.o;\n\t        h = h.h;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = v * s;\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = v - C;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.hsl2rgb\n\t [ method ]\n\t **\n\t * Converts HSL values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsl2rgb = function (h, s, l, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t        l = h.l;\n\t        s = h.s;\n\t        h = h.h;\n\t    }\n\t    if (h > 1 || s > 1 || l > 1) {\n\t        h /= 360;\n\t        s /= 100;\n\t        l /= 100;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = 2 * s * (l < .5 ? l : 1 - l);\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = l - C / 2;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.rgb2hsb\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSB object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSB object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     b (number) brightness\n\t o }\n\t\\*/\n\tSnap.rgb2hsb = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, V, C;\n\t    V = mmax(r, g, b);\n\t    C = V - mmin(r, g, b);\n\t    H = (C == 0 ? null :\n\t         V == r ? (g - b) / C :\n\t         V == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4\n\t        );\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    S = C == 0 ? 0 : C / V;\n\t    return {h: H, s: S, b: V, toString: hsbtoString};\n\t};\n\t/*\\\n\t * Snap.rgb2hsl\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSL object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSL object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     l (number) luminosity\n\t o }\n\t\\*/\n\tSnap.rgb2hsl = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, L, M, m, C;\n\t    M = mmax(r, g, b);\n\t    m = mmin(r, g, b);\n\t    C = M - m;\n\t    H = (C == 0 ? null :\n\t         M == r ? (g - b) / C :\n\t         M == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4);\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    L = (M + m) / 2;\n\t    S = (C == 0 ? 0 :\n\t         L < .5 ? C / (2 * L) :\n\t                  C / (2 - 2 * L));\n\t    return {h: H, s: S, l: L, toString: hsltoString};\n\t};\n\t\n\t// Transformations\n\t/*\\\n\t * Snap.parsePathString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given path string into an array of arrays of path segments\n\t - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n\t = (array) array of segments\n\t\\*/\n\tSnap.parsePathString = function (pathString) {\n\t    if (!pathString) {\n\t        return null;\n\t    }\n\t    var pth = Snap.path(pathString);\n\t    if (pth.arr) {\n\t        return Snap.path.clone(pth.arr);\n\t    }\n\t    \n\t    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n\t        data = [];\n\t    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(pathString);\n\t    }\n\t    if (!data.length) {\n\t        Str(pathString).replace(pathCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            if (name == \"m\" && params.length > 2) {\n\t                data.push([b].concat(params.splice(0, 2)));\n\t                name = \"l\";\n\t                b = b == \"m\" ? \"l\" : \"L\";\n\t            }\n\t            if (name == \"o\" && params.length == 1) {\n\t                data.push([b, params[0]]);\n\t            }\n\t            if (name == \"r\") {\n\t                data.push([b].concat(params));\n\t            } else while (params.length >= paramCounts[name]) {\n\t                data.push([b].concat(params.splice(0, paramCounts[name])));\n\t                if (!paramCounts[name]) {\n\t                    break;\n\t                }\n\t            }\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    pth.arr = Snap.path.clone(data);\n\t    return data;\n\t};\n\t/*\\\n\t * Snap.parseTransformString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given transform string into an array of transformations\n\t - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n\t = (array) array of transformations\n\t\\*/\n\tvar parseTransformString = Snap.parseTransformString = function (TString) {\n\t    if (!TString) {\n\t        return null;\n\t    }\n\t    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t        data = [];\n\t    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(TString);\n\t    }\n\t    if (!data.length) {\n\t        Str(TString).replace(tCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            data.push([b].concat(params));\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    return data;\n\t};\n\tfunction svgTransform2string(tstr) {\n\t    var res = [];\n\t    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n\t        params = params.split(/\\s*,\\s*|\\s+/);\n\t        if (name == \"rotate\" && params.length == 1) {\n\t            params.push(0, 0);\n\t        }\n\t        if (name == \"scale\") {\n\t            if (params.length > 2) {\n\t                params = params.slice(0, 2);\n\t            } else if (params.length == 2) {\n\t                params.push(0, 0);\n\t            }\n\t            if (params.length == 1) {\n\t                params.push(params[0], 0, 0);\n\t            }\n\t        }\n\t        if (name == \"skewX\") {\n\t            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n\t        } else if (name == \"skewY\") {\n\t            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n\t        } else {\n\t            res.push([name.charAt(0)].concat(params));\n\t        }\n\t        return all;\n\t    });\n\t    return res;\n\t}\n\tSnap._.svgTransform2string = svgTransform2string;\n\tSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\tfunction transform2matrix(tstr, bbox) {\n\t    var tdata = parseTransformString(tstr),\n\t        m = new Snap.Matrix;\n\t    if (tdata) {\n\t        for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t            var t = tdata[i],\n\t                tlen = t.length,\n\t                command = Str(t[0]).toLowerCase(),\n\t                absolute = t[0] != command,\n\t                inver = absolute ? m.invert() : 0,\n\t                x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                bb;\n\t            if (command == \"t\" && tlen == 2){\n\t                m.translate(t[1], 0);\n\t            } else if (command == \"t\" && tlen == 3) {\n\t                if (absolute) {\n\t                    x1 = inver.x(0, 0);\n\t                    y1 = inver.y(0, 0);\n\t                    x2 = inver.x(t[1], t[2]);\n\t                    y2 = inver.y(t[1], t[2]);\n\t                    m.translate(x2 - x1, y2 - y1);\n\t                } else {\n\t                    m.translate(t[1], t[2]);\n\t                }\n\t            } else if (command == \"r\") {\n\t                if (tlen == 2) {\n\t                    bb = bb || bbox;\n\t                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.rotate(t[1], x2, y2);\n\t                    } else {\n\t                        m.rotate(t[1], t[2], t[3]);\n\t                    }\n\t                }\n\t            } else if (command == \"s\") {\n\t                if (tlen == 2 || tlen == 3) {\n\t                    bb = bb || bbox;\n\t                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.scale(t[1], t[1], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[1], t[2], t[3]);\n\t                    }\n\t                } else if (tlen == 5) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[3], t[4]);\n\t                        y2 = inver.y(t[3], t[4]);\n\t                        m.scale(t[1], t[2], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[2], t[3], t[4]);\n\t                    }\n\t                }\n\t            } else if (command == \"m\" && tlen == 7) {\n\t                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t            }\n\t        }\n\t    }\n\t    return m;\n\t}\n\tSnap._.transform2matrix = transform2matrix;\n\tSnap._unit2px = unit2px;\n\tvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n\t    function (a, b) {\n\t        var adown = a.nodeType == 9 ? a.documentElement : a,\n\t            bup = b && b.parentNode;\n\t            return a == bup || !!(bup && bup.nodeType == 1 && (\n\t                adown.contains ?\n\t                    adown.contains(bup) :\n\t                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n\t            ));\n\t    } :\n\t    function (a, b) {\n\t        if (b) {\n\t            while (b) {\n\t                b = b.parentNode;\n\t                if (b == a) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    };\n\tfunction getSomeDefs(el) {\n\t    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n\t            (el.node.parentNode && wrap(el.node.parentNode)) ||\n\t            Snap.select(\"svg\") ||\n\t            Snap(0, 0),\n\t        pdefs = p.select(\"defs\"),\n\t        defs  = pdefs == null ? false : pdefs.node;\n\t    if (!defs) {\n\t        defs = make(\"defs\", p.node).node;\n\t    }\n\t    return defs;\n\t}\n\tfunction getSomeSVG(el) {\n\t    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n\t}\n\tSnap._.getSomeDefs = getSomeDefs;\n\tSnap._.getSomeSVG = getSomeSVG;\n\tfunction unit2px(el, name, value) {\n\t    var svg = getSomeSVG(el).node,\n\t        out = {},\n\t        mgr = svg.querySelector(\".svg---mgr\");\n\t    if (!mgr) {\n\t        mgr = $(\"rect\");\n\t        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n\t        svg.appendChild(mgr);\n\t    }\n\t    function getW(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {width: val});\n\t        try {\n\t            return mgr.getBBox().width;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function getH(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {height: val});\n\t        try {\n\t            return mgr.getBBox().height;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function set(nam, f) {\n\t        if (name == null) {\n\t            out[nam] = f(el.attr(nam) || 0);\n\t        } else if (nam == name) {\n\t            out = f(value == null ? el.attr(nam) || 0 : value);\n\t        }\n\t    }\n\t    switch (el.type) {\n\t        case \"rect\":\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        case \"image\":\n\t            set(\"width\", getW);\n\t            set(\"height\", getH);\n\t        case \"text\":\n\t            set(\"x\", getW);\n\t            set(\"y\", getH);\n\t        break;\n\t        case \"circle\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"r\", getW);\n\t        break;\n\t        case \"ellipse\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        break;\n\t        case \"line\":\n\t            set(\"x1\", getW);\n\t            set(\"x2\", getW);\n\t            set(\"y1\", getH);\n\t            set(\"y2\", getH);\n\t        break;\n\t        case \"marker\":\n\t            set(\"refX\", getW);\n\t            set(\"markerWidth\", getW);\n\t            set(\"refY\", getH);\n\t            set(\"markerHeight\", getH);\n\t        break;\n\t        case \"radialGradient\":\n\t            set(\"fx\", getW);\n\t            set(\"fy\", getH);\n\t        break;\n\t        case \"tspan\":\n\t            set(\"dx\", getW);\n\t            set(\"dy\", getH);\n\t        break;\n\t        default:\n\t            set(name, getW);\n\t    }\n\t    svg.removeChild(mgr);\n\t    return out;\n\t}\n\t/*\\\n\t * Snap.select\n\t [ method ]\n\t **\n\t * Wraps a DOM element specified by CSS selector as @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.select = function (query) {\n\t    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t    return wrap(glob.doc.querySelector(query));\n\t};\n\t/*\\\n\t * Snap.selectAll\n\t [ method ]\n\t **\n\t * Wraps DOM elements specified by CSS selector as set or array of @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.selectAll = function (query) {\n\t    var nodelist = glob.doc.querySelectorAll(query),\n\t        set = (Snap.set || Array)();\n\t    for (var i = 0; i < nodelist.length; i++) {\n\t        set.push(wrap(nodelist[i]));\n\t    }\n\t    return set;\n\t};\n\t\n\tfunction add2group(list) {\n\t    if (!is(list, \"array\")) {\n\t        list = Array.prototype.slice.call(arguments, 0);\n\t    }\n\t    var i = 0,\n\t        j = 0,\n\t        node = this.node;\n\t    while (this[i]) delete this[i++];\n\t    for (i = 0; i < list.length; i++) {\n\t        if (list[i].type == \"set\") {\n\t            list[i].forEach(function (el) {\n\t                node.appendChild(el.node);\n\t            });\n\t        } else {\n\t            node.appendChild(list[i].node);\n\t        }\n\t    }\n\t    var children = node.childNodes;\n\t    for (i = 0; i < children.length; i++) {\n\t        this[j++] = wrap(children[i]);\n\t    }\n\t    return this;\n\t}\n\t// Hub garbage collector every 10s\n\tsetInterval(function () {\n\t    for (var key in hub) if (hub[has](key)) {\n\t        var el = hub[key],\n\t            node = el.node;\n\t        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n\t            delete hub[key];\n\t        }\n\t    }\n\t}, 1e4);\n\tfunction Element(el) {\n\t    if (el.snap in hub) {\n\t        return hub[el.snap];\n\t    }\n\t    var svg;\n\t    try {\n\t        svg = el.ownerSVGElement;\n\t    } catch(e) {}\n\t    /*\\\n\t     * Element.node\n\t     [ property (object) ]\n\t     **\n\t     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t     > Usage\n\t     | // draw a circle at coordinate 10,10 with radius of 10\n\t     | var c = paper.circle(10, 10, 10);\n\t     | c.node.onclick = function () {\n\t     |     c.attr(\"fill\", \"red\");\n\t     | };\n\t    \\*/\n\t    this.node = el;\n\t    if (svg) {\n\t        this.paper = new Paper(svg);\n\t    }\n\t    /*\\\n\t     * Element.type\n\t     [ property (string) ]\n\t     **\n\t     * SVG tag name of the given element.\n\t    \\*/\n\t    this.type = el.tagName || el.nodeName;\n\t    var id = this.id = ID(this);\n\t    this.anims = {};\n\t    this._ = {\n\t        transform: []\n\t    };\n\t    el.snap = id;\n\t    hub[id] = this;\n\t    if (this.type == \"g\") {\n\t        this.add = add2group;\n\t    }\n\t    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n\t        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n\t            this[method] = Paper.prototype[method];\n\t        }\n\t    }\n\t}\n\t   /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Gets or sets given attributes of the element.\n\t     **\n\t     - params (object) contains key-value pairs of attributes you want to set\n\t     * or\n\t     - param (string) name of the attribute\n\t     = (Element) the current element\n\t     * or\n\t     = (string) value of attribute\n\t     > Usage\n\t     | el.attr({\n\t     |     fill: \"#fc0\",\n\t     |     stroke: \"#000\",\n\t     |     strokeWidth: 2, // CamelCase...\n\t     |     \"fill-opacity\": 0.5, // or dash-separated names\n\t     |     width: \"*=2\" // prefixed values\n\t     | });\n\t     | console.log(el.attr(\"fill\")); // #fc0\n\t     * Prefixed values in format `\"+=10\"` supported. All four operations\n\t     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n\t     * and `-`: `\"+=2em\"`.\n\t    \\*/\n\t    Element.prototype.attr = function (params, value) {\n\t        var el = this,\n\t            node = el.node;\n\t        if (!params) {\n\t            if (node.nodeType != 1) {\n\t                return {\n\t                    text: node.nodeValue\n\t                };\n\t            }\n\t            var attr = node.attributes,\n\t                out = {};\n\t            for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                out[attr[i].nodeName] = attr[i].nodeValue;\n\t            }\n\t            return out;\n\t        }\n\t        if (is(params, \"string\")) {\n\t            if (arguments.length > 1) {\n\t                var json = {};\n\t                json[params] = value;\n\t                params = json;\n\t            } else {\n\t                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n\t            }\n\t        }\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                eve(\"snap.util.attr.\" + att, el, params[att]);\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t/*\\\n\t * Snap.parse\n\t [ method ]\n\t **\n\t * Parses SVG fragment and converts it into a @Fragment\n\t **\n\t - svg (string) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.parse = function (svg) {\n\t    var f = glob.doc.createDocumentFragment(),\n\t        full = true,\n\t        div = glob.doc.createElement(\"div\");\n\t    svg = Str(svg);\n\t    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n\t        svg = \"<svg>\" + svg + \"</svg>\";\n\t        full = false;\n\t    }\n\t    div.innerHTML = svg;\n\t    svg = div.getElementsByTagName(\"svg\")[0];\n\t    if (svg) {\n\t        if (full) {\n\t            f = svg;\n\t        } else {\n\t            while (svg.firstChild) {\n\t                f.appendChild(svg.firstChild);\n\t            }\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\tfunction Fragment(frag) {\n\t    this.node = frag;\n\t}\n\t/*\\\n\t * Snap.fragment\n\t [ method ]\n\t **\n\t * Creates a DOM fragment from a given list of elements or strings\n\t **\n\t - varargs (…) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.fragment = function () {\n\t    var args = Array.prototype.slice.call(arguments, 0),\n\t        f = glob.doc.createDocumentFragment();\n\t    for (var i = 0, ii = args.length; i < ii; i++) {\n\t        var item = args[i];\n\t        if (item.node && item.node.nodeType) {\n\t            f.appendChild(item.node);\n\t        }\n\t        if (item.nodeType) {\n\t            f.appendChild(item);\n\t        }\n\t        if (typeof item == \"string\") {\n\t            f.appendChild(Snap.parse(item).node);\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\t\n\tfunction make(name, parent) {\n\t    var res = $(name);\n\t    parent.appendChild(res);\n\t    var el = wrap(res);\n\t    return el;\n\t}\n\tfunction Paper(w, h) {\n\t    var res,\n\t        desc,\n\t        defs,\n\t        proto = Paper.prototype;\n\t    if (w && w.tagName == \"svg\") {\n\t        if (w.snap in hub) {\n\t            return hub[w.snap];\n\t        }\n\t        var doc = w.ownerDocument;\n\t        res = new Element(w);\n\t        desc = w.getElementsByTagName(\"desc\")[0];\n\t        defs = w.getElementsByTagName(\"defs\")[0];\n\t        if (!desc) {\n\t            desc = $(\"desc\");\n\t            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n\t            res.node.appendChild(desc);\n\t        }\n\t        if (!defs) {\n\t            defs = $(\"defs\");\n\t            res.node.appendChild(defs);\n\t        }\n\t        res.defs = defs;\n\t        for (var key in proto) if (proto[has](key)) {\n\t            res[key] = proto[key];\n\t        }\n\t        res.paper = res.root = res;\n\t    } else {\n\t        res = make(\"svg\", glob.doc.body);\n\t        $(res.node, {\n\t            height: h,\n\t            version: 1.1,\n\t            width: w,\n\t            xmlns: xmlns\n\t        });\n\t    }\n\t    return res;\n\t}\n\tfunction wrap(dom) {\n\t    if (!dom) {\n\t        return dom;\n\t    }\n\t    if (dom instanceof Element || dom instanceof Fragment) {\n\t        return dom;\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n\t        return new Paper(dom);\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n\t        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n\t    }\n\t    return new Element(dom);\n\t}\n\t\n\tSnap._.make = make;\n\tSnap._.wrap = wrap;\n\t/*\\\n\t * Paper.el\n\t [ method ]\n\t **\n\t * Creates an element on paper with a given name and no attributes\n\t **\n\t - name (string) tag name\n\t - attr (object) attributes\n\t = (Element) the current element\n\t > Usage\n\t | var c = paper.circle(10, 10, 10); // is the same as...\n\t | var c = paper.el(\"circle\").attr({\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t | // and the same as\n\t | var c = paper.el(\"circle\", {\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t\\*/\n\tPaper.prototype.el = function (name, attr) {\n\t    var el = make(name, this.node);\n\t    attr && el.attr(attr);\n\t    return el;\n\t};\n\t/*\\\n\t * Element.children\n\t [ method ]\n\t **\n\t * Returns array of all the children of the element.\n\t = (array) array of Elements\n\t\\*/\n\tElement.prototype.children = function () {\n\t    var out = [],\n\t        ch = this.node.childNodes;\n\t    for (var i = 0, ii = ch.length; i < ii; i++) {\n\t        out[i] = Snap(ch[i]);\n\t    }\n\t    return out;\n\t};\n\tfunction jsonFiller(root, o) {\n\t    for (var i = 0, ii = root.length; i < ii; i++) {\n\t        var item = {\n\t                type: root[i].type,\n\t                attr: root[i].attr()\n\t            },\n\t            children = root[i].children();\n\t        o.push(item);\n\t        if (children.length) {\n\t            jsonFiller(children, item.childNodes = []);\n\t        }\n\t    }\n\t}\n\t/*\\\n\t * Element.toJSON\n\t [ method ]\n\t **\n\t * Returns object representation of the given element and all its children.\n\t = (object) in format\n\t o {\n\t o     type (string) this.type,\n\t o     attr (object) attributes map,\n\t o     childNodes (array) optional array of children in the same format\n\t o }\n\t\\*/\n\tElement.prototype.toJSON = function () {\n\t    var out = [];\n\t    jsonFiller([this], out);\n\t    return out[0];\n\t};\n\t// default\n\teve.on(\"snap.util.getattr\", function () {\n\t    var att = eve.nt();\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    var css = att.replace(/[A-Z]/g, function (letter) {\n\t        return \"-\" + letter.toLowerCase();\n\t    });\n\t    if (cssAttr[has](css)) {\n\t        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n\t    } else {\n\t        return $(this.node, att);\n\t    }\n\t});\n\tvar cssAttr = {\n\t    \"alignment-baseline\": 0,\n\t    \"baseline-shift\": 0,\n\t    \"clip\": 0,\n\t    \"clip-path\": 0,\n\t    \"clip-rule\": 0,\n\t    \"color\": 0,\n\t    \"color-interpolation\": 0,\n\t    \"color-interpolation-filters\": 0,\n\t    \"color-profile\": 0,\n\t    \"color-rendering\": 0,\n\t    \"cursor\": 0,\n\t    \"direction\": 0,\n\t    \"display\": 0,\n\t    \"dominant-baseline\": 0,\n\t    \"enable-background\": 0,\n\t    \"fill\": 0,\n\t    \"fill-opacity\": 0,\n\t    \"fill-rule\": 0,\n\t    \"filter\": 0,\n\t    \"flood-color\": 0,\n\t    \"flood-opacity\": 0,\n\t    \"font\": 0,\n\t    \"font-family\": 0,\n\t    \"font-size\": 0,\n\t    \"font-size-adjust\": 0,\n\t    \"font-stretch\": 0,\n\t    \"font-style\": 0,\n\t    \"font-variant\": 0,\n\t    \"font-weight\": 0,\n\t    \"glyph-orientation-horizontal\": 0,\n\t    \"glyph-orientation-vertical\": 0,\n\t    \"image-rendering\": 0,\n\t    \"kerning\": 0,\n\t    \"letter-spacing\": 0,\n\t    \"lighting-color\": 0,\n\t    \"marker\": 0,\n\t    \"marker-end\": 0,\n\t    \"marker-mid\": 0,\n\t    \"marker-start\": 0,\n\t    \"mask\": 0,\n\t    \"opacity\": 0,\n\t    \"overflow\": 0,\n\t    \"pointer-events\": 0,\n\t    \"shape-rendering\": 0,\n\t    \"stop-color\": 0,\n\t    \"stop-opacity\": 0,\n\t    \"stroke\": 0,\n\t    \"stroke-dasharray\": 0,\n\t    \"stroke-dashoffset\": 0,\n\t    \"stroke-linecap\": 0,\n\t    \"stroke-linejoin\": 0,\n\t    \"stroke-miterlimit\": 0,\n\t    \"stroke-opacity\": 0,\n\t    \"stroke-width\": 0,\n\t    \"text-anchor\": 0,\n\t    \"text-decoration\": 0,\n\t    \"text-rendering\": 0,\n\t    \"unicode-bidi\": 0,\n\t    \"visibility\": 0,\n\t    \"word-spacing\": 0,\n\t    \"writing-mode\": 0\n\t};\n\t\n\teve.on(\"snap.util.attr\", function (value) {\n\t    var att = eve.nt(),\n\t        attr = {};\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    attr[att] = value;\n\t    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n\t            return letter.toUpperCase();\n\t        }),\n\t        css = att.replace(/[A-Z]/g, function (letter) {\n\t            return \"-\" + letter.toLowerCase();\n\t        });\n\t    if (cssAttr[has](css)) {\n\t        this.node.style[style] = value == null ? E : value;\n\t    } else {\n\t        $(this.node, attr);\n\t    }\n\t});\n\t(function (proto) {}(Paper.prototype));\n\t\n\t// simple ajax\n\t/*\\\n\t * Snap.ajax\n\t [ method ]\n\t **\n\t * Simple implementation of Ajax\n\t **\n\t - url (string) URL\n\t - postData (object|string) data for post request\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t * or\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\t\\*/\n\tSnap.ajax = function (url, postData, callback, scope){\n\t    var req = new XMLHttpRequest,\n\t        id = ID();\n\t    if (req) {\n\t        if (is(postData, \"function\")) {\n\t            scope = callback;\n\t            callback = postData;\n\t            postData = null;\n\t        } else if (is(postData, \"object\")) {\n\t            var pd = [];\n\t            for (var key in postData) if (postData.hasOwnProperty(key)) {\n\t                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n\t            }\n\t            postData = pd.join(\"&\");\n\t        }\n\t        req.open((postData ? \"POST\" : \"GET\"), url, true);\n\t        if (postData) {\n\t            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\t            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t        }\n\t        if (callback) {\n\t            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n\t        }\n\t        req.onreadystatechange = function() {\n\t            if (req.readyState != 4) return;\n\t            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n\t        };\n\t        if (req.readyState == 4) {\n\t            return req;\n\t        }\n\t        req.send(postData);\n\t        return req;\n\t    }\n\t};\n\t/*\\\n\t * Snap.load\n\t [ method ]\n\t **\n\t * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n\t **\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t\\*/\n\tSnap.load = function (url, callback, scope) {\n\t    Snap.ajax(url, function (req) {\n\t        var f = Snap.parse(req.responseText);\n\t        scope ? callback.call(scope, f) : callback(f);\n\t    });\n\t};\n\tvar getOffset = function (elem) {\n\t    var box = elem.getBoundingClientRect(),\n\t        doc = elem.ownerDocument,\n\t        body = doc.body,\n\t        docElem = doc.documentElement,\n\t        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t    return {\n\t        y: top,\n\t        x: left\n\t    };\n\t};\n\t/*\\\n\t * Snap.getElementByPoint\n\t [ method ]\n\t **\n\t * Returns you topmost element under given point.\n\t **\n\t = (object) Snap element object\n\t - x (number) x coordinate from the top left corner of the window\n\t - y (number) y coordinate from the top left corner of the window\n\t > Usage\n\t | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t\\*/\n\tSnap.getElementByPoint = function (x, y) {\n\t    var paper = this,\n\t        svg = paper.canvas,\n\t        target = glob.doc.elementFromPoint(x, y);\n\t    if (glob.win.opera && target.tagName == \"svg\") {\n\t        var so = getOffset(target),\n\t            sr = target.createSVGRect();\n\t        sr.x = x - so.x;\n\t        sr.y = y - so.y;\n\t        sr.width = sr.height = 1;\n\t        var hits = target.getIntersectionList(sr, null);\n\t        if (hits.length) {\n\t            target = hits[hits.length - 1];\n\t        }\n\t    }\n\t    if (!target) {\n\t        return null;\n\t    }\n\t    return wrap(target);\n\t};\n\t/*\\\n\t * Snap.plugin\n\t [ method ]\n\t **\n\t * Let you write plugins. You pass in a function with five arguments, like this:\n\t | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n\t |     Snap.newmethod = function () {};\n\t |     Element.prototype.newmethod = function () {};\n\t |     Paper.prototype.newmethod = function () {};\n\t | });\n\t * Inside the function you have access to all main objects (and their\n\t * prototypes). This allow you to extend anything you want.\n\t **\n\t - f (function) your plugin body\n\t\\*/\n\tSnap.plugin = function (f) {\n\t    f(Snap, Element, Paper, glob, Fragment);\n\t};\n\tglob.win.Snap = Snap;\n\treturn Snap;\n\t}(window || this));\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        Str = String,\n\t        unit2px = Snap._unit2px,\n\t        $ = Snap._.$,\n\t        make = Snap._.make,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        has = \"hasOwnProperty\",\n\t        wrap = Snap._.wrap;\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Returns the bounding box descriptor for the given element\n\t     **\n\t     = (object) bounding box descriptor:\n\t     o {\n\t     o     cx: (number) x of the center,\n\t     o     cy: (number) x of the center,\n\t     o     h: (number) height,\n\t     o     height: (number) height,\n\t     o     path: (string) path command for the box,\n\t     o     r0: (number) radius of a circle that fully encloses the box,\n\t     o     r1: (number) radius of the smallest circle that can be enclosed,\n\t     o     r2: (number) radius of the largest circle that can be enclosed,\n\t     o     vb: (string) box as a viewbox command,\n\t     o     w: (number) width,\n\t     o     width: (number) width,\n\t     o     x2: (number) x of the right side,\n\t     o     x: (number) x of the left side,\n\t     o     y2: (number) y of the bottom edge,\n\t     o     y: (number) y of the top edge\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (!Snap.Matrix || !Snap.path) {\n\t            return this.node.getBBox();\n\t        }\n\t        var el = this,\n\t            m = new Snap.Matrix;\n\t        if (el.removed) {\n\t            return Snap._.box();\n\t        }\n\t        while (el.type == \"use\") {\n\t            if (!isWithoutTransform) {\n\t                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n\t            }\n\t            if (el.original) {\n\t                el = el.original;\n\t            } else {\n\t                var href = el.attr(\"xlink:href\");\n\t                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n\t            }\n\t        }\n\t        var _ = el._,\n\t            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\t        try {\n\t            if (isWithoutTransform) {\n\t                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n\t                return Snap._.box(_.bboxwt);\n\t            } else {\n\t                el.realPath = pathfinder(el);\n\t                el.matrix = el.transform().localMatrix;\n\t                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n\t                return Snap._.box(_.bbox);\n\t            }\n\t        } catch (e) {\n\t            // Firefox doesn’t give you bbox of hidden element\n\t            return Snap._.box();\n\t        }\n\t    };\n\t    var propString = function () {\n\t        return this.string;\n\t    };\n\t    function extractTransform(el, tstr) {\n\t        if (tstr == null) {\n\t            var doReturn = true;\n\t            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n\t                tstr = el.node.getAttribute(\"gradientTransform\");\n\t            } else if (el.type == \"pattern\") {\n\t                tstr = el.node.getAttribute(\"patternTransform\");\n\t            } else {\n\t                tstr = el.node.getAttribute(\"transform\");\n\t            }\n\t            if (!tstr) {\n\t                return new Snap.Matrix;\n\t            }\n\t            tstr = Snap._.svgTransform2string(tstr);\n\t        } else {\n\t            if (!Snap._.rgTransform.test(tstr)) {\n\t                tstr = Snap._.svgTransform2string(tstr);\n\t            } else {\n\t                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            }\n\t            if (is(tstr, \"array\")) {\n\t                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n\t            }\n\t            el._.transform = tstr;\n\t        }\n\t        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\t        if (doReturn) {\n\t            return m;\n\t        } else {\n\t            el.matrix = m;\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Gets or sets transformation of the element\n\t     **\n\t     - tstr (string) transform string in Snap or SVG format\n\t     = (Element) the current element\n\t     * or\n\t     = (object) transformation descriptor:\n\t     o {\n\t     o     string (string) transform string,\n\t     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n\t     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n\t     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n\t     o     global (string) global transformation as string,\n\t     o     local (string) local transformation as string,\n\t     o     toString (function) returns `string` property\n\t     o }\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            var papa = this,\n\t                global = new Snap.Matrix(this.node.getCTM()),\n\t                local = extractTransform(this),\n\t                ms = [local],\n\t                m = new Snap.Matrix,\n\t                i,\n\t                localString = local.toTransformString(),\n\t                string = Str(local) == Str(this.matrix) ?\n\t                            Str(_.transform) : localString;\n\t            while (papa.type != \"svg\" && (papa = papa.parent())) {\n\t                ms.push(extractTransform(papa));\n\t            }\n\t            i = ms.length;\n\t            while (i--) {\n\t                m.add(ms[i]);\n\t            }\n\t            return {\n\t                string: string,\n\t                globalMatrix: global,\n\t                totalMatrix: m,\n\t                localMatrix: local,\n\t                diffMatrix: global.clone().add(local.invert()),\n\t                global: global.toTransformString(),\n\t                total: m.toTransformString(),\n\t                local: localString,\n\t                toString: propString\n\t            };\n\t        }\n\t        if (tstr instanceof Snap.Matrix) {\n\t            this.matrix = tstr;\n\t            this._.transform = tstr.toTransformString();\n\t        } else {\n\t            extractTransform(this, tstr);\n\t        }\n\t\n\t        if (this.node) {\n\t            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n\t                $(this.node, {gradientTransform: this.matrix});\n\t            } else if (this.type == \"pattern\") {\n\t                $(this.node, {patternTransform: this.matrix});\n\t            } else {\n\t                $(this.node, {transform: this.matrix});\n\t            }\n\t        }\n\t\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.parent\n\t     [ method ]\n\t     **\n\t     * Returns the element's parent\n\t     **\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.parent = function () {\n\t        return wrap(this.node.parentNode);\n\t    };\n\t    /*\\\n\t     * Element.append\n\t     [ method ]\n\t     **\n\t     * Appends the given element to current one\n\t     **\n\t     - el (Element|Set) element to append\n\t     = (Element) the parent element\n\t    \\*/\n\t    /*\\\n\t     * Element.add\n\t     [ method ]\n\t     **\n\t     * See @Element.append\n\t    \\*/\n\t    elproto.append = elproto.add = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this;\n\t                el.forEach(function (el) {\n\t                    it.add(el);\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            this.node.appendChild(el.node);\n\t            el.paper = this.paper;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.appendTo\n\t     [ method ]\n\t     **\n\t     * Appends the current element to the given one\n\t     **\n\t     - el (Element) parent element to append to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.appendTo = function (el) {\n\t        if (el) {\n\t            el = wrap(el);\n\t            el.append(this);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prepend\n\t     [ method ]\n\t     **\n\t     * Prepends the given element to the current one\n\t     **\n\t     - el (Element) element to prepend\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.prepend = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this,\n\t                    first;\n\t                el.forEach(function (el) {\n\t                    if (first) {\n\t                        first.after(el);\n\t                    } else {\n\t                        it.prepend(el);\n\t                    }\n\t                    first = el;\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            this.node.insertBefore(el.node, this.node.firstChild);\n\t            this.add && this.add();\n\t            el.paper = this.paper;\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prependTo\n\t     [ method ]\n\t     **\n\t     * Prepends the current element to the given one\n\t     **\n\t     - el (Element) parent element to prepend to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.prependTo = function (el) {\n\t        el = wrap(el);\n\t        el.prepend(this);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.before\n\t     [ method ]\n\t     **\n\t     * Inserts given element before the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.before = function (el) {\n\t        if (el.type == \"set\") {\n\t            var it = this;\n\t            el.forEach(function (el) {\n\t                var parent = el.parent();\n\t                it.node.parentNode.insertBefore(el.node, it.node);\n\t                parent && parent.add();\n\t            });\n\t            this.parent().add();\n\t            return this;\n\t        }\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        this.node.parentNode.insertBefore(el.node, this.node);\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.after\n\t     [ method ]\n\t     **\n\t     * Inserts given element after the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.after = function (el) {\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        if (this.node.nextSibling) {\n\t            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n\t        } else {\n\t            this.node.parentNode.appendChild(el.node);\n\t        }\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertBefore = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertAfter = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the DOM\n\t     = (Element) the detached element\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var parent = this.parent();\n\t        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n\t        delete this.paper;\n\t        this.removed = true;\n\t        parent && parent.add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.select\n\t     [ method ]\n\t     **\n\t     * Gathers the nested @Element matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.select = function (query) {\n\t        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t        return wrap(this.node.querySelector(query));\n\t    };\n\t    /*\\\n\t     * Element.selectAll\n\t     [ method ]\n\t     **\n\t     * Gathers nested @Element objects matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Set|array) result of query selection\n\t    \\*/\n\t    elproto.selectAll = function (query) {\n\t        var nodelist = this.node.querySelectorAll(query),\n\t            set = (Snap.set || Array)();\n\t        for (var i = 0; i < nodelist.length; i++) {\n\t            set.push(wrap(nodelist[i]));\n\t        }\n\t        return set;\n\t    };\n\t    /*\\\n\t     * Element.asPX\n\t     [ method ]\n\t     **\n\t     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n\t     **\n\t     - attr (string) attribute name\n\t     - value (string) #optional attribute value\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.asPX = function (attr, value) {\n\t        if (value == null) {\n\t            value = this.attr(attr);\n\t        }\n\t        return +unit2px(this, attr, value);\n\t    };\n\t    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\t    /*\\\n\t     * Element.use\n\t     [ method ]\n\t     **\n\t     * Creates a `<use>` element linked to the current element\n\t     **\n\t     = (Element) the `<use>` element\n\t    \\*/\n\t    elproto.use = function () {\n\t        var use,\n\t            id = this.node.id;\n\t        if (!id) {\n\t            id = this.id;\n\t            $(this.node, {\n\t                id: id\n\t            });\n\t        }\n\t        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n\t            this.type == \"pattern\") {\n\t            use = make(this.type, this.node.parentNode);\n\t        } else {\n\t            use = make(\"use\", this.node.parentNode);\n\t        }\n\t        $(use.node, {\n\t            \"xlink:href\": \"#\" + id\n\t        });\n\t        use.original = this;\n\t        return use;\n\t    };\n\t    function fixids(el) {\n\t        var els = el.selectAll(\"*\"),\n\t            it,\n\t            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n\t            ids = [],\n\t            uses = {};\n\t        function urltest(it, name) {\n\t            var val = $(it.node, name);\n\t            val = val && val.match(url);\n\t            val = val && val[2];\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    var attr = {};\n\t                    attr[name] = URL(id);\n\t                    $(it.node, attr);\n\t                });\n\t            }\n\t        }\n\t        function linktest(it) {\n\t            var val = $(it.node, \"xlink:href\");\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    it.attr(\"xlink:href\", \"#\" + id);\n\t                });\n\t            }\n\t        }\n\t        for (var i = 0, ii = els.length; i < ii; i++) {\n\t            it = els[i];\n\t            urltest(it, \"fill\");\n\t            urltest(it, \"stroke\");\n\t            urltest(it, \"filter\");\n\t            urltest(it, \"mask\");\n\t            urltest(it, \"clip-path\");\n\t            linktest(it);\n\t            var oldid = $(it.node, \"id\");\n\t            if (oldid) {\n\t                $(it.node, {id: it.id});\n\t                ids.push({\n\t                    old: oldid,\n\t                    id: it.id\n\t                });\n\t            }\n\t        }\n\t        for (i = 0, ii = ids.length; i < ii; i++) {\n\t            var fs = uses[ids[i].old];\n\t            if (fs) {\n\t                for (var j = 0, jj = fs.length; j < jj; j++) {\n\t                    fs[j](ids[i].id);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     * Creates a clone of the element and inserts it after the element\n\t     **\n\t     = (Element) the clone\n\t    \\*/\n\t    elproto.clone = function () {\n\t        var clone = wrap(this.node.cloneNode(true));\n\t        if ($(clone.node, \"id\")) {\n\t            $(clone.node, {id: clone.id});\n\t        }\n\t        fixids(clone);\n\t        clone.insertAfter(this);\n\t        return clone;\n\t    };\n\t    /*\\\n\t     * Element.toDefs\n\t     [ method ]\n\t     **\n\t     * Moves element to the shared `<defs>` area\n\t     **\n\t     = (Element) the element\n\t    \\*/\n\t    elproto.toDefs = function () {\n\t        var defs = getSomeDefs(this);\n\t        defs.appendChild(this.node);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toPattern\n\t     [ method ]\n\t     **\n\t     * Creates a `<pattern>` element from the current element\n\t     **\n\t     * To create a pattern you have to specify the pattern rect:\n\t     - x (string|number)\n\t     - y (string|number)\n\t     - width (string|number)\n\t     - height (string|number)\n\t     = (Element) the `<pattern>` element\n\t     * You can use pattern later on as an argument for `fill` attribute:\n\t     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n\t     |         fill: \"none\",\n\t     |         stroke: \"#bada55\",\n\t     |         strokeWidth: 5\n\t     |     }).pattern(0, 0, 10, 10),\n\t     |     c = paper.circle(200, 200, 100);\n\t     | c.attr({\n\t     |     fill: p\n\t     | });\n\t    \\*/\n\t    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n\t        var p = make(\"pattern\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            height: height,\n\t            patternUnits: \"userSpaceOnUse\",\n\t            id: p.id,\n\t            viewBox: [x, y, width, height].join(\" \")\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n\t// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\t    /*\\\n\t     * Element.marker\n\t     [ method ]\n\t     **\n\t     * Creates a `<marker>` element from the current element\n\t     **\n\t     * To create a marker you have to specify the bounding rect and reference point:\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - refX (number)\n\t     - refY (number)\n\t     = (Element) the `<marker>` element\n\t     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n\t    \\*/\n\t    // TODO add usage for markers\n\t    elproto.marker = function (x, y, width, height, refX, refY) {\n\t        var p = make(\"marker\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            refX = x.refX || x.cx;\n\t            refY = x.refY || x.cy;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            viewBox: [x, y, width, height].join(\" \"),\n\t            markerWidth: width,\n\t            markerHeight: height,\n\t            orient: \"auto\",\n\t            refX: refX || 0,\n\t            refY: refY || 0,\n\t            id: p.id\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t    // animation\n\t    function slice(from, to, f) {\n\t        return function (arr) {\n\t            var res = arr.slice(from, to);\n\t            if (res.length == 1) {\n\t                res = res[0];\n\t            }\n\t            return f ? f(res) : res;\n\t        };\n\t    }\n\t    var Animation = function (attr, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        this.attr = attr;\n\t        this.dur = ms;\n\t        easing && (this.easing = easing);\n\t        callback && (this.callback = callback);\n\t    };\n\t    Snap._.Animation = Animation;\n\t    /*\\\n\t     * Snap.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object\n\t     **\n\t     - attr (object) attributes of final destination\n\t     - duration (number) duration of the animation, in milliseconds\n\t     - easing (function) #optional one of easing functions of @mina or custom one\n\t     - callback (function) #optional callback function that fires when animation ends\n\t     = (object) animation object\n\t    \\*/\n\t    Snap.animation = function (attr, ms, easing, callback) {\n\t        return new Animation(attr, ms, easing, callback);\n\t    };\n\t    /*\\\n\t     * Element.inAnim\n\t     [ method ]\n\t     **\n\t     * Returns a set of animations that may be able to manipulate the current element\n\t     **\n\t     = (object) in format:\n\t     o {\n\t     o     anim (object) animation object,\n\t     o     mina (object) @mina object,\n\t     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t    \\*/\n\t    elproto.inAnim = function () {\n\t        var el = this,\n\t            res = [];\n\t        for (var id in el.anims) if (el.anims[has](id)) {\n\t            (function (a) {\n\t                res.push({\n\t                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n\t                    mina: a,\n\t                    curStatus: a.status(),\n\t                    status: function (val) {\n\t                        return a.status(val);\n\t                    },\n\t                    stop: function () {\n\t                        a.stop();\n\t                    }\n\t                });\n\t            }(el.anims[id]));\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.animate\n\t     [ method ]\n\t     **\n\t     * Runs generic animation of one number into another with a caring function\n\t     **\n\t     - from (number|array) number or array of numbers\n\t     - to (number|array) number or array of numbers\n\t     - setter (function) caring function that accepts one number argument\n\t     - duration (number) duration, in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function to execute when animation ends\n\t     = (object) animation object in @mina format\n\t     o {\n\t     o     id (string) animation id, consider it read-only,\n\t     o     duration (function) gets or sets the duration of the animation,\n\t     o     easing (function) easing,\n\t     o     speed (function) gets or sets the speed of the animation,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t     | var rect = Snap().rect(0, 0, 10, 10);\n\t     | Snap.animate(0, 10, function (val) {\n\t     |     rect.attr({\n\t     |         x: val\n\t     |     });\n\t     | }, 1000);\n\t     | // in given context is equivalent to\n\t     | rect.animate({x: 10}, 1000);\n\t    \\*/\n\t    Snap.animate = function (from, to, setter, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n\t        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops all the animations for the current element\n\t     **\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.stop = function () {\n\t        var anims = this.inAnim();\n\t        for (var i = 0, ii = anims.length; i < ii; i++) {\n\t            anims[i].stop();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Animates the given attributes of the element\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n\t            el = this;\n\t        for (var key in attrs) if (attrs[has](key)) {\n\t            if (el.equal) {\n\t                eq = el.equal(key, Str(attrs[key]));\n\t                from = eq.from;\n\t                to = eq.to;\n\t                f = eq.f;\n\t            } else {\n\t                from = +el.attr(key);\n\t                to = +attrs[key];\n\t            }\n\t            var len = is(from, \"array\") ? from.length : 1;\n\t            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n\t            fkeys = fkeys.concat(from);\n\t            tkeys = tkeys.concat(to);\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n\t                var attr = {};\n\t                for (var key in keys) if (keys[has](key)) {\n\t                    attr[key] = keys[key](val);\n\t                }\n\t                el.attr(attr);\n\t            }, easing);\n\t        el.anims[anim.id] = anim;\n\t        anim._attrs = attrs;\n\t        anim._callback = callback;\n\t        eve(\"snap.animcreated.\" + el.id, anim);\n\t        eve.once(\"mina.finish.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t            callback && callback.call(el);\n\t        });\n\t        eve.once(\"mina.stop.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t        });\n\t        return el;\n\t    };\n\t    var eldata = {};\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key. (Don’t confuse\n\t     * with `data-` attributes)\n\t     *\n\t     * See also @Element.removeData\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0){\n\t            eve(\"snap.data.get.\" + this.id, this, data, null);\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (Snap.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"snap.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.outerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n\t     *\n\t     * See also @Element.innerSVG\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    /*\\\n\t     * Element.toString\n\t     [ method ]\n\t     **\n\t     * See @Element.outerSVG\n\t    \\*/\n\t    elproto.outerSVG = elproto.toString = toString(1);\n\t    /*\\\n\t     * Element.innerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    elproto.innerSVG = toString();\n\t    function toString(type) {\n\t        return function () {\n\t            var res = type ? \"<\" + this.type : \"\",\n\t                attr = this.node.attributes,\n\t                chld = this.node.childNodes;\n\t            if (type) {\n\t                for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                    res += \" \" + attr[i].name + '=\"' +\n\t                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n\t                }\n\t            }\n\t            if (chld.length) {\n\t                type && (res += \">\");\n\t                for (i = 0, ii = chld.length; i < ii; i++) {\n\t                    if (chld[i].nodeType == 3) {\n\t                        res += chld[i].nodeValue;\n\t                    } else if (chld[i].nodeType == 1) {\n\t                        res += wrap(chld[i]).toString();\n\t                    }\n\t                }\n\t                type && (res += \"</\" + this.type + \">\");\n\t            } else {\n\t                type && (res += \"/>\");\n\t            }\n\t            return res;\n\t        };\n\t    }\n\t    elproto.toDataURL = function () {\n\t        if (window && window.btoa) {\n\t            var bb = this.getBBox(),\n\t                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n\t                x: +bb.x.toFixed(3),\n\t                y: +bb.y.toFixed(3),\n\t                width: +bb.width.toFixed(3),\n\t                height: +bb.height.toFixed(3),\n\t                contents: this.outerSVG()\n\t            });\n\t            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n\t        }\n\t    };\n\t    /*\\\n\t     * Fragment.select\n\t     [ method ]\n\t     **\n\t     * See @Element.select\n\t    \\*/\n\t    Fragment.prototype.select = elproto.select;\n\t    /*\\\n\t     * Fragment.selectAll\n\t     [ method ]\n\t     **\n\t     * See @Element.selectAll\n\t    \\*/\n\t    Fragment.prototype.selectAll = elproto.selectAll;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var objectToString = Object.prototype.toString,\n\t        Str = String,\n\t        math = Math,\n\t        E = \"\";\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n\t            this.a = a.a;\n\t            this.b = a.b;\n\t            this.c = a.c;\n\t            this.d = a.d;\n\t            this.e = a.e;\n\t            this.f = a.f;\n\t            return;\n\t        }\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds the given matrix to existing one\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         * or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\t\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\t\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns an inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns a copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         - x (number) horizontal offset distance\n\t         - y (number) vertical offset distance\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            return this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         - x (number) amount to be scaled, with `1` resulting in no change\n\t         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n\t         - cx (number) #optional horizontal origin point from which to scale\n\t         - cy (number) #optional vertical origin point from which to scale\n\t         * Default cx, cy is the middle point of the element.\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         - a (number) angle of rotation, in degrees\n\t         - x (number) horizontal origin point from which to rotate\n\t         - y (number) vertical origin point from which to rotate\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = Snap.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            return this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.determinant\n\t         [ method ]\n\t         **\n\t         * Finds determinant of the given matrix.\n\t         = (number) determinant\n\t        \\*/\n\t        matrixproto.determinant = function () {\n\t            return this.a * this.d - this.b * this.c;\n\t        };\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\t\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\t\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\t\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\t\n\t            if (this.determinant() < 0) {\n\t                out.scalex = -out.scalex;\n\t            }\n\t\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = Snap.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = Snap.deg(math.asin(sin));\n\t            }\n\t\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Returns transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this.split();\n\t            if (!+s.shear.toFixed(9)) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\t    /*\\\n\t     * Snap.Matrix\n\t     [ method ]\n\t     **\n\t     * Matrix constructor, extend on your own risk.\n\t     * To create matrices use @Snap.matrix.\n\t    \\*/\n\t    Snap.Matrix = Matrix;\n\t    /*\\\n\t     * Snap.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns a matrix based on the given parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     * or\n\t     - svgMatrix (SVGMatrix)\n\t     = (object) @Matrix\n\t    \\*/\n\t    Snap.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var has = \"hasOwnProperty\",\n\t        make = Snap._.make,\n\t        wrap = Snap._.wrap,\n\t        is = Snap.is,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t        $ = Snap._.$,\n\t        URL = Snap.url,\n\t        Str = String,\n\t        separator = Snap._.separator,\n\t        E = \"\";\n\t    // Attributes event handlers\n\t    eve.on(\"snap.util.attr.mask\", function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value.type == \"mask\") {\n\t                var mask = value;\n\t            } else {\n\t                mask = make(\"mask\", getSomeDefs(this));\n\t                mask.node.appendChild(value.node);\n\t            }\n\t            !mask.node.id && $(mask.node, {\n\t                id: mask.id\n\t            });\n\t            $(this.node, {\n\t                mask: URL(mask.id)\n\t            });\n\t        }\n\t    });\n\t    (function (clipIt) {\n\t        eve.on(\"snap.util.attr.clip\", clipIt);\n\t        eve.on(\"snap.util.attr.clip-path\", clipIt);\n\t        eve.on(\"snap.util.attr.clipPath\", clipIt);\n\t    }(function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value.type == \"clipPath\") {\n\t                var clip = value;\n\t            } else {\n\t                clip = make(\"clipPath\", getSomeDefs(this));\n\t                clip.node.appendChild(value.node);\n\t                !clip.node.id && $(clip.node, {\n\t                    id: clip.id\n\t                });\n\t            }\n\t            $(this.node, {\n\t                \"clip-path\": URL(clip.node.id || clip.id)\n\t            });\n\t        }\n\t    }));\n\t    function fillStroke(name) {\n\t        return function (value) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n\t                (value.node.firstChild.tagName == \"radialGradient\" ||\n\t                value.node.firstChild.tagName == \"linearGradient\" ||\n\t                value.node.firstChild.tagName == \"pattern\")) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value instanceof Element) {\n\t                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n\t                   || value.type == \"pattern\") {\n\t                    if (!value.node.id) {\n\t                        $(value.node, {\n\t                            id: value.id\n\t                        });\n\t                    }\n\t                    var fill = URL(value.node.id);\n\t                } else {\n\t                    fill = value.attr(name);\n\t                }\n\t            } else {\n\t                fill = Snap.color(value);\n\t                if (fill.error) {\n\t                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\t                    if (grad) {\n\t                        if (!grad.node.id) {\n\t                            $(grad.node, {\n\t                                id: grad.id\n\t                            });\n\t                        }\n\t                        fill = URL(grad.node.id);\n\t                    } else {\n\t                        fill = value;\n\t                    }\n\t                } else {\n\t                    fill = Str(fill);\n\t                }\n\t            }\n\t            var attrs = {};\n\t            attrs[name] = fill;\n\t            $(this.node, attrs);\n\t            this.node.style[name] = E;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n\t    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n\t    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n\t    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n\t        string = Str(string);\n\t        var tokens = string.match(gradrg);\n\t        if (!tokens) {\n\t            return null;\n\t        }\n\t        var type = tokens[1],\n\t            params = tokens[2],\n\t            stops = tokens[3];\n\t        params = params.split(/\\s*,\\s*/).map(function (el) {\n\t            return +el == el ? +el : el;\n\t        });\n\t        if (params.length == 1 && params[0] == 0) {\n\t            params = [];\n\t        }\n\t        stops = stops.split(\"-\");\n\t        stops = stops.map(function (el) {\n\t            el = el.split(\":\");\n\t            var out = {\n\t                color: el[0]\n\t            };\n\t            if (el[1]) {\n\t                out.offset = parseFloat(el[1]);\n\t            }\n\t            return out;\n\t        });\n\t        return {\n\t            type: type,\n\t            params: params,\n\t            stops: stops\n\t        };\n\t    });\n\t\n\t    eve.on(\"snap.util.attr.d\", function (value) {\n\t        eve.stop();\n\t        if (is(value, \"array\") && is(value[0], \"array\")) {\n\t            value = Snap.path.toString.call(value);\n\t        }\n\t        value = Str(value);\n\t        if (value.match(/[ruo]/i)) {\n\t            value = Snap.path.toAbsolute(value);\n\t        }\n\t        $(this.node, {d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.#text\", function (value) {\n\t        eve.stop();\n\t        value = Str(value);\n\t        var txt = glob.doc.createTextNode(value);\n\t        while (this.node.firstChild) {\n\t            this.node.removeChild(this.node.firstChild);\n\t        }\n\t        this.node.appendChild(txt);\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.path\", function (value) {\n\t        eve.stop();\n\t        this.attr({d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.class\", function (value) {\n\t        eve.stop();\n\t        this.node.className.baseVal = value;\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.viewBox\", function (value) {\n\t        var vb;\n\t        if (is(value, \"object\") && \"x\" in value) {\n\t            vb = [value.x, value.y, value.width, value.height].join(\" \");\n\t        } else if (is(value, \"array\")) {\n\t            vb = value.join(\" \");\n\t        } else {\n\t            vb = value;\n\t        }\n\t        $(this.node, {\n\t            viewBox: vb\n\t        });\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.transform\", function (value) {\n\t        this.transform(value);\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.r\", function (value) {\n\t        if (this.type == \"rect\") {\n\t            eve.stop();\n\t            $(this.node, {\n\t                rx: value,\n\t                ry: value\n\t            });\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.textpath\", function (value) {\n\t        eve.stop();\n\t        if (this.type == \"text\") {\n\t            var id, tp, node;\n\t            if (!value && this.textPath) {\n\t                tp = this.textPath;\n\t                while (tp.node.firstChild) {\n\t                    this.node.appendChild(tp.node.firstChild);\n\t                }\n\t                tp.remove();\n\t                delete this.textPath;\n\t                return;\n\t            }\n\t            if (is(value, \"string\")) {\n\t                var defs = getSomeDefs(this),\n\t                    path = wrap(defs.parentNode).path(value);\n\t                defs.appendChild(path.node);\n\t                id = path.id;\n\t                path.attr({id: id});\n\t            } else {\n\t                value = wrap(value);\n\t                if (value instanceof Element) {\n\t                    id = value.attr(\"id\");\n\t                    if (!id) {\n\t                        id = value.id;\n\t                        value.attr({id: id});\n\t                    }\n\t                }\n\t            }\n\t            if (id) {\n\t                tp = this.textPath;\n\t                node = this.node;\n\t                if (tp) {\n\t                    tp.attr({\"xlink:href\": \"#\" + id});\n\t                } else {\n\t                    tp = $(\"textPath\", {\n\t                        \"xlink:href\": \"#\" + id\n\t                    });\n\t                    while (node.firstChild) {\n\t                        tp.appendChild(node.firstChild);\n\t                    }\n\t                    node.appendChild(tp);\n\t                    this.textPath = wrap(tp);\n\t                }\n\t            }\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.text\", function (value) {\n\t        if (this.type == \"text\") {\n\t            var i = 0,\n\t                node = this.node,\n\t                tuner = function (chunk) {\n\t                    var out = $(\"tspan\");\n\t                    if (is(chunk, \"array\")) {\n\t                        for (var i = 0; i < chunk.length; i++) {\n\t                            out.appendChild(tuner(chunk[i]));\n\t                        }\n\t                    } else {\n\t                        out.appendChild(glob.doc.createTextNode(chunk));\n\t                    }\n\t                    out.normalize && out.normalize();\n\t                    return out;\n\t                };\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var tuned = tuner(value);\n\t            while (tuned.firstChild) {\n\t                node.appendChild(tuned.firstChild);\n\t            }\n\t        }\n\t        eve.stop();\n\t    })(-1);\n\t    function setFontSize(value) {\n\t        eve.stop();\n\t        if (value == +value) {\n\t            value += \"px\";\n\t        }\n\t        this.node.style.fontSize = value;\n\t    }\n\t    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n\t    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\t\n\t\n\t    eve.on(\"snap.util.getattr.transform\", function () {\n\t        eve.stop();\n\t        return this.transform();\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.textpath\", function () {\n\t        eve.stop();\n\t        return this.textPath;\n\t    })(-1);\n\t    // Markers\n\t    (function () {\n\t        function getter(end) {\n\t            return function () {\n\t                eve.stop();\n\t                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\t                if (style == \"none\") {\n\t                    return style;\n\t                } else {\n\t                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n\t                }\n\t            };\n\t        }\n\t        function setter(end) {\n\t            return function (value) {\n\t                eve.stop();\n\t                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\t                if (value == \"\" || !value) {\n\t                    this.node.style[name] = \"none\";\n\t                    return;\n\t                }\n\t                if (value.type == \"marker\") {\n\t                    var id = value.node.id;\n\t                    if (!id) {\n\t                        $(value.node, {id: value.id});\n\t                    }\n\t                    this.node.style[name] = URL(id);\n\t                    return;\n\t                }\n\t            };\n\t        }\n\t        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n\t    }());\n\t    eve.on(\"snap.util.getattr.r\", function () {\n\t        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n\t            eve.stop();\n\t            return $(this.node, \"rx\");\n\t        }\n\t    })(-1);\n\t    function textExtract(node) {\n\t        var out = [];\n\t        var children = node.childNodes;\n\t        for (var i = 0, ii = children.length; i < ii; i++) {\n\t            var chi = children[i];\n\t            if (chi.nodeType == 3) {\n\t                out.push(chi.nodeValue);\n\t            }\n\t            if (chi.tagName == \"tspan\") {\n\t                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n\t                    out.push(chi.firstChild.nodeValue);\n\t                } else {\n\t                    out.push(textExtract(chi));\n\t                }\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    eve.on(\"snap.util.getattr.text\", function () {\n\t        if (this.type == \"text\" || this.type == \"tspan\") {\n\t            eve.stop();\n\t            var out = textExtract(this.node);\n\t            return out.length == 1 ? out[0] : out;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.#text\", function () {\n\t        return this.node.textContent;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.viewBox\", function () {\n\t        eve.stop();\n\t        var vb = $(this.node, \"viewBox\");\n\t        if (vb) {\n\t            vb = vb.split(separator);\n\t            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.points\", function () {\n\t        var p = $(this.node, \"points\");\n\t        eve.stop();\n\t        if (p) {\n\t            return p.split(separator);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.path\", function () {\n\t        var p = $(this.node, \"d\");\n\t        eve.stop();\n\t        return p;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.class\", function () {\n\t        return this.node.className.baseVal;\n\t    })(-1);\n\t    function getFontSize() {\n\t        eve.stop();\n\t        return this.node.style.fontSize;\n\t    }\n\t    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n\t    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var rgNotSpace = /\\S+/g,\n\t        rgBadSpace = /[\\t\\r\\n\\f]/g,\n\t        rgTrim = /(^\\s+|\\s+$)/g,\n\t        Str = String,\n\t        elproto = Element.prototype;\n\t    /*\\\n\t     * Element.addClass\n\t     [ method ]\n\t     **\n\t     * Adds given class name or list of class names to the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.addClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t\n\t        if (classes.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (!~pos) {\n\t                    curClasses.push(clazz);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeClass\n\t     [ method ]\n\t     **\n\t     * Removes given class name or list of class names from the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.removeClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        if (curClasses.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (~pos) {\n\t                    curClasses.splice(pos, 1);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hasClass\n\t     [ method ]\n\t     **\n\t     * Checks if the element has a given class name in the list of class names applied to it.\n\t     - value (string) class name\n\t     **\n\t     = (boolean) `true` if the element has given class\n\t    \\*/\n\t    elproto.hasClass = function (value) {\n\t        var elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [];\n\t        return !!~curClasses.indexOf(value);\n\t    };\n\t    /*\\\n\t     * Element.toggleClass\n\t     [ method ]\n\t     **\n\t     * Add or remove one or more classes from the element, depending on either\n\t     * the class’s presence or the value of the `flag` argument.\n\t     - value (string) class name or space separated list of class names\n\t     - flag (boolean) value to determine whether the class should be added or removed\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.toggleClass = function (value, flag) {\n\t        if (flag != null) {\n\t            if (flag) {\n\t                return this.addClass(value);\n\t            } else {\n\t                return this.removeClass(value);\n\t            }\n\t        }\n\t        var classes = (value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        j = 0;\n\t        while ((clazz = classes[j++])) {\n\t            pos = curClasses.indexOf(clazz);\n\t            if (~pos) {\n\t                curClasses.splice(pos, 1);\n\t            } else {\n\t                curClasses.push(clazz);\n\t            }\n\t        }\n\t\n\t        finalValue = curClasses.join(\" \");\n\t        if (className != finalValue) {\n\t            elem.className.baseVal = finalValue;\n\t        }\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var operators = {\n\t            \"+\": function (x, y) {\n\t                    return x + y;\n\t                },\n\t            \"-\": function (x, y) {\n\t                    return x - y;\n\t                },\n\t            \"/\": function (x, y) {\n\t                    return x / y;\n\t                },\n\t            \"*\": function (x, y) {\n\t                    return x * y;\n\t                }\n\t        },\n\t        Str = String,\n\t        reUnit = /[a-z]+$/i,\n\t        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr\", function (val) {\n\t        var plus = Str(val).match(reAddon);\n\t        if (plus) {\n\t            var evnt = eve.nt(),\n\t                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n\t                a = this.attr(name),\n\t                atr = {};\n\t            eve.stop();\n\t            var unit = plus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[plus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                val = op(parseFloat(a), +plus[2]);\n\t            } else {\n\t                a = this.asPX(name);\n\t                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n\t            }\n\t            if (isNaN(a) || isNaN(val)) {\n\t                return;\n\t            }\n\t            atr[name] = val;\n\t            this.attr(atr);\n\t        }\n\t    })(-10);\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this,\n\t            bplus = Str(b).match(reAddon);\n\t        if (bplus) {\n\t            eve.stop();\n\t            var unit = bplus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[bplus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: op(parseFloat(a), +bplus[2]),\n\t                    f: getUnit(aUnit)\n\t                };\n\t            } else {\n\t                a = this.asPX(name);\n\t                return {\n\t                    from: a,\n\t                    to: op(a, this.asPX(name, bplus[2] + unit)),\n\t                    f: getNumber\n\t                };\n\t            }\n\t        }\n\t    })(-10);\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var proto = Paper.prototype,\n\t        is = Snap.is;\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - rx (number) #optional horizontal radius for rounded corners, default is 0\n\t     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n\t     = (object) the `rect` element\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    proto.rect = function (x, y, w, h, rx, ry) {\n\t        var attr;\n\t        if (ry == null) {\n\t            ry = rx;\n\t        }\n\t        if (is(x, \"object\") && x == \"[object Object]\") {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                width: w,\n\t                height: h\n\t            };\n\t            if (rx != null) {\n\t                attr.rx = rx;\n\t                attr.ry = ry;\n\t            }\n\t        }\n\t        return this.el(\"rect\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) the `circle` element\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    proto.circle = function (cx, cy, r) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr = {\n\t                cx: cx,\n\t                cy: cy,\n\t                r: r\n\t            };\n\t        }\n\t        return this.el(\"circle\", attr);\n\t    };\n\t\n\t    var preload = (function () {\n\t        function onerror() {\n\t            this.parentNode.removeChild(this);\n\t        }\n\t        return function (src, f) {\n\t            var img = glob.doc.createElement(\"img\"),\n\t                body = glob.doc.body;\n\t            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t            img.onload = function () {\n\t                f.call(img);\n\t                img.onload = img.onerror = null;\n\t                body.removeChild(img);\n\t            };\n\t            img.onerror = onerror;\n\t            body.appendChild(img);\n\t            img.src = src;\n\t        };\n\t    }());\n\t\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Places an image on the surface\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x offset position\n\t     - y (number) y offset position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) the `image` element\n\t     * or\n\t     = (object) Snap element object with type `image`\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    proto.image = function (src, x, y, width, height) {\n\t        var el = this.el(\"image\");\n\t        if (is(src, \"object\") && \"src\" in src) {\n\t            el.attr(src);\n\t        } else if (src != null) {\n\t            var set = {\n\t                \"xlink:href\": src,\n\t                preserveAspectRatio: \"none\"\n\t            };\n\t            if (x != null && y != null) {\n\t                set.x = x;\n\t                set.y = y;\n\t            }\n\t            if (width != null && height != null) {\n\t                set.width = width;\n\t                set.height = height;\n\t            } else {\n\t                preload(src, function () {\n\t                    Snap._.$(el.node, {\n\t                        width: this.offsetWidth,\n\t                        height: this.offsetHeight\n\t                    });\n\t                });\n\t            }\n\t            Snap._.$(el.node, set);\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) the `ellipse` element\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    proto.ellipse = function (cx, cy, rx, ry) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr ={\n\t                cx: cx,\n\t                cy: cy,\n\t                rx: rx,\n\t                ry: ry\n\t            };\n\t        }\n\t        return this.el(\"ellipse\", attr);\n\t    };\n\t    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a `<path>` element using the given string as the path's definition\n\t     - pathString (string) #optional path string in SVG format\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n\t     | \"M10,20L30,40\"\n\t     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n\t     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t    \\*/\n\t    proto.path = function (d) {\n\t        var attr;\n\t        if (is(d, \"object\") && !is(d, \"array\")) {\n\t            attr = d;\n\t        } else if (d) {\n\t            attr = {d: d};\n\t        }\n\t        return this.el(\"path\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.g\n\t     [ method ]\n\t     **\n\t     * Creates a group element\n\t     **\n\t     - varargs (…) #optional elements to nest within the group\n\t     = (object) the `g` element\n\t     **\n\t     > Usage\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g(c2, c1); // note that the order of elements is different\n\t     * or\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g();\n\t     | g.add(c2, c1);\n\t    \\*/\n\t    /*\\\n\t     * Paper.group\n\t     [ method ]\n\t     **\n\t     * See @Paper.g\n\t    \\*/\n\t    proto.group = proto.g = function (first) {\n\t        var attr,\n\t            el = this.el(\"g\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.svg\n\t     [ method ]\n\t     **\n\t     * Creates a nested SVG element.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `svg` element\n\t     **\n\t    \\*/\n\t    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n\t        var attrs = {};\n\t        if (is(x, \"object\") && y == null) {\n\t            attrs = x;\n\t        } else {\n\t            if (x != null) {\n\t                attrs.x = x;\n\t            }\n\t            if (y != null) {\n\t                attrs.y = y;\n\t            }\n\t            if (width != null) {\n\t                attrs.width = width;\n\t            }\n\t            if (height != null) {\n\t                attrs.height = height;\n\t            }\n\t            if (vbx != null && vby != null && vbw != null && vbh != null) {\n\t                attrs.viewBox = [vbx, vby, vbw, vbh];\n\t            }\n\t        }\n\t        return this.el(\"svg\", attrs);\n\t    };\n\t    /*\\\n\t     * Paper.mask\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n\t     **\n\t     = (object) the `mask` element\n\t     **\n\t    \\*/\n\t    proto.mask = function (first) {\n\t        var attr,\n\t            el = this.el(\"mask\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ptrn\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `pattern` element\n\t     **\n\t    \\*/\n\t    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n\t        if (is(x, \"object\")) {\n\t            var attr = x;\n\t        } else {\n\t            attr = {patternUnits: \"userSpaceOnUse\"};\n\t            if (x) {\n\t                attr.x = x;\n\t            }\n\t            if (y) {\n\t                attr.y = y;\n\t            }\n\t            if (width != null) {\n\t                attr.width = width;\n\t            }\n\t            if (height != null) {\n\t                attr.height = height;\n\t            }\n\t            if (vx != null && vy != null && vw != null && vh != null) {\n\t                attr.viewBox = [vx, vy, vw, vh];\n\t            } else {\n\t                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n\t            }\n\t        }\n\t        return this.el(\"pattern\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.use\n\t     [ method ]\n\t     **\n\t     * Creates a <use> element.\n\t     - id (string) @optional id of element to link\n\t     * or\n\t     - id (Element) @optional element to link\n\t     **\n\t     = (object) the `use` element\n\t     **\n\t    \\*/\n\t    proto.use = function (id) {\n\t        if (id != null) {\n\t            if (id instanceof Element) {\n\t                if (!id.attr(\"id\")) {\n\t                    id.attr({id: Snap._.id(id)});\n\t                }\n\t                id = id.attr(\"id\");\n\t            }\n\t            if (String(id).charAt() == \"#\") {\n\t                id = id.substring(1);\n\t            }\n\t            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n\t        } else {\n\t            return Element.prototype.use.call(this);\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.symbol\n\t     [ method ]\n\t     **\n\t     * Creates a <symbol> element.\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     = (object) the `symbol` element\n\t     **\n\t    \\*/\n\t    proto.symbol = function (vx, vy, vw, vh) {\n\t        var attr = {};\n\t        if (vx != null && vy != null && vw != null && vh != null) {\n\t            attr.viewBox = [vx, vy, vw, vh];\n\t        }\n\t\n\t        return this.el(\"symbol\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n\t     = (object) the `text` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.text(50, 50, \"Snap\");\n\t     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n\t     | // Text path usage\n\t     | t1.attr({textpath: \"M10,10L100,100\"});\n\t     | // or\n\t     | var pth = paper.path(\"M10,10L100,100\");\n\t     | t1.attr({textpath: pth});\n\t    \\*/\n\t    proto.text = function (x, y, text) {\n\t        var attr = {};\n\t        if (is(x, \"object\")) {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                text: text || \"\"\n\t            };\n\t        }\n\t        return this.el(\"text\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.line\n\t     [ method ]\n\t     **\n\t     * Draws a line\n\t     **\n\t     - x1 (number) x coordinate position of the start\n\t     - y1 (number) y coordinate position of the start\n\t     - x2 (number) x coordinate position of the end\n\t     - y2 (number) y coordinate position of the end\n\t     = (object) the `line` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.line(50, 50, 100, 100);\n\t    \\*/\n\t    proto.line = function (x1, y1, x2, y2) {\n\t        var attr = {};\n\t        if (is(x1, \"object\")) {\n\t            attr = x1;\n\t        } else if (x1 != null) {\n\t            attr = {\n\t                x1: x1,\n\t                x2: x2,\n\t                y1: y1,\n\t                y2: y2\n\t            };\n\t        }\n\t        return this.el(\"line\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polyline\n\t     [ method ]\n\t     **\n\t     * Draws a polyline\n\t     **\n\t     - points (array) array of points\n\t     * or\n\t     - varargs (…) points\n\t     = (object) the `polyline` element\n\t     **\n\t     > Usage\n\t     | var p1 = paper.polyline([10, 10, 100, 100]);\n\t     | var p2 = paper.polyline(10, 10, 100, 100);\n\t    \\*/\n\t    proto.polyline = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polyline\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polygon\n\t     [ method ]\n\t     **\n\t     * Draws a polygon. See @Paper.polyline\n\t    \\*/\n\t    proto.polygon = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polygon\", attr);\n\t    };\n\t    // gradients\n\t    (function () {\n\t        var $ = Snap._.$;\n\t        // gradients' helpers\n\t        function Gstops() {\n\t            return this.selectAll(\"stop\");\n\t        }\n\t        function GaddStop(color, offset) {\n\t            var stop = $(\"stop\"),\n\t                attr = {\n\t                    offset: +offset + \"%\"\n\t                };\n\t            color = Snap.color(color);\n\t            attr[\"stop-color\"] = color.hex;\n\t            if (color.opacity < 1) {\n\t                attr[\"stop-opacity\"] = color.opacity;\n\t            }\n\t            $(stop, attr);\n\t            this.node.appendChild(stop);\n\t            return this;\n\t        }\n\t        function GgetBBox() {\n\t            if (this.type == \"linearGradient\") {\n\t                var x1 = $(this.node, \"x1\") || 0,\n\t                    x2 = $(this.node, \"x2\") || 1,\n\t                    y1 = $(this.node, \"y1\") || 0,\n\t                    y2 = $(this.node, \"y2\") || 0;\n\t                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n\t            } else {\n\t                var cx = this.node.cx || .5,\n\t                    cy = this.node.cy || .5,\n\t                    r = this.node.r || 0;\n\t                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n\t            }\n\t        }\n\t        function gradient(defs, str) {\n\t            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n\t                el;\n\t            if (!grad) {\n\t                return null;\n\t            }\n\t            grad.params.unshift(defs);\n\t            if (grad.type.toLowerCase() == \"l\") {\n\t                el = gradientLinear.apply(0, grad.params);\n\t            } else {\n\t                el = gradientRadial.apply(0, grad.params);\n\t            }\n\t            if (grad.type != grad.type.toLowerCase()) {\n\t                $(el.node, {\n\t                    gradientUnits: \"userSpaceOnUse\"\n\t                });\n\t            }\n\t            var stops = grad.stops,\n\t                len = stops.length,\n\t                start = 0,\n\t                j = 0;\n\t            function seed(i, end) {\n\t                var step = (end - start) / (i - j);\n\t                for (var k = j; k < i; k++) {\n\t                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n\t                }\n\t                j = i;\n\t                start = end;\n\t            }\n\t            len--;\n\t            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n\t                seed(i, stops[i].offset);\n\t            }\n\t            stops[len].offset = stops[len].offset || 100;\n\t            seed(len, stops[len].offset);\n\t            for (i = 0; i <= len; i++) {\n\t                var stop = stops[i];\n\t                el.addStop(stop.color, stop.offset);\n\t            }\n\t            return el;\n\t        }\n\t        function gradientLinear(defs, x1, y1, x2, y2) {\n\t            var el = Snap._.make(\"linearGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (x1 != null) {\n\t                $(el.node, {\n\t                    x1: x1,\n\t                    y1: y1,\n\t                    x2: x2,\n\t                    y2: y2\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        function gradientRadial(defs, cx, cy, r, fx, fy) {\n\t            var el = Snap._.make(\"radialGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (cx != null) {\n\t                $(el.node, {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r: r\n\t                });\n\t            }\n\t            if (fx != null && fy != null) {\n\t                $(el.node, {\n\t                    fx: fx,\n\t                    fy: fy\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        /*\\\n\t         * Paper.gradient\n\t         [ method ]\n\t         **\n\t         * Creates a gradient element\n\t         **\n\t         - gradient (string) gradient descriptor\n\t         > Gradient Descriptor\n\t         * The gradient descriptor is an expression formatted as\n\t         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n\t         * either linear or radial.  The uppercase `L` or `R` letters\n\t         * indicate absolute coordinates offset from the SVG surface.\n\t         * Lowercase `l` or `r` letters indicate coordinates\n\t         * calculated relative to the element to which the gradient is\n\t         * applied.  Coordinates specify a linear gradient vector as\n\t         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n\t         * `r` and optional `fx`, `fy` specifying a focal point away\n\t         * from the center of the circle. Specify `<colors>` as a list\n\t         * of dash-separated CSS color values.  Each color may be\n\t         * followed by a custom offset value, separated with a colon\n\t         * character.\n\t         > Examples\n\t         * Linear gradient, relative from top-left corner to bottom-right\n\t         * corner, from black through red to white:\n\t         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n\t         * through red at 25% to white:\n\t         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n\t         * Radial gradient, relative from the center of the element with radius\n\t         * half the width, from black to white:\n\t         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n\t         * To apply the gradient:\n\t         | paper.circle(50, 50, 40).attr({\n\t         |     fill: g\n\t         | });\n\t         = (object) the `gradient` element\n\t        \\*/\n\t        proto.gradient = function (str) {\n\t            return gradient(this.defs, str);\n\t        };\n\t        proto.gradientLinear = function (x1, y1, x2, y2) {\n\t            return gradientLinear(this.defs, x1, y1, x2, y2);\n\t        };\n\t        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n\t            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n\t        };\n\t        /*\\\n\t         * Paper.toString\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper\n\t         = (string) SVG code for the @Paper\n\t        \\*/\n\t        proto.toString = function () {\n\t            var doc = this.node.ownerDocument,\n\t                f = doc.createDocumentFragment(),\n\t                d = doc.createElement(\"div\"),\n\t                svg = this.node.cloneNode(true),\n\t                res;\n\t            f.appendChild(d);\n\t            d.appendChild(svg);\n\t            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n\t            res = d.innerHTML;\n\t            f.removeChild(f.firstChild);\n\t            return res;\n\t        };\n\t        /*\\\n\t         * Paper.toDataURL\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper as Data URI string.\n\t         = (string) Data URI string\n\t        \\*/\n\t        proto.toDataURL = function () {\n\t            if (window && window.btoa) {\n\t                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n\t            }\n\t        };\n\t        /*\\\n\t         * Paper.clear\n\t         [ method ]\n\t         **\n\t         * Removes all child nodes of the paper, except <defs>.\n\t        \\*/\n\t        proto.clear = function () {\n\t            var node = this.node.firstChild,\n\t                next;\n\t            while (node) {\n\t                next = node.nextSibling;\n\t                if (node.tagName != \"defs\") {\n\t                    node.parentNode.removeChild(node);\n\t                } else {\n\t                    proto.clear.call({node: node});\n\t                }\n\t                node = next;\n\t            }\n\t        };\n\t    }());\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        clone = Snap._.clone,\n\t        has = \"hasOwnProperty\",\n\t        p2s = /,?([a-z]),?/gi,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        PI = math.PI,\n\t        mmin = math.min,\n\t        mmax = math.max,\n\t        pow = math.pow,\n\t        abs = math.abs;\n\t    function paths(ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    }\n\t    function box(x, y, width, height) {\n\t        if (x == null) {\n\t            x = y = width = height = 0;\n\t        }\n\t        if (y == null) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            w: width,\n\t            height: height,\n\t            h: height,\n\t            x2: x + width,\n\t            y2: y + height,\n\t            cx: x + width / 2,\n\t            cy: y + height / 2,\n\t            r1: math.min(width, height) / 2,\n\t            r2: math.max(width, height) / 2,\n\t            r0: math.sqrt(width * width + height * height) / 2,\n\t            path: rectPath(x, y, width, height),\n\t            vb: [x, y, width, height].join(\" \")\n\t        };\n\t    }\n\t    function toString() {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    }\n\t    function pathClone(pathArray) {\n\t        var res = clone(pathArray);\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n\t                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    }\n\t    function getLengthFactory(istotal, subpath) {\n\t        function O(val) {\n\t            return +(+val).toFixed(3);\n\t        }\n\t        return Snap._.cacher(function (path, length, onlystart) {\n\t            if (path instanceof Element) {\n\t                path = path.attr(\"d\");\n\t            }\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\n\t                                \"C\" + O(point.start.x),\n\t                                O(point.start.y),\n\t                                O(point.m.x),\n\t                                O(point.m.y),\n\t                                O(point.x),\n\t                                O(point.y)\n\t                            ];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\n\t                                \"M\" + O(point.x),\n\t                                O(point.y) + \"C\" + O(point.n.x),\n\t                                O(point.n.y),\n\t                                O(point.end.x),\n\t                                O(point.end.y),\n\t                                O(p[5]),\n\t                                O(p[6])\n\t                            ].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return point;\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            return point;\n\t        }, null, Snap._.clone);\n\t    }\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        // (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    }\n\t    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!Snap.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return box(\n\t            bbox.min.x,\n\t            bbox.min.y,\n\t            bbox.max.x - bbox.min.x,\n\t            bbox.max.y - bbox.min.y\n\t        );\n\t    }\n\t    function isPointInsideBBox(bbox, x, y) {\n\t        return  x >= bbox.x &&\n\t                x <= bbox.x + bbox.width &&\n\t                y >= bbox.y &&\n\t                y <= bbox.y + bbox.height;\n\t    }\n\t    function isBBoxIntersect(bbox1, bbox2) {\n\t        bbox1 = box(bbox1);\n\t        bbox2 = box(bbox2);\n\t        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n\t                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n\t                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    }\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = bezierBBox(bez1),\n\t            bbox2 = bezierBBox(bez2);\n\t        if (!isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = ~~(l1 / 8),\n\t            n2 = ~~(l2 / 8),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: t1,\n\t                                t2: t2\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function pathIntersection(path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    }\n\t    function pathIntersectionNumber(path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    }\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = path2curve(path1);\n\t        path2 = path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function isPointInsidePath(path, x, y) {\n\t        var bbox = pathBBox(path);\n\t        return isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    }\n\t    function pathBBox(path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return box();\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0, \n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X.concat(dim.min.x, dim.max.x);\n\t                Y = Y.concat(dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin.apply(0, X),\n\t            ymin = mmin.apply(0, Y),\n\t            xmax = mmax.apply(0, X),\n\t            ymax = mmax.apply(0, Y),\n\t            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    }\n\t    function rectPath(x, y, w, h, r) {\n\t        if (r) {\n\t            return [\n\t                [\"M\", +x + (+r), y],\n\t                [\"l\", w - r * 2, 0],\n\t                [\"a\", r, r, 0, 0, 1, r, r],\n\t                [\"l\", 0, h - r * 2],\n\t                [\"a\", r, r, 0, 0, 1, -r, r],\n\t                [\"l\", r * 2 - w, 0],\n\t                [\"a\", r, r, 0, 0, 1, -r, -r],\n\t                [\"l\", 0, r * 2 - h],\n\t                [\"a\", r, r, 0, 0, 1, r, -r],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function ellipsePath(x, y, rx, ry, a) {\n\t        if (a == null && ry == null) {\n\t            ry = rx;\n\t        }\n\t        x = +x;\n\t        y = +y;\n\t        rx = +rx;\n\t        ry = +ry;\n\t        if (a != null) {\n\t            var rad = Math.PI / 180,\n\t                x1 = x + rx * Math.cos(-ry * rad),\n\t                x2 = x + rx * Math.cos(-a * rad),\n\t                y1 = y + rx * Math.sin(-ry * rad),\n\t                y2 = y + rx * Math.sin(-a * rad),\n\t                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n\t        } else {\n\t            res = [\n\t                [\"M\", x, y],\n\t                [\"m\", 0, -ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    var unit2px = Snap._unit2px,\n\t        getPath = {\n\t        path: function (el) {\n\t            return el.attr(\"path\");\n\t        },\n\t        circle: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx, attr.cy, attr.r);\n\t        },\n\t        ellipse: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n\t        },\n\t        rect: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n\t        },\n\t        image: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n\t        },\n\t        line: function (el) {\n\t            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n\t        },\n\t        polyline: function (el) {\n\t            return \"M\" + el.attr(\"points\");\n\t        },\n\t        polygon: function (el) {\n\t            return \"M\" + el.attr(\"points\") + \"z\";\n\t        },\n\t        deflt: function (el) {\n\t            var bbox = el.node.getBBox();\n\t            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t        }\n\t    };\n\t    function pathToRelative(pathArray) {\n\t        var pth = paths(pathArray),\n\t            lowerCase = String.prototype.toLowerCase;\n\t        if (pth.rel) {\n\t            return pathClone(pth.rel);\n\t        }\n\t        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = pathArray[0][1];\n\t            y = pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res.push([\"M\", x, y]);\n\t        }\n\t        for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t            var r = res[i] = [],\n\t                pa = pathArray[i];\n\t            if (pa[0] != lowerCase.call(pa[0])) {\n\t                r[0] = lowerCase.call(pa[0]);\n\t                switch (r[0]) {\n\t                    case \"a\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +(pa[6] - x).toFixed(3);\n\t                        r[7] = +(pa[7] - y).toFixed(3);\n\t                        break;\n\t                    case \"v\":\n\t                        r[1] = +(pa[1] - y).toFixed(3);\n\t                        break;\n\t                    case \"m\":\n\t                        mx = pa[1];\n\t                        my = pa[2];\n\t                    default:\n\t                        for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                        }\n\t                }\n\t            } else {\n\t                r = res[i] = [];\n\t                if (pa[0] == \"m\") {\n\t                    mx = pa[1] + x;\n\t                    my = pa[2] + y;\n\t                }\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    res[i][k] = pa[k];\n\t                }\n\t            }\n\t            var len = res[i].length;\n\t            switch (res[i][0]) {\n\t                case \"z\":\n\t                    x = mx;\n\t                    y = my;\n\t                    break;\n\t                case \"h\":\n\t                    x += +res[i][len - 1];\n\t                    break;\n\t                case \"v\":\n\t                    y += +res[i][len - 1];\n\t                    break;\n\t                default:\n\t                    x += +res[i][len - 2];\n\t                    y += +res[i][len - 1];\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.rel = pathClone(res);\n\t        return res;\n\t    }\n\t    function pathToAbsolute(pathArray) {\n\t        var pth = paths(pathArray);\n\t        if (pth.abs) {\n\t            return pathClone(pth.abs);\n\t        }\n\t        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        if (!pathArray || !pathArray.length) {\n\t            return [[\"M\", 0, 0]];\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0,\n\t            pa0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = +pathArray[0][1];\n\t            y = +pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res[0] = [\"M\", x, y];\n\t        }\n\t        var crz = pathArray.length == 3 &&\n\t            pathArray[0][0] == \"M\" &&\n\t            pathArray[1][0].toUpperCase() == \"R\" &&\n\t            pathArray[2][0].toUpperCase() == \"Z\";\n\t        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t            res.push(r = []);\n\t            pa = pathArray[i];\n\t            pa0 = pa[0];\n\t            if (pa0 != pa0.toUpperCase()) {\n\t                r[0] = pa0.toUpperCase();\n\t                switch (r[0]) {\n\t                    case \"A\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +pa[6] + x;\n\t                        r[7] = +pa[7] + y;\n\t                        break;\n\t                    case \"V\":\n\t                        r[1] = +pa[1] + y;\n\t                        break;\n\t                    case \"H\":\n\t                        r[1] = +pa[1] + x;\n\t                        break;\n\t                    case \"R\":\n\t                        var dots = [x, y].concat(pa.slice(1));\n\t                        for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                            dots[j] = +dots[j] + x;\n\t                            dots[++j] = +dots[j] + y;\n\t                        }\n\t                        res.pop();\n\t                        res = res.concat(catmullRom2bezier(dots, crz));\n\t                        break;\n\t                    case \"O\":\n\t                        res.pop();\n\t                        dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                        dots.push(dots[0]);\n\t                        res = res.concat(dots);\n\t                        break;\n\t                    case \"U\":\n\t                        res.pop();\n\t                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                        break;\n\t                    case \"M\":\n\t                        mx = +pa[1] + x;\n\t                        my = +pa[2] + y;\n\t                    default:\n\t                        for (j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                        }\n\t                }\n\t            } else if (pa0 == \"R\") {\n\t                dots = [x, y].concat(pa.slice(1));\n\t                res.pop();\n\t                res = res.concat(catmullRom2bezier(dots, crz));\n\t                r = [\"R\"].concat(pa.slice(-2));\n\t            } else if (pa0 == \"O\") {\n\t                res.pop();\n\t                dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                dots.push(dots[0]);\n\t                res = res.concat(dots);\n\t            } else if (pa0 == \"U\") {\n\t                res.pop();\n\t                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t            } else {\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    r[k] = pa[k];\n\t                }\n\t            }\n\t            pa0 = pa0.toUpperCase();\n\t            if (pa0 != \"O\") {\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = +mx;\n\t                        y = +my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.abs = pathClone(res);\n\t        return res;\n\t    }\n\t    function l2c(x1, y1, x2, y2) {\n\t        return [x1, y1, x2, y2, x2, y2];\n\t    }\n\t    function q2c(x1, y1, ax, ay, x2, y2) {\n\t        var _13 = 1 / 3,\n\t            _23 = 2 / 3;\n\t        return [\n\t                _13 * x1 + _23 * ax,\n\t                _13 * y1 + _23 * ay,\n\t                _13 * x2 + _23 * ax,\n\t                _13 * y2 + _23 * ay,\n\t                x2,\n\t                y2\n\t            ];\n\t    }\n\t    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t        // for more information of where this math came from visit:\n\t        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t        var _120 = PI * 120 / 180,\n\t            rad = PI / 180 * (+angle || 0),\n\t            res = [],\n\t            xy,\n\t            rotate = Snap._.cacher(function (x, y, rad) {\n\t                var X = x * math.cos(rad) - y * math.sin(rad),\n\t                    Y = x * math.sin(rad) + y * math.cos(rad);\n\t                return {x: X, y: Y};\n\t            });\n\t        if (!recursive) {\n\t            xy = rotate(x1, y1, -rad);\n\t            x1 = xy.x;\n\t            y1 = xy.y;\n\t            xy = rotate(x2, y2, -rad);\n\t            x2 = xy.x;\n\t            y2 = xy.y;\n\t            var cos = math.cos(PI / 180 * angle),\n\t                sin = math.sin(PI / 180 * angle),\n\t                x = (x1 - x2) / 2,\n\t                y = (y1 - y2) / 2;\n\t            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t            if (h > 1) {\n\t                h = math.sqrt(h);\n\t                rx = h * rx;\n\t                ry = h * ry;\n\t            }\n\t            var rx2 = rx * rx,\n\t                ry2 = ry * ry,\n\t                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\t\n\t            f1 = x1 < cx ? PI - f1 : f1;\n\t            f2 = x2 < cx ? PI - f2 : f2;\n\t            f1 < 0 && (f1 = PI * 2 + f1);\n\t            f2 < 0 && (f2 = PI * 2 + f2);\n\t            if (sweep_flag && f1 > f2) {\n\t                f1 = f1 - PI * 2;\n\t            }\n\t            if (!sweep_flag && f2 > f1) {\n\t                f2 = f2 - PI * 2;\n\t            }\n\t        } else {\n\t            f1 = recursive[0];\n\t            f2 = recursive[1];\n\t            cx = recursive[2];\n\t            cy = recursive[3];\n\t        }\n\t        var df = f2 - f1;\n\t        if (abs(df) > _120) {\n\t            var f2old = f2,\n\t                x2old = x2,\n\t                y2old = y2;\n\t            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t            x2 = cx + rx * math.cos(f2);\n\t            y2 = cy + ry * math.sin(f2);\n\t            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t        }\n\t        df = f2 - f1;\n\t        var c1 = math.cos(f1),\n\t            s1 = math.sin(f1),\n\t            c2 = math.cos(f2),\n\t            s2 = math.sin(f2),\n\t            t = math.tan(df / 4),\n\t            hx = 4 / 3 * rx * t,\n\t            hy = 4 / 3 * ry * t,\n\t            m1 = [x1, y1],\n\t            m2 = [x1 + hx * s1, y1 - hy * c1],\n\t            m3 = [x2 + hx * s2, y2 - hy * c2],\n\t            m4 = [x2, y2];\n\t        m2[0] = 2 * m1[0] - m2[0];\n\t        m2[1] = 2 * m1[1] - m2[1];\n\t        if (recursive) {\n\t            return [m2, m3, m4].concat(res);\n\t        } else {\n\t            res = [m2, m3, m4].concat(res).join().split(\",\");\n\t            var newres = [];\n\t            for (var i = 0, ii = res.length; i < ii; i++) {\n\t                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t            }\n\t            return newres;\n\t        }\n\t    }\n\t    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t;\n\t        return {\n\t            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t        };\n\t    }\n\t    \n\t    // Returns bounding box of cubic bezier curve.\n\t    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t    // Original version: NISHIO Hirokazu\n\t    // Modifications: https://github.com/timo22345\n\t    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t        var tvalues = [],\n\t            bounds = [[], []],\n\t            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\t        for (var i = 0; i < 2; ++i) {\n\t            if (i == 0) {\n\t                b = 6 * x0 - 12 * x1 + 6 * x2;\n\t                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t                c = 3 * x1 - 3 * x0;\n\t            } else {\n\t                b = 6 * y0 - 12 * y1 + 6 * y2;\n\t                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t                c = 3 * y1 - 3 * y0;\n\t            }\n\t            if (abs(a) < 1e-12) {\n\t                if (abs(b) < 1e-12) {\n\t                    continue;\n\t                }\n\t                t = -c / b;\n\t                if (0 < t && t < 1) {\n\t                    tvalues.push(t);\n\t                }\n\t                continue;\n\t            }\n\t            b2ac = b * b - 4 * c * a;\n\t            sqrtb2ac = math.sqrt(b2ac);\n\t            if (b2ac < 0) {\n\t                continue;\n\t            }\n\t            t1 = (-b + sqrtb2ac) / (2 * a);\n\t            if (0 < t1 && t1 < 1) {\n\t                tvalues.push(t1);\n\t            }\n\t            t2 = (-b - sqrtb2ac) / (2 * a);\n\t            if (0 < t2 && t2 < 1) {\n\t                tvalues.push(t2);\n\t            }\n\t        }\n\t\n\t        var x, y, j = tvalues.length,\n\t            jlen = j,\n\t            mt;\n\t        while (j--) {\n\t            t = tvalues[j];\n\t            mt = 1 - t;\n\t            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t        }\n\t\n\t        bounds[0][jlen] = x0;\n\t        bounds[1][jlen] = y0;\n\t        bounds[0][jlen + 1] = x3;\n\t        bounds[1][jlen + 1] = y3;\n\t        bounds[0].length = bounds[1].length = jlen + 2;\n\t\n\t\n\t        return {\n\t          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n\t          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n\t        };\n\t    }\n\t\n\t    function path2curve(path, path2) {\n\t        var pth = !path2 && paths(path);\n\t        if (!path2 && pth.curve) {\n\t            return pathClone(pth.curve);\n\t        }\n\t        var p = pathToAbsolute(path),\n\t            p2 = path2 && pathToAbsolute(path2),\n\t            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            processPath = function (path, d, pcom) {\n\t                var nx, ny;\n\t                if (!path) {\n\t                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                }\n\t                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n\t                switch (path[0]) {\n\t                    case \"M\":\n\t                        d.X = path[1];\n\t                        d.Y = path[2];\n\t                        break;\n\t                    case \"A\":\n\t                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t                        break;\n\t                    case \"S\":\n\t                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                            nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                        }\n\t                        else {                            // or some else or nothing\n\t                            nx = d.x;\n\t                            ny = d.y;\n\t                        }\n\t                        path = [\"C\", nx, ny].concat(path.slice(1));\n\t                        break;\n\t                    case \"T\":\n\t                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                        }\n\t                        else {                            // or something else or nothing\n\t                            d.qx = d.x;\n\t                            d.qy = d.y;\n\t                        }\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                        break;\n\t                    case \"Q\":\n\t                        d.qx = path[1];\n\t                        d.qy = path[2];\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                        break;\n\t                    case \"L\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n\t                        break;\n\t                    case \"H\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n\t                        break;\n\t                    case \"V\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n\t                        break;\n\t                    case \"Z\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n\t                        break;\n\t                }\n\t                return path;\n\t            },\n\t            fixArc = function (pp, i) {\n\t                if (pp[i].length > 7) {\n\t                    pp[i].shift();\n\t                    var pi = pp[i];\n\t                    while (pi.length) {\n\t                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\t                        p2 && (pcoms2[i] = \"A\"); // the same as above\n\t                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n\t                    }\n\t                    pp.splice(i, 1);\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            fixM = function (path1, path2, a1, a2, i) {\n\t                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                    a1.bx = 0;\n\t                    a1.by = 0;\n\t                    a1.x = path1[i][1];\n\t                    a1.y = path1[i][2];\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            pcoms1 = [], // path commands of original path p\n\t            pcoms2 = [], // path commands of original path p2\n\t            pfirst = \"\", // temporary holder for original path command\n\t            pcom = \"\"; // holder for previous path command of original path\n\t        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t            p[i] && (pfirst = p[i][0]); // save current path command\n\t\n\t            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t            {\n\t                pcoms1[i] = pfirst; // Save current path command\n\t                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n\t            }\n\t            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\t\n\t            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t            // which may produce multiple C:s\n\t            // so we have to make sure that C is also C in original path\n\t\n\t            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\t\n\t            if (p2) { // the same procedures is done to p2\n\t                p2[i] && (pfirst = p2[i][0]);\n\t                if (pfirst != \"C\") {\n\t                    pcoms2[i] = pfirst;\n\t                    i && (pcom = pcoms2[i - 1]);\n\t                }\n\t                p2[i] = processPath(p2[i], attrs2, pcom);\n\t\n\t                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n\t                    pcoms2[i] = \"C\";\n\t                }\n\t\n\t                fixArc(p2, i);\n\t            }\n\t            fixM(p, p2, attrs, attrs2, i);\n\t            fixM(p2, p, attrs2, attrs, i);\n\t            var seg = p[i],\n\t                seg2 = p2 && p2[i],\n\t                seglen = seg.length,\n\t                seg2len = p2 && seg2.length;\n\t            attrs.x = seg[seglen - 2];\n\t            attrs.y = seg[seglen - 1];\n\t            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t            attrs2.x = p2 && seg2[seg2len - 2];\n\t            attrs2.y = p2 && seg2[seg2len - 1];\n\t        }\n\t        if (!p2) {\n\t            pth.curve = pathClone(p);\n\t        }\n\t        return p2 ? [p, p2] : p;\n\t    }\n\t    function mapPath(path, matrix) {\n\t        if (!matrix) {\n\t            return path;\n\t        }\n\t        var x, y, i, j, ii, jj, pathi;\n\t        path = path2curve(path);\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            pathi = path[i];\n\t            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                x = matrix.x(pathi[j], pathi[j + 1]);\n\t                y = matrix.y(pathi[j], pathi[j + 1]);\n\t                pathi[j] = x;\n\t                pathi[j + 1] = y;\n\t            }\n\t        }\n\t        return path;\n\t    }\n\t\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\t\n\t        return d;\n\t    }\n\t\n\t    // export\n\t    Snap.path = paths;\n\t\n\t    /*\\\n\t     * Snap.path.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the given path in pixels\n\t     **\n\t     - path (string) SVG path string\n\t     **\n\t     = (number) length\n\t    \\*/\n\t    Snap.path.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Snap.path.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns the coordinates of the point located at the given length along the given path\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    Snap.path.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Snap.path.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns the subpath of a given path between given start and end lengths\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    Snap.path.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the path in pixels (only works for `path` elements)\n\t     = (number) length\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\t    };\n\t    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n\t     **\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        return getPointAtLength(this.attr(\"d\"), length);\n\t    };\n\t    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n\t     **\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n\t    };\n\t    Snap._.box = box;\n\t    /*\\\n\t     * Snap.path.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds dot coordinates on the given cubic beziér curve at the given t\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point,\n\t     o     y: (number) y coordinate of the point,\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor,\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     },\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor,\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     },\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve,\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     },\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve,\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     },\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    Snap.path.findDotsAtSegment = findDotsAtSegment;\n\t    /*\\\n\t     * Snap.path.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given cubic beziér curve\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for beziér curve\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.bezierBBox = bezierBBox;\n\t    /*\\\n\t     * Snap.path.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding box\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point is inside\n\t    \\*/\n\t    Snap.path.isPointInsideBBox = isPointInsideBBox;\n\t    Snap.closest = function (x, y, X, Y) {\n\t        var r = 100,\n\t            b = box(x - r / 2, y - r / 2, r, r),\n\t            inside = [],\n\t            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n\t                return {\n\t                    x: X[i].x,\n\t                    y: X[i].y\n\t                };\n\t            } : function (i) {\n\t                return {\n\t                    x: X[i],\n\t                    y: Y[i]\n\t                };\n\t            },\n\t            found = 0;\n\t        while (r <= 1e6 && !found) {\n\t            for (var i = 0, ii = X.length; i < ii; i++) {\n\t                var xy = getter(i);\n\t                if (isPointInsideBBox(b, xy.x, xy.y)) {\n\t                    found++;\n\t                    inside.push(xy);\n\t                    break;\n\t                }\n\t            }\n\t            if (!found) {\n\t                r *= 2;\n\t                b = box(x - r / 2, y - r / 2, r, r)\n\t            }\n\t        }\n\t        if (r == 1e6) {\n\t            return;\n\t        }\n\t        var len = Infinity,\n\t            res;\n\t        for (i = 0, ii = inside.length; i < ii; i++) {\n\t            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\t            if (len > l) {\n\t                len = l;\n\t                inside[i].len = l;\n\t                res = inside[i];\n\t            }\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.path.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if bounding boxes intersect\n\t    \\*/\n\t    Snap.path.isBBoxIntersect = isBBoxIntersect;\n\t    /*\\\n\t     * Snap.path.intersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point,\n\t     o         y: (number) y coordinate of the point,\n\t     o         t1: (number) t value for segment of path1,\n\t     o         t2: (number) t value for segment of path2,\n\t     o         segment1: (number) order number for segment of path1,\n\t     o         segment2: (number) order number for segment of path2,\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    Snap.path.intersection = pathIntersection;\n\t    Snap.path.intersectionNumber = pathIntersectionNumber;\n\t    /*\\\n\t     * Snap.path.isPointInside\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     *\n\t     * Note: fill mode doesn’t affect the result of this method.\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) `true` if point is inside the path\n\t    \\*/\n\t    Snap.path.isPointInside = isPointInsidePath;\n\t    /*\\\n\t     * Snap.path.getBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given path\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.getBBox = pathBBox;\n\t    Snap.path.get = getPath;\n\t    /*\\\n\t     * Snap.path.toRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into relative values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toRelative = pathToRelative;\n\t    /*\\\n\t     * Snap.path.toAbsolute\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into absolute values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toAbsolute = pathToAbsolute;\n\t    /*\\\n\t     * Snap.path.toCubic\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic beziér curves\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments\n\t    \\*/\n\t    Snap.path.toCubic = path2curve;\n\t    /*\\\n\t     * Snap.path.map\n\t     [ method ]\n\t     **\n\t     * Transform the path string with the given matrix\n\t     - path (string) path string\n\t     - matrix (object) see @Matrix\n\t     = (string) transformed path string\n\t    \\*/\n\t    Snap.path.map = mapPath;\n\t    Snap.path.toString = toString;\n\t    Snap.path.clone = pathClone;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var mmax = Math.max,\n\t        mmin = Math.min;\n\t\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t\tthis.bindings = {};\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i]) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set\n\t     *\n\t     * If the function returns `false`, the loop stops running.\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.animate\n\t     [ method ]\n\t     **\n\t     * Animates each element in set in sync.\n\t     *\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     * or\n\t     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n\t     > Usage\n\t     | // animate all elements in set to radius 10\n\t     | set.animate({r: 10}, 500, mina.easein);\n\t     | // or\n\t     | // animate first element to radius 10, but second to radius 20 and in different time\n\t     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n\t     = (Element) the current element\n\t    \\*/\n\t    setproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Snap._.Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var args = arguments;\n\t        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n\t            var each = true;\n\t        }\n\t        var begin,\n\t            handler = function () {\n\t                if (begin) {\n\t                    this.b = begin;\n\t                } else {\n\t                    begin = this.b;\n\t                }\n\t            },\n\t            cb = 0,\n\t            set = this,\n\t            callbacker = callback && function () {\n\t                if (++cb == set.length) {\n\t                    callback.call(this);\n\t                }\n\t            };\n\t        return this.forEach(function (el, i) {\n\t            eve.once(\"snap.animcreated.\" + el.id, handler);\n\t            if (each) {\n\t                args[i] && el.animate.apply(el, args[i]);\n\t            } else {\n\t                el.animate(attrs, ms, easing, callbacker);\n\t            }\n\t        });\n\t    };\n\t    setproto.remove = function () {\n\t        while (this.length) {\n\t            this.pop().remove();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.bind\n\t     [ method ]\n\t     **\n\t     * Specifies how to handle a specific attribute when applied\n\t     * to a set.\n\t     *\n\t     **\n\t     - attr (string) attribute name\n\t     - callback (function) function to run\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     - eattr (string) attribute on the element to bind the attribute to\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.bind = function (attr, a, b) {\n\t        var data = {};\n\t        if (typeof a == \"function\") {\n\t            this.bindings[attr] = a;\n\t        } else {\n\t            var aname = b || attr;\n\t            this.bindings[attr] = function (v) {\n\t                data[aname] = v;\n\t                a.attr(data);\n\t            };\n\t        }\n\t        return this;\n\t    };\n\t    setproto.attr = function (value) {\n\t        var unbound = {};\n\t        for (var k in value) {\n\t            if (this.bindings[k]) {\n\t                this.bindings[k](value[k]);\n\t            } else {\n\t                unbound[k] = value[k];\n\t            }\n\t        }\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            this.items[i].attr(unbound);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes range of elements from the set\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found and removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin.apply(0, x);\n\t        y = mmin.apply(0, y);\n\t        x2 = mmax.apply(0, x2);\n\t        y2 = mmax.apply(0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y,\n\t            cx: x + (x2 - x) / 2,\n\t            cy: y + (y2 - y) / 2\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = new Set;\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Snap\\u2018s set\";\n\t    };\n\t    setproto.type = \"set\";\n\t    // export\n\t    Snap.Set = Set;\n\t    Snap.set = function () {\n\t        var set = new Set;\n\t        if (arguments.length) {\n\t            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return set;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var names = {},\n\t        reUnit = /[a-z]+$/i,\n\t        Str = String;\n\t    names.stroke = names.fill = \"colour\";\n\t    function getEmpty(item) {\n\t        var l = item[0];\n\t        switch (l.toLowerCase()) {\n\t            case \"t\": return [l, 0, 0];\n\t            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t            case \"r\": if (item.length == 4) {\n\t                return [l, 0, item[2], item[3]];\n\t            } else {\n\t                return [l, 0];\n\t            }\n\t            case \"s\": if (item.length == 5) {\n\t                return [l, 1, 1, item[3], item[4]];\n\t            } else if (item.length == 3) {\n\t                return [l, 1, 1];\n\t            } else {\n\t                return [l, 1];\n\t            }\n\t        }\n\t    }\n\t    function equaliseTransform(t1, t2, getBBox) {\n\t        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t        t1 = Snap.parseTransformString(t1) || [];\n\t        t2 = Snap.parseTransformString(t2) || [];\n\t        var maxlength = Math.max(t1.length, t2.length),\n\t            from = [],\n\t            to = [],\n\t            i = 0, j, jj,\n\t            tt1, tt2;\n\t        for (; i < maxlength; i++) {\n\t            tt1 = t1[i] || getEmpty(t2[i]);\n\t            tt2 = t2[i] || getEmpty(tt1);\n\t            if ((tt1[0] != tt2[0]) ||\n\t                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                ) {\n\t                    t1 = Snap._.transform2matrix(t1, getBBox());\n\t                    t2 = Snap._.transform2matrix(t2, getBBox());\n\t                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n\t                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n\t                    break;\n\t            }\n\t            from[i] = [];\n\t            to[i] = [];\n\t            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n\t                j in tt1 && (from[i][j] = tt1[j]);\n\t                j in tt2 && (to[i][j] = tt2[j]);\n\t            }\n\t        }\n\t        return {\n\t            from: path2array(from),\n\t            to: path2array(to),\n\t            f: getPath(from)\n\t        };\n\t    }\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    function getViewBox(val) {\n\t        return val.join(\" \");\n\t    }\n\t    function getColour(clr) {\n\t        return Snap.rgb(clr[0], clr[1], clr[2]);\n\t    }\n\t    function getPath(path) {\n\t        var k = 0, i, ii, j, jj, out, a, b = [];\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            out = \"[\";\n\t            a = ['\"' + path[i][0] + '\"'];\n\t            for (j = 1, jj = path[i].length; j < jj; j++) {\n\t                a[j] = \"val[\" + (k++) + \"]\";\n\t            }\n\t            out += a + \"]\";\n\t            b[i] = out;\n\t        }\n\t        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n\t    }\n\t    function path2array(path) {\n\t        var out = [];\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            for (var j = 1, jj = path[i].length; j < jj; j++) {\n\t                out.push(path[i][j]);\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    function isNumeric(obj) {\n\t        return isFinite(parseFloat(obj));\n\t    }\n\t    function arrayEqual(arr1, arr2) {\n\t        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n\t            return false;\n\t        }\n\t        return arr1.toString() == arr2.toString();\n\t    }\n\t    Element.prototype.equal = function (name, b) {\n\t        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n\t    };\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this;\n\t        if (isNumeric(a) && isNumeric(b)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getNumber\n\t            };\n\t        }\n\t        if (names[name] == \"colour\") {\n\t            A = Snap.color(a);\n\t            B = Snap.color(b);\n\t            return {\n\t                from: [A.r, A.g, A.b, A.opacity],\n\t                to: [B.r, B.g, B.b, B.opacity],\n\t                f: getColour\n\t            };\n\t        }\n\t        if (name == \"viewBox\") {\n\t            A = this.attr(name).vb.split(\" \").map(Number);\n\t            B = b.split(\" \").map(Number);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: getViewBox\n\t            };\n\t        }\n\t        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n\t            if (b instanceof Snap.Matrix) {\n\t                b = b.toTransformString();\n\t            }\n\t            if (!Snap._.rgTransform.test(b)) {\n\t                b = Snap._.svgTransform2string(b);\n\t            }\n\t            return equaliseTransform(a, b, function () {\n\t                return el.getBBox(1);\n\t            });\n\t        }\n\t        if (name == \"d\" || name == \"path\") {\n\t            A = Snap.path.toCubic(a, b);\n\t            return {\n\t                from: path2array(A[0]),\n\t                to: path2array(A[1]),\n\t                f: getPath(A[0])\n\t            };\n\t        }\n\t        if (name == \"points\") {\n\t            A = Str(a).split(Snap._.separator);\n\t            B = Str(b).split(Snap._.separator);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: function (val) { return val; }\n\t            };\n\t        }\n\t        var aUnit = a.match(reUnit),\n\t            bUnit = Str(b).match(reUnit);\n\t        if (aUnit && arrayEqual(aUnit, bUnit)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getUnit(aUnit)\n\t            };\n\t        } else {\n\t            return {\n\t                from: this.asPX(name),\n\t                to: this.asPX(name, b),\n\t                f: getNumber\n\t            };\n\t        }\n\t    });\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t    has = \"hasOwnProperty\",\n\t    supportsTouch = \"createTouch\" in glob.doc,\n\t    events = [\n\t        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n\t        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n\t        \"touchcancel\"\n\t    ],\n\t    touchMap = {\n\t        mousedown: \"touchstart\",\n\t        mousemove: \"touchmove\",\n\t        mouseup: \"touchend\"\n\t    },\n\t    getScroll = function (xy, el) {\n\t        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n\t            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n\t        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n\t    },\n\t    preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    addEvent = function (obj, type, fn, element) {\n\t        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n\t            f = function (e) {\n\t                var scrollY = getScroll(\"y\", element),\n\t                    scrollX = getScroll(\"x\", element);\n\t                if (supportsTouch && touchMap[has](type)) {\n\t                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n\t                            var olde = e;\n\t                            e = e.targetTouches[i];\n\t                            e.originalEvent = olde;\n\t                            e.preventDefault = preventTouch;\n\t                            e.stopPropagation = stopTouch;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                var x = e.clientX + scrollX,\n\t                    y = e.clientY + scrollY;\n\t                return fn.call(element, e, x, y);\n\t            };\n\t\n\t        if (type !== realName) {\n\t            obj.addEventListener(type, f, false);\n\t        }\n\t\n\t        obj.addEventListener(realName, f, false);\n\t\n\t        return function () {\n\t            if (type !== realName) {\n\t                obj.removeEventListener(type, f, false);\n\t            }\n\t\n\t            obj.removeEventListener(realName, f, false);\n\t            return true;\n\t        };\n\t    },\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = getScroll(\"y\"),\n\t            scrollX = getScroll(\"x\"),\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch) {\n\t                var i = e.touches && e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            // glob.win.opera && parent.removeChild(node);\n\t            // node.style.display = \"none\";\n\t            // o = dragi.el.paper.getElementByPoint(x, y);\n\t            // node.style.display = display;\n\t            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t            eve.off(\"snap.drag.*.\" + dragi.el.id);\n\t        }\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds a click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes a click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds a double click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes a double click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds a mousedown event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes a mousedown event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds a mousemove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes a mousemove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds a mouseout event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes a mouseout event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds a mouseover event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes a mouseover event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds a mouseup event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes a mouseup event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds a touchstart event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes a touchstart event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds a touchmove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes a touchmove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds a touchend event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes a touchend event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    \n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds a touchcancel event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes a touchcancel event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (Snap.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({\n\t                        name: eventName,\n\t                        f: fn,\n\t                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n\t                    });\n\t                } else {\n\t                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n\t                        try {\n\t                            this.events[i].f.call(this);\n\t                        } catch (e) {}\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            Snap[\"un\" + eventName] =\n\t            elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--) if (events[l].name == eventName &&\n\t                               (events[l].f == fn || !fn)) {\n\t                    events[l].unbind();\n\t                    events.splice(l, 1);\n\t                    !events.length && delete this.events;\n\t                    return this;\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds hover event handlers to the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes hover event handlers from the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n\t    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n\t    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n\t    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for an element's drag gesture\n\t     **\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n\t     * `drag.over.<id>` fires as well.\n\t     *\n\t     * Start event and start handler are called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler are called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler are called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        var el = this;\n\t        if (!arguments.length) {\n\t            var origTransform;\n\t            return el.drag(function (dx, dy) {\n\t                this.attr({\n\t                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n\t                });\n\t            }, function () {\n\t                origTransform = this.transform().local;\n\t            });\n\t        }\n\t        function start(e, x, y) {\n\t            (e.originalEvent || e).preventDefault();\n\t            el._drag.x = x;\n\t            el._drag.y = y;\n\t            el._drag.id = e.identifier;\n\t            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n\t            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n\t            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n\t            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n\t        }\n\t        function init(e, x, y) {\n\t            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n\t        }\n\t        eve.on(\"snap.draginit.\" + el.id, start);\n\t        el._drag = {};\n\t        draggable.push({el: el, start: start, init: init});\n\t        el.mousedown(init);\n\t        return el;\n\t    };\n\t    /*\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    // elproto.onDragOver = function (f) {\n\t    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n\t    // };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from the given element\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].init);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"snap.drag.*.\" + this.id);\n\t            eve.unbind(\"snap.draginit.\" + this.id);\n\t        }\n\t        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        pproto = Paper.prototype,\n\t        rgurl = /^\\s*url\\((.+)\\)/,\n\t        Str = String,\n\t        $ = Snap._.$;\n\t    Snap.filter = {};\n\t    /*\\\n\t     * Paper.filter\n\t     [ method ]\n\t     **\n\t     * Creates a `<filter>` element\n\t     **\n\t     - filstr (string) SVG fragment of filter provided as a string\n\t     = (object) @Element\n\t     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n\t     > Usage\n\t     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    pproto.filter = function (filstr) {\n\t        var paper = this;\n\t        if (paper.type != \"svg\") {\n\t            paper = paper.paper;\n\t        }\n\t        var f = Snap.parse(Str(filstr)),\n\t            id = Snap._.id(),\n\t            width = paper.node.offsetWidth,\n\t            height = paper.node.offsetHeight,\n\t            filter = $(\"filter\");\n\t        $(filter, {\n\t            id: id,\n\t            filterUnits: \"userSpaceOnUse\"\n\t        });\n\t        filter.appendChild(f.node);\n\t        paper.defs.appendChild(filter);\n\t        return new Element(filter);\n\t    };\n\t    \n\t    eve.on(\"snap.util.getattr.filter\", function () {\n\t        eve.stop();\n\t        var p = $(this.node, \"filter\");\n\t        if (p) {\n\t            var match = Str(p).match(rgurl);\n\t            return match && Snap.select(match[1]);\n\t        }\n\t    });\n\t    eve.on(\"snap.util.attr.filter\", function (value) {\n\t        if (value instanceof Element && value.type == \"filter\") {\n\t            eve.stop();\n\t            var id = value.node.id;\n\t            if (!id) {\n\t                $(value.node, {id: value.id});\n\t                id = value.id;\n\t            }\n\t            $(this.node, {\n\t                filter: Snap.url(id)\n\t            });\n\t        }\n\t        if (!value || value == \"none\") {\n\t            eve.stop();\n\t            this.node.removeAttribute(\"filter\");\n\t        }\n\t    });\n\t    /*\\\n\t     * Snap.filter.blur\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the blur filter\n\t     **\n\t     - x (number) amount of horizontal blur, in pixels\n\t     - y (number) #optional amount of vertical blur, in pixels\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.blur(5, 10)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.blur = function (x, y) {\n\t        if (x == null) {\n\t            x = 2;\n\t        }\n\t        var def = y == null ? x : [x, y];\n\t        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n\t            def: def\n\t        });\n\t    };\n\t    Snap.filter.blur.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.shadow\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the shadow filter\n\t     **\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - blur (number) #optional amount of blur\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * which makes blur default to `4`. Or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n\t        if (typeof blur == \"string\") {\n\t            color = blur;\n\t            opacity = color;\n\t            blur = 4;\n\t        }\n\t        if (typeof color != \"string\") {\n\t            opacity = color;\n\t            color = \"#000\";\n\t        }\n\t        color = color || \"#000\";\n\t        if (blur == null) {\n\t            blur = 4;\n\t        }\n\t        if (opacity == null) {\n\t            opacity = 1;\n\t        }\n\t        if (dx == null) {\n\t            dx = 0;\n\t            dy = 2;\n\t        }\n\t        if (dy == null) {\n\t            dy = dx;\n\t        }\n\t        color = Snap.color(color);\n\t        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n\t            color: color,\n\t            dx: dx,\n\t            dy: dy,\n\t            blur: blur,\n\t            opacity: opacity\n\t        });\n\t    };\n\t    Snap.filter.shadow.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.grayscale\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the grayscale filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.grayscale = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.2126 + 0.7874 * (1 - amount),\n\t            b: 0.7152 - 0.7152 * (1 - amount),\n\t            c: 0.0722 - 0.0722 * (1 - amount),\n\t            d: 0.2126 - 0.2126 * (1 - amount),\n\t            e: 0.7152 + 0.2848 * (1 - amount),\n\t            f: 0.0722 - 0.0722 * (1 - amount),\n\t            g: 0.2126 - 0.2126 * (1 - amount),\n\t            h: 0.0722 + 0.9278 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.grayscale.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.sepia\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the sepia filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.sepia = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.393 + 0.607 * (1 - amount),\n\t            b: 0.769 - 0.769 * (1 - amount),\n\t            c: 0.189 - 0.189 * (1 - amount),\n\t            d: 0.349 - 0.349 * (1 - amount),\n\t            e: 0.686 + 0.314 * (1 - amount),\n\t            f: 0.168 - 0.168 * (1 - amount),\n\t            g: 0.272 - 0.272 * (1 - amount),\n\t            h: 0.534 - 0.534 * (1 - amount),\n\t            i: 0.131 + 0.869 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.sepia.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.saturate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the saturate filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.saturate = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n\t            amount: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.saturate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.hueRotate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the hue-rotate filter\n\t     **\n\t     - angle (number) angle of rotation\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.hueRotate = function (angle) {\n\t        angle = angle || 0;\n\t        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n\t            angle: angle\n\t        });\n\t    };\n\t    Snap.filter.hueRotate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.invert\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the invert filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.invert = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.invert.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.brightness\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the brightness filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.brightness = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n\t            amount: amount\n\t        });\n\t    };\n\t    Snap.filter.brightness.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.contrast\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the contrast filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.contrast = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: .5 - amount / 2\n\t        });\n\t    };\n\t    Snap.filter.contrast.toString = function () {\n\t        return this();\n\t    };\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var box = Snap._.box,\n\t        is = Snap.is,\n\t        firstLetter = /^[^a-z]*([tbmlrc])/i,\n\t        toString = function () {\n\t            return \"T\" + this.dx + \",\" + this.dy;\n\t        };\n\t    /*\\\n\t     * Element.getAlign\n\t     [ method ]\n\t     **\n\t     * Returns shift needed to align the element relatively to given element.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n\t     > Usage\n\t     | el.transform(el.getAlign(el2, \"top\"));\n\t     * or\n\t     | var dy = el.getAlign(el2, \"top\").dy;\n\t    \\*/\n\t    Element.prototype.getAlign = function (el, way) {\n\t        if (way == null && is(el, \"string\")) {\n\t            way = el;\n\t            el = null;\n\t        }\n\t        el = el || this.paper;\n\t        var bx = el.getBBox ? el.getBBox() : box(el),\n\t            bb = this.getBBox(),\n\t            out = {};\n\t        way = way && way.match(firstLetter);\n\t        way = way ? way[1].toLowerCase() : \"c\";\n\t        switch (way) {\n\t            case \"t\":\n\t                out.dx = 0;\n\t                out.dy = bx.y - bb.y;\n\t            break;\n\t            case \"b\":\n\t                out.dx = 0;\n\t                out.dy = bx.y2 - bb.y2;\n\t            break;\n\t            case \"m\":\n\t                out.dx = 0;\n\t                out.dy = bx.cy - bb.cy;\n\t            break;\n\t            case \"l\":\n\t                out.dx = bx.x - bb.x;\n\t                out.dy = 0;\n\t            break;\n\t            case \"r\":\n\t                out.dx = bx.x2 - bb.x2;\n\t                out.dy = 0;\n\t            break;\n\t            default:\n\t                out.dx = bx.cx - bb.cx;\n\t                out.dy = 0;\n\t            break;\n\t        }\n\t        out.toString = toString;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.align\n\t     [ method ]\n\t     **\n\t     * Aligns the element relatively to given one via transformation.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object) this element\n\t     > Usage\n\t     | el.align(el2, \"top\");\n\t     * or\n\t     | el.align(\"middle\");\n\t    \\*/\n\t    Element.prototype.align = function (el, way) {\n\t        return this.transform(\"...\" + this.getAlign(el, way));\n\t    };\n\t});\n\t\n\treturn Snap;\n\t}));\n\t}.call(window));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** pgen.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7c43e8db6d90dfafc6c0\n **/","/*jshint eqnull:true*/\n(function (root) {\n  \"use strict\";\n\n  var GLOBAL_KEY = \"Random\";\n\n  var imul = (typeof Math.imul !== \"function\" || Math.imul(0xffffffff, 5) !== -5 ?\n    function (a, b) {\n      var ah = (a >>> 16) & 0xffff;\n      var al = a & 0xffff;\n      var bh = (b >>> 16) & 0xffff;\n      var bl = b & 0xffff;\n      // the shift by 0 fixes the sign on the high part\n      // the final |0 converts the unsigned value into a signed value\n      return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;\n    } :\n    Math.imul);\n\n  var stringRepeat = (typeof String.prototype.repeat === \"function\" && \"x\".repeat(3) === \"xxx\" ?\n    function (x, y) {\n      return x.repeat(y);\n    } : function (pattern, count) {\n      var result = \"\";\n      while (count > 0) {\n        if (count & 1) {\n          result += pattern;\n        }\n        count >>= 1;\n        pattern += pattern;\n      }\n      return result;\n    });\n\n  function Random(engine) {\n    if (!(this instanceof Random)) {\n      return new Random(engine);\n    }\n\n    if (engine == null) {\n      engine = Random.engines.nativeMath;\n    } else if (typeof engine !== \"function\") {\n      throw new TypeError(\"Expected engine to be a function, got \" + typeof engine);\n    }\n    this.engine = engine;\n  }\n  var proto = Random.prototype;\n\n  Random.engines = {\n    nativeMath: function () {\n      return (Math.random() * 0x100000000) | 0;\n    },\n    mt19937: (function (Int32Array) {\n      // http://en.wikipedia.org/wiki/Mersenne_twister\n      function refreshData(data) {\n        var k = 0;\n        var tmp = 0;\n        for (;\n          (k | 0) < 227; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        for (;\n          (k | 0) < 623; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);\n        data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n      }\n\n      function temper(value) {\n        value ^= value >>> 11;\n        value ^= (value << 7) & 0x9d2c5680;\n        value ^= (value << 15) & 0xefc60000;\n        return value ^ (value >>> 18);\n      }\n\n      function seedWithArray(data, source) {\n        var i = 1;\n        var j = 0;\n        var sourceLength = source.length;\n        var k = Math.max(sourceLength, 624) | 0;\n        var previous = data[0] | 0;\n        for (;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;\n          i = (i + 1) | 0;\n          ++j;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n          if (j >= sourceLength) {\n            j = 0;\n          }\n        }\n        for (k = 623;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;\n          i = (i + 1) | 0;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n        }\n        data[0] = 0x80000000;\n      }\n\n      function mt19937() {\n        var data = new Int32Array(624);\n        var index = 0;\n        var uses = 0;\n\n        function next() {\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n\n          var value = data[index];\n          index = (index + 1) | 0;\n          uses += 1;\n          return temper(value) | 0;\n        }\n        next.getUseCount = function() {\n          return uses;\n        };\n        next.discard = function (count) {\n          uses += count;\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n          while ((count - index) > 624) {\n            count -= 624 - index;\n            refreshData(data);\n            index = 0;\n          }\n          index = (index + count) | 0;\n          return next;\n        };\n        next.seed = function (initial) {\n          var previous = 0;\n          data[0] = previous = initial | 0;\n\n          for (var i = 1; i < 624; i = (i + 1) | 0) {\n            data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;\n          }\n          index = 624;\n          uses = 0;\n          return next;\n        };\n        next.seedWithArray = function (source) {\n          next.seed(0x012bd6aa);\n          seedWithArray(data, source);\n          return next;\n        };\n        next.autoSeed = function () {\n          return next.seedWithArray(Random.generateEntropyArray());\n        };\n        return next;\n      }\n\n      return mt19937;\n    }(typeof Int32Array === \"function\" ? Int32Array : Array)),\n    browserCrypto: (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\" && typeof Int32Array === \"function\") ? (function () {\n      var data = null;\n      var index = 128;\n\n      return function () {\n        if (index >= 128) {\n          if (data === null) {\n            data = new Int32Array(128);\n          }\n          crypto.getRandomValues(data);\n          index = 0;\n        }\n\n        return data[index++] | 0;\n      };\n    }()) : null\n  };\n\n  Random.generateEntropyArray = function () {\n    var array = [];\n    var engine = Random.engines.nativeMath;\n    for (var i = 0; i < 16; ++i) {\n      array[i] = engine() | 0;\n    }\n    array.push(new Date().getTime() | 0);\n    return array;\n  };\n\n  function returnValue(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  // [-0x80000000, 0x7fffffff]\n  Random.int32 = function (engine) {\n    return engine() | 0;\n  };\n  proto.int32 = function () {\n    return Random.int32(this.engine);\n  };\n\n  // [0, 0xffffffff]\n  Random.uint32 = function (engine) {\n    return engine() >>> 0;\n  };\n  proto.uint32 = function () {\n    return Random.uint32(this.engine);\n  };\n\n  // [0, 0x1fffffffffffff]\n  Random.uint53 = function (engine) {\n    var high = engine() & 0x1fffff;\n    var low = engine() >>> 0;\n    return (high * 0x100000000) + low;\n  };\n  proto.uint53 = function () {\n    return Random.uint53(this.engine);\n  };\n\n  // [0, 0x20000000000000]\n  Random.uint53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x200000) {\n        if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low;\n      }\n    }\n  };\n  proto.uint53Full = function () {\n    return Random.uint53Full(this.engine);\n  };\n\n  // [-0x20000000000000, 0x1fffffffffffff]\n  Random.int53 = function (engine) {\n    var high = engine() | 0;\n    var low = engine() >>> 0;\n    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n  };\n  proto.int53 = function () {\n    return Random.int53(this.engine);\n  };\n\n  // [-0x20000000000000, 0x20000000000000]\n  Random.int53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x400000) {\n        if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n      }\n    }\n  };\n  proto.int53Full = function () {\n    return Random.int53Full(this.engine);\n  };\n\n  function add(generate, addend) {\n    if (addend === 0) {\n      return generate;\n    } else {\n      return function (engine) {\n        return generate(engine) + addend;\n      };\n    }\n  }\n\n  Random.integer = (function () {\n    function isPowerOfTwoMinusOne(value) {\n      return ((value + 1) & value) === 0;\n    }\n\n    function bitmask(masking) {\n      return function (engine) {\n        return engine() & masking;\n      };\n    }\n\n    function downscaleToLoopCheckedRange(range) {\n      var extendedRange = range + 1;\n      var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);\n      return function (engine) {\n        var value = 0;\n        do {\n          value = engine() >>> 0;\n        } while (value >= maximum);\n        return value % extendedRange;\n      };\n    }\n\n    function downscaleToRange(range) {\n      if (isPowerOfTwoMinusOne(range)) {\n        return bitmask(range);\n      } else {\n        return downscaleToLoopCheckedRange(range);\n      }\n    }\n\n    function isEvenlyDivisibleByMaxInt32(value) {\n      return (value | 0) === 0;\n    }\n\n    function upscaleWithHighMasking(masking) {\n      return function (engine) {\n        var high = engine() & masking;\n        var low = engine() >>> 0;\n        return (high * 0x100000000) + low;\n      };\n    }\n\n    function upscaleToLoopCheckedRange(extendedRange) {\n      var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() & 0x1fffff;\n          var low = engine() >>> 0;\n          ret = (high * 0x100000000) + low;\n        } while (ret >= maximum);\n        return ret % extendedRange;\n      };\n    }\n\n    function upscaleWithinU53(range) {\n      var extendedRange = range + 1;\n      if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n        var highRange = ((extendedRange / 0x100000000) | 0) - 1;\n        if (isPowerOfTwoMinusOne(highRange)) {\n          return upscaleWithHighMasking(highRange);\n        }\n      }\n      return upscaleToLoopCheckedRange(extendedRange);\n    }\n\n    function upscaleWithinI53AndLoopCheck(min, max) {\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() | 0;\n          var low = engine() >>> 0;\n          ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n        } while (ret < min || ret > max);\n        return ret;\n      };\n    }\n\n    return function (min, max) {\n      min = Math.floor(min);\n      max = Math.floor(max);\n      if (min < -0x20000000000000 || !isFinite(min)) {\n        throw new RangeError(\"Expected min to be at least \" + (-0x20000000000000));\n      } else if (max > 0x20000000000000 || !isFinite(max)) {\n        throw new RangeError(\"Expected max to be at most \" + 0x20000000000000);\n      }\n\n      var range = max - min;\n      if (range <= 0 || !isFinite(range)) {\n        return returnValue(min);\n      } else if (range === 0xffffffff) {\n        if (min === 0) {\n          return Random.uint32;\n        } else {\n          return add(Random.int32, min + 0x80000000);\n        }\n      } else if (range < 0xffffffff) {\n        return add(downscaleToRange(range), min);\n      } else if (range === 0x1fffffffffffff) {\n        return add(Random.uint53, min);\n      } else if (range < 0x1fffffffffffff) {\n        return add(upscaleWithinU53(range), min);\n      } else if (max - 1 - min === 0x1fffffffffffff) {\n        return add(Random.uint53Full, min);\n      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n        return Random.int53Full;\n      } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {\n        return Random.int53;\n      } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {\n        return add(Random.int53, 1);\n      } else if (max === 0x20000000000000) {\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n      } else {\n        return upscaleWithinI53AndLoopCheck(min, max);\n      }\n    };\n  }());\n  proto.integer = function (min, max) {\n    return Random.integer(min, max)(this.engine);\n  };\n\n  // [0, 1] (floating point)\n  Random.realZeroToOneInclusive = function (engine) {\n    return Random.uint53Full(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneInclusive = function () {\n    return Random.realZeroToOneInclusive(this.engine);\n  };\n\n  // [0, 1) (floating point)\n  Random.realZeroToOneExclusive = function (engine) {\n    return Random.uint53(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneExclusive = function () {\n    return Random.realZeroToOneExclusive(this.engine);\n  };\n\n  Random.real = (function () {\n    function multiply(generate, multiplier) {\n      if (multiplier === 1) {\n        return generate;\n      } else if (multiplier === 0) {\n        return function () {\n          return 0;\n        };\n      } else {\n        return function (engine) {\n          return generate(engine) * multiplier;\n        };\n      }\n    }\n\n    return function (left, right, inclusive) {\n      if (!isFinite(left)) {\n        throw new RangeError(\"Expected left to be a finite number\");\n      } else if (!isFinite(right)) {\n        throw new RangeError(\"Expected right to be a finite number\");\n      }\n      return add(\n        multiply(\n          inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,\n          right - left),\n        left);\n    };\n  }());\n  proto.real = function (min, max, inclusive) {\n    return Random.real(min, max, inclusive)(this.engine);\n  };\n\n  Random.bool = (function () {\n    function isLeastBitTrue(engine) {\n      return (engine() & 1) === 1;\n    }\n\n    function lessThan(generate, value) {\n      return function (engine) {\n        return generate(engine) < value;\n      };\n    }\n\n    function probability(percentage) {\n      if (percentage <= 0) {\n        return returnValue(false);\n      } else if (percentage >= 1) {\n        return returnValue(true);\n      } else {\n        var scaled = percentage * 0x100000000;\n        if (scaled % 1 === 0) {\n          return lessThan(Random.int32, (scaled - 0x80000000) | 0);\n        } else {\n          return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));\n        }\n      }\n    }\n\n    return function (numerator, denominator) {\n      if (denominator == null) {\n        if (numerator == null) {\n          return isLeastBitTrue;\n        }\n        return probability(numerator);\n      } else {\n        if (numerator <= 0) {\n          return returnValue(false);\n        } else if (numerator >= denominator) {\n          return returnValue(true);\n        }\n        return lessThan(Random.integer(0, denominator - 1), numerator);\n      }\n    };\n  }());\n  proto.bool = function (numerator, denominator) {\n    return Random.bool(numerator, denominator)(this.engine);\n  };\n\n  function toInteger(value) {\n    var number = +value;\n    if (number < 0) {\n      return Math.ceil(number);\n    } else {\n      return Math.floor(number);\n    }\n  }\n\n  function convertSliceArgument(value, length) {\n    if (value < 0) {\n      return Math.max(value + length, 0);\n    } else {\n      return Math.min(value, length);\n    }\n  }\n  Random.pick = function (engine, array, begin, end) {\n    var length = array.length;\n    var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n    var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n    if (start >= finish) {\n      return void 0;\n    }\n    var distribution = Random.integer(start, finish - 1);\n    return array[distribution(engine)];\n  };\n  proto.pick = function (array, begin, end) {\n    return Random.pick(this.engine, array, begin, end);\n  };\n\n  function returnUndefined() {\n    return void 0;\n  }\n  var slice = Array.prototype.slice;\n  Random.picker = function (array, begin, end) {\n    var clone = slice.call(array, begin, end);\n    if (!clone.length) {\n      return returnUndefined;\n    }\n    var distribution = Random.integer(0, clone.length - 1);\n    return function (engine) {\n      return clone[distribution(engine)];\n    };\n  };\n\n  Random.shuffle = function (engine, array, downTo) {\n    var length = array.length;\n    if (length) {\n      if (downTo == null) {\n        downTo = 0;\n      }\n      for (var i = (length - 1) >>> 0; i > downTo; --i) {\n        var distribution = Random.integer(0, i);\n        var j = distribution(engine);\n        if (i !== j) {\n          var tmp = array[i];\n          array[i] = array[j];\n          array[j] = tmp;\n        }\n      }\n    }\n    return array;\n  };\n  proto.shuffle = function (array) {\n    return Random.shuffle(this.engine, array);\n  };\n\n  Random.sample = function (engine, population, sampleSize) {\n    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n      throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n    }\n\n    if (sampleSize === 0) {\n      return [];\n    }\n\n    var clone = slice.call(population);\n    var length = clone.length;\n    if (length === sampleSize) {\n      return Random.shuffle(engine, clone, 0);\n    }\n    var tailLength = length - sampleSize;\n    return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);\n  };\n  proto.sample = function (population, sampleSize) {\n    return Random.sample(this.engine, population, sampleSize);\n  };\n\n  Random.die = function (sideCount) {\n    return Random.integer(1, sideCount);\n  };\n  proto.die = function (sideCount) {\n    return Random.die(sideCount)(this.engine);\n  };\n\n  Random.dice = function (sideCount, dieCount) {\n    var distribution = Random.die(sideCount);\n    return function (engine) {\n      var result = [];\n      result.length = dieCount;\n      for (var i = 0; i < dieCount; ++i) {\n        result[i] = distribution(engine);\n      }\n      return result;\n    };\n  };\n  proto.dice = function (sideCount, dieCount) {\n    return Random.dice(sideCount, dieCount)(this.engine);\n  };\n\n  // http://en.wikipedia.org/wiki/Universally_unique_identifier\n  Random.uuid4 = (function () {\n    function zeroPad(string, zeroCount) {\n      return stringRepeat(\"0\", zeroCount - string.length) + string;\n    }\n\n    return function (engine) {\n      var a = engine() >>> 0;\n      var b = engine() | 0;\n      var c = engine() | 0;\n      var d = engine() >>> 0;\n\n      return (\n        zeroPad(a.toString(16), 8) +\n        \"-\" +\n        zeroPad((b & 0xffff).toString(16), 4) +\n        \"-\" +\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n        zeroPad(d.toString(16), 8));\n    };\n  }());\n  proto.uuid4 = function () {\n    return Random.uuid4(this.engine);\n  };\n\n  Random.string = (function () {\n    // has 2**x chars, for faster uniform distribution\n    var DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n    return function (pool) {\n      if (pool == null) {\n        pool = DEFAULT_STRING_POOL;\n      }\n\n      var length = pool.length;\n      if (!length) {\n        throw new Error(\"Expected pool not to be an empty string\");\n      }\n\n      var distribution = Random.integer(0, length - 1);\n      return function (engine, length) {\n        var result = \"\";\n        for (var i = 0; i < length; ++i) {\n          var j = distribution(engine);\n          result += pool.charAt(j);\n        }\n        return result;\n      };\n    };\n  }());\n  proto.string = function (length, pool) {\n    return Random.string(pool)(this.engine, length);\n  };\n\n  Random.hex = (function () {\n    var LOWER_HEX_POOL = \"0123456789abcdef\";\n    var lowerHex = Random.string(LOWER_HEX_POOL);\n    var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());\n\n    return function (upper) {\n      if (upper) {\n        return upperHex;\n      } else {\n        return lowerHex;\n      }\n    };\n  }());\n  proto.hex = function (length, upper) {\n    return Random.hex(upper)(this.engine, length);\n  };\n\n  Random.date = function (start, end) {\n    if (!(start instanceof Date)) {\n      throw new TypeError(\"Expected start to be a Date, got \" + typeof start);\n    } else if (!(end instanceof Date)) {\n      throw new TypeError(\"Expected end to be a Date, got \" + typeof end);\n    }\n    var distribution = Random.integer(start.getTime(), end.getTime());\n    return function (engine) {\n      return new Date(distribution(engine));\n    };\n  };\n  proto.date = function (start, end) {\n    return Random.date(start, end)(this.engine);\n  };\n\n  if (typeof define === \"function\" && define.amd) {\n    define(function () {\n      return Random;\n    });\n  } else if (typeof module !== \"undefined\" && typeof require === \"function\") {\n    module.exports = Random;\n  } else {\n    (function () {\n      var oldGlobal = root[GLOBAL_KEY];\n      Random.noConflict = function () {\n        root[GLOBAL_KEY] = oldGlobal;\n        return this;\n      };\n    }());\n    root[GLOBAL_KEY] = Random;\n  }\n}(this));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/random-js/lib/random.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"react\",\"amd\":\"react\",\"commonjs\":\"react\",\"commonjs2\":\"react\"}\n ** module id = 2\n ** module chunks = 0\n **/","import React, {Component} from 'react';\r\n\r\nexport default class Avatar extends Component {\r\n  constructor(props: Object) : void {\r\n    super(props);\r\n    this.skinColor = props.genetic.skinColor(props.country);\r\n    this.eyesColor = props.genetic.eyesColor(props.country, this.skinColor);\r\n    this.hairColor = props.genetic.hairColor(props.country, this.skinColor);\r\n\r\n    this.style = {\r\n      backgroundColor: this.props.bgColor\r\n    };\r\n  }\r\n\r\n  _setSkinColor(skin){\r\n    skin.selectAll('[fill=\"#ffcc99\"]').attr({\r\n      fill: this.skinColor\r\n    });\r\n  }\r\n\r\n  _setEyesColor(eyes){\r\n    eyes.selectAll('path').attr({\r\n      fill: this.eyesColor\r\n    });\r\n  }\r\n\r\n  _setHairColor(hair){\r\n    hair.selectAll('path').attr({\r\n      fill: this.hairColor\r\n    });\r\n  }\r\n\r\n  _setBeardColor(beard){\r\n    beard.selectAll('path').attr({\r\n      fill: this.hairColor\r\n    });\r\n  }\r\n\r\n  _setEyebrowsColor(eyebrows){\r\n    eyebrows.selectAll('path').attr({\r\n      fill: this.hairColor\r\n    });\r\n  }\r\n\r\n  _setClothColor(cloth){\r\n    cloth.select(`#${this.props.gender}_cloth_base`).attr({\r\n      fill: '#333333'\r\n    });\r\n  }\r\n\r\n  _setEyesSize(eyes){\r\n    let size = this.props.genetic.random.integer(6, 10) / 10;\r\n    eyes.select('#right').transform(`s${size}`);\r\n    eyes.select('#left').transform(`s${size}`);\r\n  }\r\n\r\n  _setAsianEyes(eyes){\r\n    eyes.select('#right').transform(`r-60, s0.6`);\r\n    eyes.select('#left').transform(`r60, s0.6`);\r\n  }\r\n\r\n  componentDidMount(){\r\n    let Snap = require('imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js');\r\n    let canvas = Snap(this.svg);\r\n\r\n    Snap.load(this.props.svg, (svg) => {\r\n      let skin = svg.select('#base');\r\n      this._setSkinColor(skin);\r\n\r\n      let eyes = svg.select('#eyes');\r\n      this._setEyesColor(eyes);\r\n      \r\n      if(this.props.genetic.countries.isAsian(this.props.country.initials)){\r\n        this._setAsianEyes(eyes);\r\n      }\r\n      else{\r\n        this._setEyesSize(eyes);\r\n      }\r\n\r\n      let hair = null;\r\n      let bald = false;\r\n      let hairs = svg.selectAll(`g[id^=\"${this.props.gender}_hair_\"`);\r\n      //10% chance to be bald if male\r\n      if(this.props.gender == this.props.genetic.genders.MALE && this.props.genetic.random.bool(0.1)){\r\n        bald = true;\r\n      }\r\n\r\n      if(!bald) {\r\n        hair = svg.select(`#${this.props.gender}_hair_${this.props.genetic.random.integer(1, hairs.length)}`);\r\n      }\r\n\r\n      if(hair !== null){\r\n        this._setHairColor(hair);\r\n      }\r\n\r\n      let cloth = svg.select(`#${this.props.gender}_cloth_1`);\r\n      this._setClothColor(cloth);\r\n\r\n      let mouths = svg.selectAll(`g[id^=\"mouth_\"`);\r\n\r\n      let scale : number = this.props.size / 250;\r\n\r\n      canvas.append(svg.selectAll('filter'));\r\n      canvas.append(skin.transform(`s${scale}`));\r\n      canvas.append(cloth.transform(`s${scale}`));\r\n      canvas.append(eyes.transform(`s${scale}`));\r\n      canvas.append(svg.select(`#mouth_${this.props.genetic.random.integer(1, mouths.length)}`).transform(`s${scale}`));\r\n      if(hair !== null){\r\n        canvas.append(hair.transform(`s${scale}`));\r\n      }\r\n\r\n      if(this.props.gender == this.props.genetic.genders.MALE){\r\n        let allEyebrows = svg.selectAll(`g[id^=\"eyebrows_\"`);\r\n        let eyebrows = svg.select(`#eyebrows_${this.props.genetic.random.integer(1, allEyebrows.length)}`);\r\n        this._setEyebrowsColor(eyebrows);\r\n        canvas.append(eyebrows.transform(`s${scale}`));\r\n      }\r\n\r\n      //50% chance to have a bear if male\r\n      if(this.props.gender == this.props.genetic.genders.MALE && this.props.genetic.random.bool(0.5)){\r\n        let beards = svg.selectAll(`g[id^=\"beard_\"`);\r\n        let beard = svg.select(`#beard_${this.props.genetic.random.integer(1, beards.length)}`);\r\n        this._setBeardColor(beard);\r\n        canvas.append(beard.transform(`s${scale}`));\r\n      }\r\n    });\r\n  }\r\n\r\n  render() : Object {\r\n    return(\r\n      <svg style={this.style} ref={svg => this.svg = svg} width={this.props.size} height={this.props.size}></svg>\r\n    );\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Avatar.js\n **/","export default {\r\n  skin: [\r\n    //light\r\n    '#ffe5c8', '#ffdabe', '#ffceb4', '#ffc3aa', '#f0b8a0',\r\n    //medium\r\n    '#e1ac96', '#d2a18c', '#c39582', '#b48a78', '#a57e6e',\r\n    //dark\r\n    '#967264', '#87675a', '#785c50', '#695046', '#5a453c'\r\n  ],\r\n  eyes: ['#222222'/*black*/, '#663300'/*brown*/, '#4da6ff'/*blue*/, '#00b259'/*green*/],\r\n  hair: ['#222222'/*black*/, '#663300'/*brown*/, '#d9a300'/*blonde*/, '#ff5c26'/*orange*/]\r\n};\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Colors.js\n **/","export default class Countries {\r\n  constructor() : void {\r\n    this.ethnicity = {\r\n      LIGHT: 'LIGHT',\r\n      MEDIUM: 'MEDIUM',\r\n      DARK: 'DARK',\r\n      ALL: 'ALL'\r\n    }\r\n\r\n    this.all = [\r\n      {\r\n        initials: 'ARG',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      },\r\n      {\r\n        initials: 'BRA',\r\n        ethnicity: this.ethnicity.ALL\r\n      },\r\n      {\r\n        initials: 'CHN',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      },\r\n      {\r\n        initials: 'JPN',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      },\r\n      {\r\n        initials: 'USA',\r\n        ethnicity: this.ethnicity.ALL\r\n      },\r\n      {\r\n        initials: 'RUS',\r\n        ethnicity: this.ethnicity.LIGHT\r\n      }\r\n    ];\r\n\r\n    this.asianCountries = [\r\n      'CHN', 'JPN'\r\n    ];\r\n  }\r\n\r\n  isAsian(country: string) : bool {\r\n    return this.asianCountries.indexOf(country) !== -1;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Countries.js\n **/","import Rand from 'random-js';\r\nimport Countries from './Countries';\r\nimport Colors from './Colors';\r\n\r\ntype Options = {\r\n  seed: number,\r\n  minAge?: number,\r\n  maxAge?: number,\r\n  age?: number,\r\n  country?: string,\r\n  gender?: string,\r\n  handed?: string\r\n}\r\n\r\nexport default class Genetic {\r\n  constructor(options: Options) : void {\r\n    this.options = options;\r\n    this.engine = Rand.engines.mt19937().seed(this.options.seed);\r\n    this.random = new Rand(this.engine);\r\n    this.colors = Colors;\r\n    this.countries = new Countries();\r\n    this.genders = {MALE: 'M', FEMALE: 'F'};\r\n    this.hand = {LEFT: 'LEFT', RIGHT: 'RIGHT', TWO: 'TWO'};\r\n  }\r\n\r\n  _choose(arr: Array, start: number = 0, end: number = arr.length - 1) : any {\r\n    if(arr.length > end \r\n      && arr.length > start\r\n      && start > -1\r\n      && end > -1){\r\n      return arr[this.random.integer(start, end)];\r\n    }\r\n\r\n    return arr[this.random.integer(0, arr.length - 1)];\r\n  }\r\n\r\n  _getEthnicity(skinColor: string) : string {\r\n    if(this.colors.skin.indexOf(skinColor) > 4 \r\n      && this.colors.skin.indexOf(skinColor) < 10){\r\n      return this.countries.ethnicity.MEDIUM;\r\n    }\r\n    \r\n    if(this.colors.skin.indexOf(skinColor) > 9){\r\n      return this.countries.ethnicity.DARK;\r\n    }\r\n\r\n    return this.countries.ethnicity.LIGHT;\r\n  }\r\n\r\n  age() : number { \r\n    if(this.options.age){\r\n      return this.options.age;\r\n    }\r\n    \r\n    let minAge = this.options.minAge || 15; \r\n    let maxAge = this.options.maxAge || 70; \r\n    return this.random.integer(minAge, maxAge);\r\n  }\r\n\r\n  handed() : string {  \r\n    if(this.options.handed){\r\n      return this.options.handed;\r\n    }\r\n\r\n    return this._choose([this.hand.LEFT, this.hand.RIGHT, this.hand.TWO]);\r\n  }\r\n\r\n  gender() : string { \r\n    if(this.options.gender){\r\n      return this.options.gender;\r\n    }\r\n\r\n    return this.random.bool() ? this.genders.MALE : this.genders.FEMALE;\r\n  }\r\n\r\n  country() : Object {\r\n    let country = this._choose(this.countries.all);\r\n    \r\n    if(this.options.country){\r\n      this.countries.all.forEach((c) => {\r\n        if(c.initials === this.options.country){\r\n          country = c;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n\r\n    return country;\r\n  }\r\n\r\n  skinColor(country: Object) : string {\r\n    switch(country.ethnicity){\r\n      case this.countries.ethnicity.LIGHT:\r\n        return this._choose(this.colors.skin, 0, 4);\r\n      case this.countries.ethnicity.MEDIUM:\r\n        return this._choose(this.colors.skin, 5, 9);\r\n      case this.countries.ethnicity.DARK:\r\n        return this._choose(this.colors.skin, 10, 14);\r\n      default:\r\n        return this._choose(this.colors.skin);\r\n    }\r\n  }\r\n\r\n  eyesColor(country: Object, skinColor: string) : string {\r\n    let ethnicity = country.ethnicity;\r\n    if(country.ethnicity == this.countries.ethnicity.ALL){\r\n      ethnicity = this._getEthnicity(skinColor);\r\n    }\r\n\r\n    if(ethnicity == this.countries.ethnicity.DARK\r\n      || ethnicity == this.countries.ethnicity.MEDIUM\r\n      || this.countries.isAsian(country.initials)){\r\n      return this.colors.eyes[0];\r\n    }\r\n\r\n    return this._choose(this.colors.eyes);\r\n  }\r\n\r\n  hairColor(country: Object, skinColor: string) : string {\r\n    let ethnicity = country.ethnicity;\r\n    if(country.ethnicity == this.countries.ethnicity.ALL){\r\n      ethnicity = this._getEthnicity(skinColor);\r\n    }\r\n\r\n    if(ethnicity == this.countries.ethnicity.DARK || this.countries.isAsian(country.initials)){\r\n      return this.colors.hair[0];\r\n    }\r\n\r\n    //5% chance to be a ginger\r\n    if(ethnicity == this.countries.ethnicity.LIGHT && this.random.bool(0.05)){\r\n      return this.colors.hair[this.colors.hair.length - 1];\r\n    }\r\n\r\n    if(ethnicity == this.countries.ethnicity.LIGHT){\r\n      return this._choose(this.colors.hair, 0, this.colors.hair.length - 2);\r\n    }\r\n\r\n    return this._choose(this.colors.hair, 0, this.colors.hair.length - 3);\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Genetic.js\n **/","type Infos = {\r\n  firstName: string,\r\n  lastName: string,\r\n  age: number,\r\n  country: string,\r\n  gender: string,\r\n  handed: string,\r\n  avatar: Object\r\n}\r\n\r\nexport default class Person {\r\n  constructor(infos: Infos) : void {\r\n    this.infos = infos;\r\n  }\r\n\r\n  name() : string {\r\n    return `${this.infos.firstName} ${this.infos.lastName}`;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/Person.js\n **/","import React from 'react';\r\nimport Rand from 'random-js';\r\nimport Person from './Person';\r\nimport Genetic from './Genetic';\r\nimport Avatar from './Avatar';\r\nimport avatarSvg from './assets/img/avatar.svg';\r\n\r\ntype Options = {\r\n  seed?: number,\r\n  minAge?: number,\r\n  maxAge?: number,\r\n  age?: number,\r\n  country?: string,\r\n  gender?: string,\r\n  handed?: string,\r\n  avatar?: Object\r\n}\r\n\r\ntype AvatarOptions = {\r\n  svg?: string,\r\n  size?: number,\r\n  bgColor?: string\r\n}\r\n\r\nexport default class PersonGenerator {\r\n  constructor(avatarOptions: AvatarOptions) : void {\r\n    if(!avatarOptions.svg){\r\n      avatarOptions.svg = avatarSvg;\r\n    }\r\n    \r\n    if(!avatarOptions.size){\r\n      avatarOptions.size = 250;\r\n    }\r\n\r\n    if(!avatarOptions.bgColor){\r\n      avatarOptions.bgColor = '#f1f1f1';\r\n    }\r\n\r\n    this.avatarOptions = avatarOptions;\r\n  }\r\n\r\n  _generateOptions(options?: Options) : Object {\r\n    let opts = {};\r\n    let seed = Rand.integer(1, 1000000)(Rand.engines.mt19937().autoSeed());\r\n    \r\n    if(!options){\r\n      opts.seed = seed;\r\n    }\r\n    else{\r\n      opts = options;\r\n      if(!opts.seed){\r\n        opts.seed = seed;\r\n      }\r\n    }\r\n    \r\n    let genetic = new Genetic(opts);\r\n\r\n    let age = genetic.age();\r\n    let gender = genetic.gender();\r\n    let country = genetic.country();\r\n    let handed = genetic.handed();\r\n\r\n    return {genetic, age, gender, country, handed};\r\n  }\r\n\r\n  make(options?: Options) : Person {\r\n    let opts = options ? this._generateOptions(options) : this._generateOptions();\r\n\r\n    return new Person({\r\n      firstName: 'First',\r\n      lastName: 'Last',\r\n      age: opts.age,\r\n      country: opts.country.initials,\r\n      gender: opts.gender,\r\n      handed: opts.handed,\r\n      avatar: opts.avatar || this.makeAvatar(opts)\r\n    });\r\n  }\r\n\r\n  makeAvatar(options?: Object) : Object {\r\n    let opts = {};\r\n\r\n    if(!options){\r\n      opts = this._generateOptions();\r\n    }\r\n    else{\r\n      if(!options.genetic){\r\n        opts = this._generateOptions(options);\r\n      }\r\n      else{\r\n        opts = options;\r\n      }\r\n    }\r\n\r\n    return <Avatar {...this.avatarOptions} {...opts} />\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** D:/Libraries/Dev/Node/freezer/src/PersonGenerator.js\n **/","module.exports = __webpack_public_path__ + \"e6ac5e26bca83e1acbec2359c02c80ef.svg\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/assets/img/avatar.svg\n ** module id = 10\n ** module chunks = 0\n **/","/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.4.0\n// \n// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// \n// build: 2015-04-07\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.4.2\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            name = String(name);\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    \n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        name = String(name);\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = name.split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = name.split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n        }\n        return current_event;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = name.split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = name.split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.unbind(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != 'undefined') {\n        // Next for Node.js or CommonJS\n        var eve = require('eve');\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16);\n                       },\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function () {\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        len && requestAnimFrame(frame);\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in gereal case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && requestAnimFrame(frame);\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < (1 / p)) {\n            l = s * n * n;\n        } else {\n            if (n < (2 / p)) {\n                n -= (1.5 / p);\n                l = s * n * n + .75;\n            } else {\n                if (n < (2.5 / p)) {\n                    n -= (2.25 / p);\n                    l = s * n * n + .9375;\n                } else {\n                    n -= (2.625 / p);\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.4.0\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            w = glob.doc.querySelector(String(w));\n            return wrap(w);\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    reURLValue = /^url\\(#?([^)]+)\\)$/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  (type == \"null\" && o === null) ||\n            (type == typeof o && o !== null) ||\n            (type == \"object\" && o === Object(o)) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n > Parameters\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after, bestLength = afterLength, bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n    \n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = (C == 0 ? null :\n         V == r ? (g - b) / C :\n         V == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4\n        );\n    H = ((H + 360) % 6) * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = (C == 0 ? null :\n         M == r ? (g - b) / C :\n         M == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4);\n    H = ((H + 360) % 6) * 60 / 360;\n    L = (M + m) / 2;\n    S = (C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L));\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n    \n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n            (el.node.parentNode && wrap(el.node.parentNode)) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open((postData ? \"POST\" : \"GET\"), url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = URL(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    // animation\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            return this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\(#?([^)]+)\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value.type == \"clipPath\") {\n                var clip = value;\n            } else {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while ((clazz = classes[j++])) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            this.node.appendChild(stop);\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length,\n                start = 0,\n                j = 0;\n            function seed(i, end) {\n                var step = (end - start) / (i - j);\n                for (var k = j; k < i; k++) {\n                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n                }\n                j = i;\n                start = end;\n            }\n            len--;\n            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n                seed(i, stops[i].offset);\n            }\n            stops[len].offset = stops[len].offset || 100;\n            seed(len, stops[len].offset);\n            for (i = 0; i <= len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0, \n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + (+r), y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + ((j % 2) ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n    \n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    Snap.Set = Set;\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n        t1 = Snap.parseTransformString(t1) || [];\n        t2 = Snap.parseTransformString(t2) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if ((tt1[0] != tt2[0]) ||\n                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + (k++) + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(parseFloat(obj));\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (b instanceof Snap.Matrix) {\n                b = b.toTransformString();\n            }\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.svgTransform2string(b);\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n    \n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (typeof blur == \"string\") {\n            color = blur;\n            opacity = color;\n            blur = 4;\n        }\n        if (typeof color != \"string\") {\n            opacity = color;\n            color = \"#000\";\n        }\n        color = color || \"#000\";\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/imports-loader?this=>window,fix=>module.exports=0!./~/snapsvg/dist/snap.svg.js\n ** module id = 11\n ** module chunks = 0\n **/"],"sourceRoot":""}